# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010


# most of the config is in an external file
import config
reload(config)
from config import *


from buildbot import locks
from buildbot.process import factory
from buildbot.scheduler import Scheduler, Nightly, Periodic, Triggerable
from buildbot.status.tinderbox import TinderboxMailNotifier
from buildbot.status.words import IRC
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import Compile, ShellCommand, WithProperties, TreeSize

from buildbot.changes.pb import PBChangeSource

import buildbotcustom.changes.hgpoller
import buildbotcustom.steps.misc
import buildbotcustom.steps.test
import buildbotcustom.steps.transfer
import buildbotcustom.steps.updates
reload(buildbotcustom.changes.hgpoller)
reload(buildbotcustom.steps.misc)
reload(buildbotcustom.steps.test)
reload(buildbotcustom.steps.transfer)
reload(buildbotcustom.steps.updates)

from buildbotcustom.changes.hgpoller import HgAllLocalesPoller, HgPoller
from buildbotcustom.steps.test import AliveTest, CompareBloatLogs, \
  CompareLeakLogs, Codesighs
from buildbotcustom.steps.misc import SetMozillaBuildProperties, GetHgRevision
from buildbotcustom.steps.transfer import MozillaStageUpload
from buildbotcustom.steps.updates import CreateCompleteUpdateSnippet

#from buildbotcustom.status.tinderbox import TinderboxLocaleMailNotifier
import mozillal10n
reload(mozillal10n)
from mozillal10n import L10nNightly, L10nPeriodic, CCRepackFactory, TriggerLocalesStep

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

for name in BRANCHES.keys():
    # shorthand
    branch = BRANCHES[name]
    l10n = branch['l10n']
    builders = []
    nightlyBuilders = []
    localeBuilders = []
    allBuilders = []
    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        builders.append('%s build' % branch['platforms'][platform]['base_name'])
        # Skip the nightly builder for debug builds
        if platform.find('debug') == -1:
            nightlyBuilders.append('%s nightly' % \
                                    branch['platforms'][platform]['base_name'])
            localeBuilders.append('%s l10n' % \
                                   branch['platforms'][platform]['base_name'])
    allBuilders.extend(builders)
    allBuilders.extend(nightlyBuilders)
    #allBuilders.extend(localeBuilders)

    # Currently, each branch goes to a different tree
    # If this changes in the future this may have to be
    # moved out of the loop
    c['status'].append(TinderboxMailNotifier(
        fromaddr="gozer@mozillamessaging.com",
        tree=branch['tinderbox_tree'],
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org", ],
        relayhost="mail.build.mozilla.org",
        builders=allBuilders,
        logCompression="bzip2"
    ))
    
    c['status'].append(IRC(
        host='irc.mozilla.org',
        nick=branch['irc_nick'],
        channels=branch['irc_channels'],
        categories=[name],
    ))
    
    # Hg branch defaults to the branch name, or otherwise specified by hg_branch
    hg_branch = branch.get('hg_branch',name)

    # change sources
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=hg_branch,
        pushlogUrlOverride='%s/%s/index.cgi/pushlog' % (HGURL, ADD_POLL_BRANCH),
        pollInterval=1*60
    ))
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=hg_branch,
        pushlogUrlOverride='%s/%s/index.cgi/pushlog' % (HGURL, hg_branch),
        pollInterval=1*60
    ))
    if l10n:
        c['change_source'].append(PBChangeSource())
        c['change_source'].append(HgAllLocalesPoller(
            '%s%s/index.cgi/raw-file/tip/%s/locales/all-locales' % (HGURL, name, PRODUCT),
            '%s/pushlog' % LOCALE_REPO_URL,
            branch='%s-l10n' % name,
            pollInterval=180,
        ))

    # schedulers
    # this one gets triggered by the HG Poller
    c['schedulers'].append(Scheduler(
        name=name,
        branch=hg_branch,
        treeStableTimer=3*60,
        builderNames=builders
    ))
    c['schedulers'].append(Nightly(
        name='%s nightly' % name,
        branch=hg_branch,
        hour=[3],
        builderNames=nightlyBuilders
    ))
    c['schedulers'].append(Periodic(
        name='%s periodic' % name,
        builderNames=builders,
        branch=hg_branch,
        periodicBuildTimer=60*60*2 # 2 hours
    ))
    if l10n:
        c['schedulers'].append(Scheduler(
            name='%s l10n onchange' % name,
            branch='%s-l10n' % name,
            treeStableTimer=30,
            builderNames=localeBuilders,
        ))
    #c['schedulers'].append(L10nNightly(
    #    name='%s l10n nightly' % name,
    #    branch=None,
    #    builderNames=localeBuilders,
    #    hour=4,
    #))
    #c['schedulers'].append(L10nPeriodic(
    #    name='%s l10n periodic' % name,
    #    branch=None,
    #    periodicBuildTimer=60*60*2,
    #    builderNames=localeBuilders,
    #))
    if l10n:
        c['schedulers'].append(Triggerable(
            name='%s l10n-trigger' % name,
            builderNames=localeBuilders,
        ))

    for platform in branch['platforms'].keys():
        # no need to have a whole new directory just for logs.
        # let's put these in their non-debug counterpart
        # translates to, eg:
        #  /home/ftp/pub/thunderbird/tinderbox-builds/comm-central-linux
        realPlatform = platform.replace('-debug', '').replace('64', '')
        logUploadDir = 'tinderbox-builds/%s-%s/' % (name, realPlatform)

        lockname = 'lock-%s-%s-dep' % (name, realPlatform)
        lock = locks.MasterLock(lockname)

        # shorthand
        pf = branch['platforms'][platform]
        mozilla2_dep_factory = factory.BuildFactory()
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['echo', WithProperties('Building on: %(slavename)s')],
            env=pf['env']
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command="rm -rfv %s/dist/thunderbird-* %s/dist/install/sea/*.exe " %
                     (pf['platform_objdir'], pf['platform_objdir']),
            env=pf['env'],
            description=['deleting', 'old', 'package'],
            descriptionDone=['delete', 'old', 'package']
        ))
        mozilla2_dep_factory.addStep(Mercurial(
            mode='update',
            baseURL=HGURL,
            defaultBranch=hg_branch,
            alwaysUseLatest=True
        ))
        changesetLink = '<a href=%s/%s/index.cgi/rev' % (HGURL, name)
        changesetLink += '/%(got_revision)s title="Built from revision %(got_revision)s">rev:%(got_revision)s</a>'
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['python', 'client.py' ] + branch['client_py_args'] + ['--cvsroot', branch['cvsroot'], 'checkout'],
            description=['running', 'client.py', 'checkout'],
            descriptionDone=['python', 'client.py', 'checkout'],
        ))
        mozilla2_dep_factory.addStep(GetHgRevision(
            workdir='build/mozilla'
        ))
        changesetLink = '<a href=%s/%s/index.cgi/rev' % (HGURL, ADD_POLL_BRANCH)
        changesetLink += '/%(hg_revision)s title="Built from Mozilla revision %(hg_revision)s">m-c:%(hg_revision)s</a>'
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            # cp configs/thunderbird/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/%s' % (CONFIG_SUBDIR,
                                                 platform,
                                                 branch['mozconfig']
                                                 ),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))

        buildcmd = 'build'
        mozilla2_dep_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', buildcmd],
            env=pf['env'],
            haltOnFailure=True,
            timeout=60*40
        ))

        if platform.find('debug') == -1:
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['make', 'package'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
            if platform.startswith("win32"):
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['make', 'installer'],
                    workdir='build/%s' % pf['platform_objdir'],
                    haltOnFailure=True
                ))
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['make', 'package-compare'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=False
            ))
            mozilla2_dep_factory.addStep(SetMozillaBuildProperties(
                objdir='build/%s/mozilla' % pf['platform_objdir']
            ))
            if branch['upload_stage']:
                mozilla2_dep_factory.addStep(MozillaStageUpload(
                    objdir='%s/mozilla' % pf['platform_objdir'],
                    username=STAGE_USERNAME,
                    milestone=name,
                    remoteHost=STAGE_SERVER,
                    remoteBasePath=STAGE_BASE_PATH,
                    platform=realPlatform,
                    group=STAGE_GROUP,
                    sshKey=STAGE_SSH_KEY,
                    releaseToLatest=False,
                    releaseToDated=False,
                    releaseToTinderboxBuilds=True,
                    tinderboxBuildsDir='%s-%s' % (name, platform),
                    dependToDated=True
                ))
            if branch['codesighs']:
                if platform.find('win32') == -1 and platform.find('linux64') == -1:
                    # Codesighs
                    mozilla2_dep_factory.addStep(ShellCommand(
                        command=['make'],
                        workdir='build/%s/mozilla/tools/codesighs' % pf['platform_objdir']
                    ))
                    mozilla2_dep_factory.addStep(ShellCommand(
                        command=['wget', '-O', 'codesize-auto-old.log',
                         'http://%s/pub/mozilla.org/thunderbird/%s/codesize-auto.log' %\
                          (STAGE_SERVER, logUploadDir)],
                        env=pf['env']
                    ))
                    mozilla2_dep_factory.addStep(Codesighs(
                        objdir='../%s/mozilla' % pf['platform_objdir'],
                        platform=realPlatform,
                        workdir='build/mozilla',
                        env=pf['env']
                    ))
                    mozilla2_dep_factory.addStep(ShellCommand(
                        command=['cat', 'codesize-auto-diff.log']
                    ))
                    mozilla2_dep_factory.addStep(ShellCommand(
                        command=['scp', '-o', 'User=%s' % STAGE_USERNAME,
                         '-o', 'IdentityFile=~/.ssh/%s' % STAGE_SSH_KEY,
                         'codesize-auto.log',
                         '%s:%s/%s' % (STAGE_SERVER, STAGE_BASE_PATH, logUploadDir)]
                    ))
                    mozilla2_dep_factory.addStep(ShellCommand(
                        command=['wget', '-O', 'codesize-base-old.log',
                         'http://%s/pub/mozilla.org/thunderbird/%s/codesize-base.log' %\
                          (STAGE_SERVER, logUploadDir)],
                        env=pf['env']
                    ))
                    mozilla2_dep_factory.addStep(Codesighs(
                        objdir='../%s/mozilla' % pf['platform_objdir'],
                        platform=realPlatform,
                        type='base',
                        workdir='build/mozilla',
                        env=pf['env']
                    ))
                    mozilla2_dep_factory.addStep(ShellCommand(
                        command=['cat', 'codesize-base-diff.log']
                    ))
                    mozilla2_dep_factory.addStep(ShellCommand(
                        command=['scp', '-o', 'User=%s' % STAGE_USERNAME,
                         '-o', 'IdentityFile=~/.ssh/%s' % STAGE_SSH_KEY,
                         'codesize-base.log',
                         '%s:%s/%s' % (STAGE_SERVER, STAGE_BASE_PATH, logUploadDir)]
                    ))

        # OS X builds eat up a ton of space with -save-temps enabled
        # until we have dwarf support we need to clean this up so we don't
        # fill up the disk
        if platform.startswith("macosx"):
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['find', '-E', '.', '-iregex',
                         '.*\.(i|s|mii|ii)$', '-exec', 'rm', '{}', ';'],
                workdir='build/%s' % OBJDIR
            ))

        mozilla2_dep_builder = {
            'name': '%s build' % pf['base_name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s' % (name, platform),
            'factory': mozilla2_dep_factory,
            'category': name,
            'locks' : [lock],
        }
        c['builders'].append(mozilla2_dep_builder)

        mozilla2_dep_clobber_factory = factory.BuildFactory()
        #Treesize calls 'du', not found on Win...
        if platform.find('win32') == -1:
            mozilla2_dep_clobber_factory.addStep(TreeSize(
               workdir="../%s-%s/build/%s" % (name, platform, OBJDIR), 
            ))
        mozilla2_dep_clobber_factory.addStep(ShellCommand(
           workdir="../%s-%s/build" % (name, platform), 
           command=["rm", "-rf", OBJDIR],
        ))

        mozilla2_dep_clobber_builder = {
            'name': '%s build clobber' % pf['base_name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s-clobber' % (name, platform),
            'factory': mozilla2_dep_clobber_factory,
            'category': 'clobber',
            'locks' : [lock],
        }
        c['builders'].append(mozilla2_dep_clobber_builder)

        lockname = 'lock-%s-%s-nightly' % (name, realPlatform)
        lock = locks.MasterLock(lockname)

        mozilla2_nightly_factory = factory.BuildFactory()
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['echo', WithProperties('Building on: %(slavename)s')],
            env=pf['env']
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['find', '.', '-maxdepth', '2', '-mtime', '+7', '-exec',
                     'rm', '-rfv', '{}', ';'],
            env=pf['env'],
            workdir='.',
            description=['cleanup', 'old', 'symbols'],
            flunkOnFailure=False,
        ))
        mozilla2_nightly_factory.addStep(Mercurial(
            mode='clobber',
            baseURL=HGURL,
            defaultBranch=name
        ))
        changesetLink = '<a href=%s/%s/index.cgi/rev' % (HGURL, name)
        changesetLink += '/%(got_revision)s title="Built from revision %(got_revision)s">rev:%(got_revision)s</a>'
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['python', 'client.py'] + branch['client_py_args'] + ['--cvsroot', branch['cvsroot'], 'checkout'],
            description=['running', 'client.py', 'checkout'],
            descriptionDone=['client.py', 'checkout']
        ))
        mozilla2_nightly_factory.addStep(GetHgRevision(
            workdir='build/mozilla'
        ))
        changesetLink = '<a href=%s/%s/index.cgi/rev' % (HGURL, ADD_POLL_BRANCH)
        changesetLink += '/%(hg_revision)s title="Built from Mozilla revision %(hg_revision)s">m-c:%(hg_revision)s</a>'
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            # cp configs/thunderbird/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))

        buildcmd = 'build'
        mozilla2_nightly_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', buildcmd],
            env=pf['env'],
            haltOnFailure=True,
            timeout=60*40
        ))
        if pf['upload_symbols']:
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'buildsymbols'],
                env=pf['env'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['make', 'package'],
            workdir='build/%s' % pf['platform_objdir'],
            haltOnFailure=True
        ))
        if platform.startswith("win32"):
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'installer'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['make', '-C',
                     '%s/mozilla/tools/update-packaging' % pf['platform_objdir']],
            description=['create', 'complete', 'update'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(SetMozillaBuildProperties(
                objdir='build/%s/mozilla' % pf['platform_objdir']
        ))
        if branch['upload_stage']:
            mozilla2_nightly_factory.addStep(MozillaStageUpload(
                    objdir='%s/mozilla' % pf['platform_objdir'],
                    username=STAGE_USERNAME,
                    milestone=name,
                    remoteHost=STAGE_SERVER,
                    remoteBasePath=STAGE_BASE_PATH,
                    platform=realPlatform,
                    group=STAGE_GROUP,
                    sshKey=STAGE_SSH_KEY,
                    releaseToDated=True,
                    releaseToLatest=True,
                    releaseToTinderboxBuilds=True,
                    tinderboxBuildsDir='%s-%s' % (name, platform),
                    dependToDated=True
            ))
        if branch['create_snippet']:
            # this is a tad ugly because we need to python interpolation
            # as well as WithProperties
            # here's an example of what it translates to:
            # /opt/aus2/build/0/Thunderbird/mozilla2/WINNT_x86-msvc/2008010103/en-US
            AUS2_FULL_UPLOAD_DIR = '%s/%s/%%(buildid)s/en-US' % \
              (branch['aus2_base_upload_dir'],
               branch['platforms'][platform]['update_platform'])
            mozilla2_nightly_factory.addStep(CreateCompleteUpdateSnippet(
                objdir='build/%s/mozilla' % pf['platform_objdir'],
                milestone=name,
                baseurl='%s/nightly' % DOWNLOAD_BASE_URL
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['ssh', '-l', AUS2_USER, AUS2_HOST,
                         WithProperties('mkdir -p %s' % AUS2_FULL_UPLOAD_DIR)],
                description=['create', 'aus2', 'upload', 'dir'],
                haltOnFailure=True
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['scp', '-o', 'User=%s' % AUS2_USER,
                         'dist/update/complete.update.snippet',
                         WithProperties('%s:%s/complete.txt' % \
                           (AUS2_HOST, AUS2_FULL_UPLOAD_DIR))],
                workdir='build/%s/mozilla' % pf['platform_objdir'],
                description=['upload', 'complete', 'snippet'],
                haltOnFailure=True
            ))
        if pf['upload_symbols']:
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'uploadsymbols'],
                env=pf['env'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))

        if l10n:
            # this step should trigger locale builds
            mozilla2_nightly_factory.addStep(TriggerLocalesStep(
                product=PRODUCT,
                schedulerNames=['%s l10n-trigger' % name],
            ))
        # in order to save disk space we clobber 'build' at the end.
        # we don't want to clobber anything else though, because symbols
        # sit alongside
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'build'],
            env=pf['env'],
            workdir='.'
        ))

        mozilla2_nightly_builder = {
            'name': '%s nightly' % pf['base_name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s-nightly' % (name, platform),
            'factory': mozilla2_nightly_factory,
            'category': name,
            'locks': [lock],
        }
        c['builders'].append(mozilla2_nightly_builder)

        if l10n:
            mozilla2_l10n_repack_factory = CCRepackFactory(
                mainRepoURL='%s/index.cgi/%s' % (HGURL, name),
                localesRepoURL=LOCALE_REPO_URL,
                configRepoURL=CONFIG_REPO_URL,
                repackLocation='%s/nightly/latest-%s' % (DOWNLOAD_BASE_URL, name),
                mainBranch=name,
                localesBranch='%s-l10n' % name,
                configDir=CONFIG_SUBDIR,
                product=PRODUCT,
                platform=realPlatform,
                appname=MOZ_APP_NAME,
                brandname=BRAND_NAME,
                stage_username=STAGE_USERNAME,
                stage_server=STAGE_SERVER,
                stage_base_path=STAGE_BASE_PATH,
                stage_group=STAGE_GROUP,
                stage_ssh_key=STAGE_SSH_KEY,
                createSnippets=branch['create_l10n_snippets'],
                update_download_base_url=DOWNLOAD_BASE_URL,
                update_base_upload_dir=branch['aus2_base_upload_dir'],
                update_platform=branch['platforms'][platform]['update_platform'],
                update_user=AUS2_USER,
                update_host=AUS2_HOST,
                cvsroot=branch['cvsroot'],
            )

            mozilla2_l10n_repack_builder = {
                'name': '%s l10n' % pf['base_name'],
                'slavenames': pf['slaves'],
                'builddir': '%s-%s-l10n-full' % (name, platform),
                'factory': mozilla2_l10n_repack_factory,
            }
            c['builders'].append(mozilla2_l10n_repack_builder)

    if l10n:
        #Generic builder that triggers a full l10n rebuild        
        f2 = factory.BuildFactory()
        f2.addStep(Mercurial(
                             baseURL=HGURL,
                             defaultBranch=name, 
                             mode='update',
                   ))
        f2.addStep(TriggerLocalesStep(
           product=PRODUCT,
           schedulerNames=['%s l10n-trigger' % name],
        ))
        mozilla2_l10n_trigger_builder = {
            'name': '%s l10n trigger' % name,
            'slavenames': [ obj.slavename for obj in c['slaves'] ],
            'builddir': '%s-l10n-trigger' % (name),
            'category': name,
            'factory': f2,
        } 
        c['builders'].append(mozilla2_l10n_trigger_builder)

####### STATUS TARGETS

from buildbot.status import html

c['status'].append(html.WebStatus(
    http_port=8011, allowForce=True
))

c['status'].append(TinderboxMailNotifier(
    fromaddr='gozer@mozillamessaging.com',
    tree='MozillaTest',
    columnName=WithProperties('%(buildername)s'),
#    localeTree=WithProperties('Mozilla-l10n-%(locale)s'),
#    localeColumnName=WithProperties('%s %s' % ('%(buildername)s', MOZ_APP_NAME)),
    extraRecipients=['tinderbox-daemon@tinderbox.mozilla.org'],
    relayhost='mail.build.mozilla.org',
    logCompression='bzip2',
    builders=localeBuilders,
))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Thunderbird:hg"
