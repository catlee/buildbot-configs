# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### PROJECT IDENTITY
c['projectName'] = "Mozilla Messaging Buildbot"
c['slavePortnum'] = 9990

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['bots'] = [
	     ("momo-vm-02", "bu1ld3r"),
	     ("momo-vm-03", "bu1ld3r"),
	     ("momo-vm-04", "bu1ld3r"),
	     ("momo-vm-05", "bu1ld3r"),
	     ("momo-vm-06", "bu1ld3r")]

####### STATUS PLUGINS

from buildbot.status import html

c['status'] = []
c['status'].append(html.WebStatus(http_port=8810, allowForce=True,)) 

from buildbot.status import words, tinderbox
c['status'].append(words.IRC('irc.mozilla.org', 'thunderbot', ['maildev']))

c['status'].append(tinderbox.TinderboxMailNotifier(
                       fromaddr="gozer@mozillamessaging.com",
                       tree="MozillaTest",
                       extraRecipients=["gozer@mozillamessaging.com", "tinderbox-daemon@tinderbox.mozilla.org"],
                       relayhost="10.200.80.5",
                       logCompression="bzip2",
		       errorparser="unittest",
		       ))
####### SOURCES

c['sources'] = []

from buildbot.changes import bonsaipoller

c['sources'].append(
 bonsaipoller.BonsaiPoller(
  bonsaiURL = 'http://bonsai.mozilla.org',
  module = 'ThunderbirdTinderbox',
  pollInterval = 1 * 60,
  branch = 'HEAD',
 )
)

####### SCHEDULERS

c['schedulers'] = []

from buildbot.scheduler import Scheduler, Periodic

c['schedulers'].append(Scheduler(name="bonsai build scheduler",
				 builderNames=["TB-Linux-Dep-Check","TB-Darwin-Dep-Check","TB-Win32-Dep-Check"],
                                 branch="HEAD",
                                 treeStableTimer=5*60))

c['schedulers'].append(Periodic(name="6 hour build scheduler",
				builderNames=["TB-Linux-Dep-Check", "TB-Darwin-Dep-Check", "TB-Win32-Dep-Check"],
                                periodicBuildTimer=6*60*60))



####### BUILDERS

c['builders'] = []

import mozbuild
reload(mozbuild)
from mozbuild import *
from buildbot.process import factory
from buildbot.steps.shell import Configure,Compile
from buildbotcustom.unittest.steps import *
from buildbotcustom.steps.test import Codesighs



s = factory.s

## unix builder
from buildbot.steps.transfer import FileDownload

trunk_unix_steps = [
    s(ShellCommand, name="rpm -qa",
        command=["rpm" , "-qa"],
    ),
    s(MozillaCheckoutClientMk, workdir="."),
    s(FileDownload, mastersrc="mozconfig-linux",
        slavedest=".mozconfig",
        workdir="mozilla"),
    s(ShellCommand, name="mozconfig contents",
        command=["cat",".mozconfig"],
        workdir="mozilla"),
    s(MozillaClientMkPull, workdir="mozilla", project="mail"),
    s(Configure,
      workdir="mozilla",
      command=["make", "-f", "client.mk", "configure",]),
    s(Compile, 
      workdir="mozilla",
      command=["make", "-f", "client.mk", "build",]),
#    s(ShellCommand, name="make buildsymbols",
#      command=["make", "buildsymbols"],
#      workdir="mozilla/objdir",
#    ),
    s(MozillaCheck,
      warnOnWarnings=True,
      timeout=60*30,
      workdir="mozilla/objdir/mailnews",
    ),
#    s(ShellCommand, name="make package",
#        command=["make", "package"],
#        workdir="mozilla/objdir"),
]

trunk_unix_builder = {
    'name': "TB-Linux-Dep-Check",
    'slavenames': ['momo-vm-02'],
    'builddir': "trunk-unix",
    'factory': factory.BuildFactory(trunk_unix_steps),
    'category': "default",
}
c['builders'].append(trunk_unix_builder)

## osx builder
trunk_osx_steps = [
    s(ShellCommand, name="sw_vers",
        command=["sw_vers"],
    ),
    s(MozillaCheckoutClientMk, workdir="."),
    s(FileDownload, mastersrc="mozconfig-osx",
        slavedest=".mozconfig",
        workdir="mozilla"),
    s(ShellCommand, name="mozconfig contents",
        command=["cat",".mozconfig"],
        workdir="mozilla"),
    s(MozillaClientMkPull, workdir="mozilla", project="mail"),
    s(Configure,
      workdir="mozilla",
      command=["make", "-f", "client.mk", "configure",]),
    s(Compile,
      workdir="mozilla",
      command=["make", "-f", "client.mk", "build",]),
#    s(ShellCommand, name="make buildsymbols",
#      command=["make", "buildsymbols"],
#      workdir="mozilla/objdir",
#    ),
    s(MozillaCheck,
      warnOnWarnings=True,
      timeout=60*30,
      workdir="mozilla/objdir/mailnews",
    ),
#    s(ShellCommand, name="make package",
#        command=["make", "package"],
#        workdir="mozilla/objdir"),
]

trunk_osx_builder = {
    'name': "TB-Darwin-Dep-Check",
    'slavenames': ['momo-vm-05'],
    'builddir': "trunk-osx",
    'factory': factory.BuildFactory(trunk_osx_steps),
    'category': "default",
}
c['builders'].append(trunk_osx_builder)

## win32 builder

trunk_win32_steps = [
    s(MozillaCheckoutClientMk, workdir="."),
    s(FileDownload, mastersrc="mozconfig-win",
        slavedest=".mozconfig",
        workdir="mozilla"),
    s(ShellCommand, name="mozconfig contents",
        command=["cat",".mozconfig"],
        workdir="mozilla"),
    s(MozillaClientMkPull, workdir="mozilla", project="mail"),
    s(Configure,
      workdir="mozilla",
      command=["make", "-f", "client.mk", "configure",]),
    s(Compile,
      workdir="mozilla",
      command=["make", "-f", "client.mk", "build",]),
#    s(ShellCommand, name="make buildsymbols",
#      command=["make", "buildsymbols"],
#      workdir="mozilla/objdir",
#    ),
    s(MozillaCheck,
      warnOnWarnings=True,
      timeout=60*30,
      workdir="mozilla/objdir/mailnews",
    ),

]

trunk_win32_builder = {
    'name': "TB-Win32-Dep-Check",
    'slavenames': ['momo-vm-04'],
    'builddir': "trunk-win32",
    'factory': factory.BuildFactory(trunk_win32_steps),
    'category': "default"
}
c['builders'].append(trunk_win32_builder)

## END OF DEFAULT MASTER.CFG
