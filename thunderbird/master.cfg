# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

from twisted.web.client import HTTPClientFactory
HTTPClientFactory.noisy = False

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010

def getConfig(branch, value, default=None):
    return branch.get(value, DEFAULTS.get(value, default))

# most of the config is in an external file
import config
reload(config)
from config import *

import os
debug = os.environ.get('DEBUG')

import sys

c['builders'] = []
c['schedulers'] = []
c['change_source'] = []
c['status'] = []

####### Release Automation

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

import release_master
reload(release_master)

c['builders'].extend(release_master.builders)
c['schedulers'].extend(release_master.schedulers)
c['change_source'].extend(release_master.change_source)
c['status'].extend(release_master.status)

import buildbotcustom.misc
reload(buildbotcustom.misc)
from buildbotcustom.misc import isHgPollerTriggered, isImportantL10nFile

from buildbot import locks
from buildbot.process import factory
from buildbot.scheduler import Scheduler, Nightly, Periodic, Triggerable, AnyBranchScheduler
from buildbot.status.tinderbox import TinderboxMailNotifier
import buildbot.steps.source
from buildbot.steps.source import Mercurial
from buildbot.steps import trigger
from buildbot.steps.shell import Compile, ShellCommand, WithProperties, SetProperty, TreeSize

import buildbotcustom.changes.hgpoller
import buildbotcustom.steps.misc
import buildbotcustom.steps.test
import buildbotcustom.steps.transfer
import buildbotcustom.steps.updates
import buildbotcustom.steps.base
from buildbotcustom.steps.base import Trigger

from buildbotcustom.steps.test import AliveTest, CompareBloatLogs, \
  CompareLeakLogs, Codesighs

import buildbotcustom.steps.misc
reload(buildbotcustom.steps.misc)
from buildbotcustom.steps.misc import SetMozillaBuildProperties, MozillaClobberer

from buildbotcustom.steps.transfer import MozillaStageUpload
from buildbotcustom.steps.updates import CreateCompleteUpdateSnippet

from buildbotcustom.process.factory import CCUnittestBuildFactory, CCNightlyRepackFactory, CCNightlyBuildFactory, UnittestPackagedBuildFactory

from buildbotcustom.l10n import TriggerableL10n

import mozillabuild
reload(mozillabuild)
from mozillabuild import *

# Keep track of our l10n pollers to eliminate dupes
hg_all_locales_poller_map = {}

# Keep track of builders we don't want to merge
nomergeBuilders = []
def mergeRequests(builder, req1, req2):
    if builder.name in nomergeBuilders:
        return False
    return req1.canBeMergedWith(req2)

####### SOURCES

setupHGPollersFromBranches(DEFAULTS, BRANCHES, c['change_source'])

for name in sorted(BRANCHES.keys()):
    # shorthand 
    branch = BRANCHES[name]
    build_factory = getConfig(DEFAULTS, branch, 'factory')
    mozilla_branch = getConfig(DEFAULTS, branch, 'mozilla_central_branch')
    l10n = getConfig(DEFAULTS, branch,'l10n')
    builders = []
    nightlyBuilders = []
    localeBuilders = []
    depLocaleBuilders = []
    allBuilders = []
    
    nightly = branch.get('nightly') != False
    
    product = branch.get('product', PRODUCT)
    branch['product'] = product
    # Hg branch defaults to the branch name, or otherwise specified by hg_branch
    hg_branch = branch.get('hg_branch',name)
    appname=branch.get('appname', MOZ_APP_NAME)
    branch['appname']= appname
    brandname=getConfig(DEFAULTS, branch, 'brand_name')
    product_name=getConfig(DEFAULTS, branch, 'product_name')
    branch['brand_name'] = brandname

    branch_name = getConfig(DEFAULTS, branch, 'branch_name')
    nightly_hour = getConfig(DEFAULTS, branch, 'nightly_hour')
    nightly_minute = getConfig(DEFAULTS, branch, 'nightly_minute')
    
    mozconfig=branch.get('mozconfig','mozconfig')
    download_base_url = branch.get('download_base_url', DOWNLOAD_BASE_URL)
    stage_base_path = getConfig(DEFAULTS, branch, 'stage_base_path')
    builder_type = getConfig(DEFAULTS, branch, 'builder_type')

    unittest_masters =  getConfig(DEFAULTS, branch, 'unittest_masters')

    graph_server =   getConfig(DEFAULTS, branch, 'graph_server')
    graph_selector = getConfig(DEFAULTS, branch, 'graph_selector')

    builder_name = builder_type
    if builder_name == 'bloat':
        builder_name = 'leak test build'
    
    aus = getConfig(DEFAULTS, branch, 'aus')

    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        platform_l10n = branch['platforms'][platform].get('l10n', l10n)
        builders.append('%s %s' % (branch['platforms'][platform]['base_name'], builder_name))
        
        # Not everybody wants nightlies
        if nightly:
            nightlyBuilders.append('%s nightly' % \
                                    branch['platforms'][platform]['base_name'])
        # Not everybody wants l10n repacks
        if platform_l10n:
            l10n_builder_name = "%s %s l10n" % (product_name, branch['platforms'][platform]['base_name'])
            localeBuilders.append("%s" % (l10n_builder_name))
            nomergeBuilders.append("%s" % (l10n_builder_name))
            localeBuilders.append("%s build" % (l10n_builder_name))
            nomergeBuilders.append("%s build" % (l10n_builder_name))
            depLocaleBuilders.append("%s build" % (l10n_builder_name))

            c['schedulers'].append(TriggerableL10n(
                name=l10n_builder_name,
                platform=platform,
                builderNames=[l10n_builder_name],
                branch=hg_branch,
                baseTag='default',
                localesFile='mail/locales/all-locales',
            ))


    allBuilders.extend(builders)
    allBuilders.extend(nightlyBuilders)

    error_parser = "unix"
    if builder_type == "check" or builder_type == "bloat":
        error_parser = "unittest"

    # Currently, each branch goes to a different tree
    # If this changes in the future this may have to be
    # moved out of the loop
    tinderbox_tree = getConfig(DEFAULTS, branch, 'tinderbox_tree')
    c['status'].append(TinderboxMailNotifier(
        fromaddr="gozer@mozillamessaging.com",
        tree=tinderbox_tree,
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org", ],
        relayhost="mx.mozillamessaging.com",
        builders=allBuilders,
        logCompression="bzip2",
        errorparser = error_parser, 
    ))
    if l10n:
        # This notifies all l10n related build objects to Mozilla-l10n
        c['status'].append(TinderboxMailNotifier(
            fromaddr="gozer@mozillamessaging.com",
            tree="Mozilla-l10n",
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="mx.mozillamessaging.com",
            logCompression="bzip2",
            builders=localeBuilders,
            binaryURL="%s/nightly/latest-%s-l10n/" % (download_base_url, branch_name),
        ))
        # We only want the builds from the specified builders
        # since their builds have a build property called "locale"
        c['status'].append(TinderboxMailNotifier(
            fromaddr="gozer@mozillamessaging.com",
            tree=WithProperties("Mozilla-l10n-%(locale)s"),
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="mx.mozillamessaging.com",
            logCompression="bzip2",
            builders=localeBuilders,
            binaryURL="%s/nightly/latest-%s-l10n/" % (download_base_url, branch_name),
        ))
        


    # schedulers
    # this one gets triggered by the HG Poller
    add_poll_branches = getConfig(DEFAULTS, branch, 'add_poll_branches')
    stable_timer = 5*60

    c['schedulers'].append(Scheduler(
        name=name,
        branch=hg_branch,
        treeStableTimer=stable_timer,
        #treeStableTimer=60*60*12, #XXX: Disable
        #idleTimeout= getConfig(DEFAULTS, branch, 'period'),
        builderNames=builders,
        fileIsImportant=lambda c: isHgPollerTriggered(c, HGURL)
    ))
    c['schedulers'].append(Nightly(
        name='%s nightly' % name,
        branch=hg_branch,
        hour=nightly_hour,
        minute=nightly_minute, 
        builderNames=nightlyBuilders
    ))
    if l10n:
        l10n_modules = [
            'mail',
            'editor',
            'other-licenses/branding/thunderbird',
            'netwerk',
            'dom',
            'toolkit',
            'security/manager',
        ]
        poller_index = getConfig(DEFAULTS, branch, 'l10n_repo')
        c['schedulers'].append(Scheduler(
            name="%s l10n" % name,
            branch=poller_index,
            treeStableTimer=None,
            builderNames=depLocaleBuilders,
            fileIsImportant=lambda c: isImportantL10nFile(c, l10n_modules),
            properties={
                'app': product,
                'en_revision': 'default',
                'l10n_revision': 'default',
                }
        ))
        # We need to make sure we don't create duplicate l10n pollers
        poller_key = "%s %s" % (HGURL, poller_index)
        if not hg_all_locales_poller_map.get(poller_key):
            hg_all_locales_poller = HgAllLocalesPoller(hgURL = HGURL,
                            repositoryIndex =  poller_index,
                            pollInterval = 5*60)
            hg_all_locales_poller.parallelRequests = 1
            c['change_source'].append(hg_all_locales_poller)
            hg_all_locales_poller_map[poller_key]=1

    for platform in branch['platforms'].keys():
        # no need to have a whole new directory just for logs.
        # let's put these in their non-debug counterpart
        # translates to, eg:
        #  /home/ftp/pub/thunderbird/tinderbox-builds/comm-central-linux

        unittest_branch = None
        if unittest_masters:
            unittest_branch = "%s-%s-opt-unittest" % (platform , branch_name)

        #XXX: Kludge
        realPlatform = platform.replace('-debug', '').replace('64', '').replace('-shark', '')
        realPlatform = realPlatform.replace('-10.5','')

        logUploadDir = 'tinderbox-builds/%s-%s/' % (name, platform)

        lockname = 'lock-%s-%s-dep' % (name, platform)
        lock = locks.SlaveLock(lockname)

        # shorthand
        pf = branch['platforms'][platform]

        # Milestone controls where things get uploaded on stage
        milestone = pf.get('milestone',  branch.get('milestone', DEFAULTS.get('milestone', name)))

        codesighs = pf.get('codesighs', getConfig(DEFAULTS, branch, 'codesighs'))
        upload_stage = pf.get('upload_stage', getConfig(DEFAULTS, branch, 'upload_stage'))
        create_snippet = pf.get('create_snippet', getConfig(DEFAULTS, branch, 'create_snippet'))
        create_partial = pf.get('create_partial', getConfig(DEFAULTS, branch, 'create_partial'))
        l10n = pf.get('l10n', getConfig(DEFAULTS, branch, 'l10n'))
        build_space = pf.get('build_space', getConfig(DEFAULTS, branch, 'build_space'))
        package_tests = pf.get('packageTests', getConfig(DEFAULTS, branch, 'packageTests'))

        upload_glob = None
        if branch.get('upload_glob'):
            upload_glob="%s/%s" % (pf['platform_objdir'], branch['upload_glob'])
        if pf.get('upload_glob'):
            upload_glob="%s/%s" % (pf['platform_objdir'], pf['upload_glob'])

        #Clobber support
        clobber_url = getConfig(DEFAULTS, branch, 'clobber_url')
        build_tools_repo = getConfig(DEFAULTS, branch, 'build_tools_repo')

        client_py_args = getConfig(DEFAULTS, branch, 'client_py_args')
        client_py_extra_args = getConfig(DEFAULTS, branch, 'client_py_extra_args')

        if package_tests:
            for suite in ['mozmill', 'xpcshell']:
              if suite == 'mozmill' and platform in ('linux', 'linux64'):
                  print >> sys.stderr, "Disabling enabled packaged mozmill for %s" % platform
                  continue

              packaged_tests_factory = UnittestPackagedBuildFactory(
                  platform=platform,
                  test_suites=[suite],
                  env={},
                  productName=appname,
                  hgHost=HGHOST,
                  repoPath=hg_branch,
                  buildToolsRepoPath=build_tools_repo,
                  buildSpace=1.0,
                  downloadSymbols=True,
                  buildsBeforeReboot=pf.get('builds_before_reboot', 0),
              )

              unittest_builder_name = '%s test %s' % (pf['base_name'], suite)

              builder = {
                  'name': unittest_builder_name,
                  'slavenames': pf['slaves'],
                  'builddir': '%s-%s-%s-%s-%s' % (name, platform, 'opt', 'unittest', suite),
                  'factory': packaged_tests_factory,
                  'category': name,
              }
              c['builders'].append(builder)
              
              nomergeBuilders.append(unittest_builder_name)
              c['schedulers'].append(Scheduler(
                  name = "unittest-%s-%s" % (platform, suite),
                  branch = unittest_branch,
                  builderNames = [ unittest_builder_name ],
                  treeStableTimer = None,
              ))

              c['status'].append(TinderboxMailNotifier(
                  fromaddr="gozer@mozillamessaging.com",
                  tree=tinderbox_tree,
                  extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org", ],
                  relayhost="mx.mozillamessaging.com",
                  builders=[ unittest_builder_name ],
                  logCompression="bzip2",
                  errorparser = "unittest",
              ))

        if build_factory == 'CCUnittestBuildFactory':
            mozmill = getConfig(DEFAULTS, branch, 'mozmill')
            if mozmill and platform in ('linux', 'linux64'):
		print >> sys.stderr, "Disabling enabled mozmill for %s" % platform
                mozmill = False

            unittest_factory = CCUnittestBuildFactory(
       		    branchName=branch_name,
                    platform=platform,
                    config_repo_path='build/buildbot-configs',
                    config_dir=CONFIG_SUBDIR,
                    objdir='objdir',
                    productName=appname,
                    brandName=brandname,
                    client_py_extra_args=client_py_extra_args,
                    mochitest_leak_threshold=None,
                    mochichrome_leak_threshold=None,
                    mochibrowser_leak_threshold=None,
                    hgHost=HGHOST,
                    repoPath=hg_branch,
                    mozRepoPath=mozilla_branch,
                    buildToolsRepoPath=build_tools_repo,
                    buildSpace=build_space,
                    clobberURL=clobber_url,
                    clobberTime=30*24*7, #Hours before clobber
                    buildsBeforeReboot=pf.get('builds_before_reboot', 0),
                    exec_reftest_suites=False,
                    exec_mochi_suites=False,
                    exec_mozmill_suites=mozmill,
                    exec_xpcshell_suites=getConfig(DEFAULTS, branch, 'exec_xpcshell_suites'),
                )
            
            builder = {
                'name': '%s %s' % (pf['base_name'], builder_name),
                'slavenames': pf['slaves'],
                'builddir': "%s-%s-%s" % (platform, branch_name, builder_type),
                'factory': unittest_factory,
                'category': name,
            }
            c['builders'].append(builder)
            
            continue

	if l10n:             
            l10n_nightly_updates = pf.get('l10n_nightly_updates',  branch.get('l10n_nightly_updates', DEFAULTS.get('l10n_nightly_updates', name)))
            l10n_dated_dirs = False
            if l10n_nightly_updates:
                l10n_dated_dirs = True
            mozilla2_l10n_repack_factory = CCNightlyRepackFactory(
                    platform=platform,
                    nightly=True,
                    hgHost='hg.mozilla.org',
                    tree=getConfig(DEFAULTS, branch, 'l10n_tree'),
                    project=branch.get('stage_project',appname),
                    appName=product,
                    enUSBinaryURL='%s/nightly/latest-%s/' % (download_base_url, milestone),
                    downloadBaseURL=download_base_url,
                    stageServer=branch.get('stage_server',STAGE_SERVER),
                    stageUsername=branch.get('stage_username',STAGE_USERNAME),
                    stageSshKey=branch.get('stage_ssh_key',STAGE_SSH_KEY),
                    ausBaseUploadDir=aus['base_upload_dir'],
                    ausUser=aus['user'],
                    ausHost=aus['host'],
                    ausSshKey=AUS2_SSH_KEY,
                    updatePlatform=pf['update_platform'],
                    branchName=branch_name,
                    repoPath=hg_branch,
                    mozRepoPath=mozilla_branch,
                    l10nRepoPath=getConfig(DEFAULTS, branch, 'l10n_repo'),
                    l10nNightlyUpdate=l10n_nightly_updates,
                    createPartial=True,
                    l10nDatedDirs=l10n_dated_dirs,
                    buildToolsRepoPath='build/tools',
                    compareLocalesRepoPath='build/compare-locales',
                    compareLocalesTag='RELEASE_AUTOMATION',
                    buildSpace=build_space,
                    clobberURL=clobber_url,
                    clobberTime=30*24*7, #Hours before clobber
            )

            mozilla2_l10n_repack_builder = {
                'name': '%s %s l10n' % (product_name, pf['base_name']),
                'slavenames': pf['slaves'],
                'builddir': '%s-%s-l10n-full' % (name, platform),
                'factory': mozilla2_l10n_repack_factory,
                'category': '%s-l10n' % name,
            }
            c['builders'].append(mozilla2_l10n_repack_builder)

            mozilla2_l10n_repack_dep_factory = CCNightlyRepackFactory(
                    hgHost='hg.mozilla.org',
                    tree=getConfig(DEFAULTS, branch, 'l10n_tree'),
                    project=branch.get('stage_project',appname),
                    appName=product,
                    nightly=False, 
                    enUSBinaryURL='%s/nightly/latest-%s/' % (download_base_url, milestone), 
                    stageServer=branch.get('stage_server',STAGE_SERVER),
                    stageUsername=branch.get('stage_username',STAGE_USERNAME),
                    stageSshKey=branch.get('stage_ssh_key',STAGE_SSH_KEY),
                    branchName=branch_name,
                    repoPath=hg_branch,
                    mozRepoPath=mozilla_branch,
                    l10nRepoPath=getConfig(DEFAULTS, branch, 'l10n_repo'),
                    buildToolsRepoPath='build/tools',
                    compareLocalesRepoPath='build/compare-locales',
                    compareLocalesTag='RELEASE_AUTOMATION',
                    buildSpace=build_space,
                    clobberURL=clobber_url,
                    clobberTime=30*24*7, #Hours before clobber
            )
            mozilla2_l10n_repack_dep_builder = {
                'name': '%s %s l10n build' % (product_name, pf['base_name']),
                'slavenames': pf['slaves'],
                'builddir': '%s-%s-l10n-dep' % (name, platform),
                'factory': mozilla2_l10n_repack_dep_factory,
                'category': '%s-l10n' % name,
            }
            c['builders'].append(mozilla2_l10n_repack_dep_builder)
	
        if build_factory == 'CCNightlyBuildFactory':
            leakTest = builder_type == 'bloat'
            checkTest = pf.get('enable_checktests',  DEFAULTS['enable_checktests'])
            
            
            nightly_factory = CCNightlyBuildFactory(
                nightly = False,
                env = pf['env'],
                objdir = pf['platform_objdir'],
                checkObjdir = pf['check_objdir'],
                platform = platform,
                hgHost = HGHOST,
                repoPath=hg_branch,
                mozRepoPath=mozilla_branch,
                buildToolsRepoPath=build_tools_repo,
                buildSpace=build_space,
                client_py_extra_args = client_py_extra_args,
                configRepoPath = CONFIG_REPO_PATH,
                configSubDir = CONFIG_SUBDIR, #
                profiledBuild = pf['profiled_build'],
                productName=appname,
                mozconfig = "%s/%s/%s" % (platform, branch_name, branch['mozconfig']),
                branchName=branch_name,
                stageServer = STAGE_SERVER,
                stageUsername = STAGE_USERNAME,
                stageGroup = STAGE_GROUP,
                stageSshKey = STAGE_SSH_KEY,
                stageBasePath = STAGE_BASE_PATH,
                clobberURL=clobber_url,
                clobberTime=30*24*7, #Hours before clobber
#                graphServer = graph_server,
#                graphSelector = graph_selector,
#                graphBranch = tinderbox_tree,
                baseName = pf['base_name'],
                leakTest = leakTest,
                checkTest = checkTest,
                codesighs = codesighs,
                uploadPackages = upload_stage,
                uploadSymbols = False, # Don't upload symbols for dep builds
                buildsBeforeReboot = pf.get('builds_before_reboot', 0),
                packageTests = getConfig(DEFAULTS, branch, 'packageTests'),
                enable_ccache = pf.get('enable_ccache', False),
                skipBlankRepos = True,
                unittestMasters = unittest_masters,
                unittestBranch = unittest_branch,
            )

            builder = {
                'name': '%s %s' % (pf['base_name'], builder_name),
                'slavenames': pf['slaves'],
                'builddir': "%s-%s-%s" % (platform, branch_name, builder_type),
                'factory': nightly_factory,
                'category': name,
            }

            c['builders'].append(builder)

            if builder_type == 'bloat':
               continue

            triggered_schedulers = ['%s %s l10n' % (product_name, pf['base_name'])],

            dep_factory = CCNightlyBuildFactory(
                nightly = True,
                env = pf['env'],
                objdir = pf['platform_objdir'],
                platform = platform,
                hgHost = HGHOST,
                repoPath=hg_branch,
                mozRepoPath=mozilla_branch,
                buildToolsRepoPath=build_tools_repo,
                buildSpace=build_space,
                client_py_extra_args = client_py_extra_args,
                configRepoPath = CONFIG_REPO_PATH,
                configSubDir = CONFIG_SUBDIR, #
                profiledBuild = pf['profiled_build'],
                productName=appname,
                mozconfig = "%s/%s/%s" % (platform, branch_name, branch['mozconfig']),
                branchName=branch_name,
                downloadBaseURL=download_base_url,
                stageServer = STAGE_SERVER,
                stageUsername = STAGE_USERNAME,
                stageGroup = STAGE_GROUP,
                stageSshKey = STAGE_SSH_KEY,
                stageBasePath = STAGE_BASE_PATH,

                ausBaseUploadDir=aus['base_upload_dir'],
                ausUser=aus['user'],
                ausHost=aus['host'],
                ausSshKey=AUS2_SSH_KEY,
                updatePlatform=pf['update_platform'],

                #graphServer = branch['graph_server'],
                #graphSelector = branch['graph_selector'],
                #graphBranch = branch['tinderbox_tree'],
                baseName = pf['base_name'],
                #leakTest = leakTest,
                #checkTest = checkTest,
                #valgrindCheck = valgrindCheck,
                codesighs = codesighs,
                uploadPackages = upload_stage,
                createSnippet=create_snippet,
                createPartial=True,
                uploadSymbols = pf['upload_symbols'],
                buildsBeforeReboot = pf.get('builds_before_reboot', 0),
                packageTests = getConfig(DEFAULTS, branch, 'packageTests'),
                enable_ccache = pf.get('enable_ccache', False),
                skipBlankRepos = True,
                triggerBuilds=l10n,
                triggeredSchedulers=triggered_schedulers,
            )

            builder = {
                'name': '%s %s' % (pf['base_name'], 'nightly'),
                'slavenames': pf['slaves'],
                'builddir': "%s-%s-%s" % (platform, branch_name, 'nightly'),
                'factory': dep_factory,
                'category': name,
            }

            c['builders'].append(builder)

            trigger_factory =  factory.BuildFactory()
            trigger_factory.addStep(Trigger(
              schedulerNames=triggered_schedulers,
              waitForFinish=False,
            ))
            builder = {
                'name': '%s %s l10n trigger' % (pf['base_name'], 'nightly'),
                'slavenames': pf['slaves'],
                'builddir': "%s-%s-%s-l10n-trigger" % (platform, branch_name, 'nightly'),
                'factory': trigger_factory,
                'category': name,
            }

####### STATUS TARGETS

from buildbot.status import html

baseport=8011

c['status'].append(html.WebStatus(
    http_port=baseport, allowForce=True
))

c['status'].append(html.WebStatus(
    http_port=8014, allowForce=False
))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Thunderbird:hg"
c['buildbotURL'] = "http://build.mozillamessaging.com/buildbot/production/"
c['db_url'] = BuildSlaves.DB_URL

# Give certain builders priority over other builders                                                                                                    
def prioritizeBuilders(botmaster, builders):
    def sortkey(builder):
        priority = 0

        #Release above everything else
        if builder.builder_status.category == 'release':
            priority += 8

        #mozmill and xpcshell tests
        if builder.name.find('mozmill') > 1 or builder.name.find('xpcshell') > 1:
            priority += 4

        #Nightly above most
        if builder.name.find('nightly') > 1:
            priority += 2

        return -priority, builder.getOldestRequestTime()

    builders.sort(key=sortkey)

    return builders

c['prioritizeBuilders'] = prioritizeBuilders
c['mergeRequests'] = mergeRequests
