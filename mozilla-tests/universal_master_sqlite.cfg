# vim: ft=python
from copy import deepcopy

# import/reload dance so that reconfigs work
import master_common
import master_localconfig
import config
import buildbotcustom.misc
reload(master_common)
reload(master_localconfig)
reload(config)
reload(buildbotcustom.misc)

from master_common import BuildmasterConfig
c = BuildmasterConfig
for key, value in master_localconfig.BuildmasterConfig.items():
    if key in c:
        c[key].extend(value)
    else:
        c[key] = value

from config import BRANCHES, PLATFORMS, SUITES, BRANCH_UNITTEST_VARS, SLAVES
from master_localconfig import ACTIVE_BRANCHES, ACTIVE_PLATFORMS

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords
from buildbot.buildslave import BuildSlave

for platform, slaves in SLAVES.items():
    for name in sorted(slaves.keys()):
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1,
                                      properties=slaves[name]))

from buildbotcustom.misc import generateTalosBranchObjects

from buildbot.schedulers.triggerable import Triggerable

for p in ACTIVE_PLATFORMS.keys():
    ACTIVE_PLATFORMS[p] = deepcopy(PLATFORMS[p])

for branch in ACTIVE_BRANCHES:
    branchObjects = generateTalosBranchObjects(branch, BRANCHES[branch],
                                               ACTIVE_PLATFORMS, SUITES,
                                               BRANCH_UNITTEST_VARS['platforms'])

    # No change sources here please!
    c['builders'].extend(branchObjects['builders'])
    c['status'].extend(branchObjects['status'])
    c['schedulers'].extend(branchObjects['schedulers'])
    c['change_source'].extend(branchObjects['change_source'])

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

c['db_url'] = "sqlite:///state.sqlite"

c['mergeRequests'] = buildbotcustom.misc.mergeRequests

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig
