# vim: ft=python
from copy import deepcopy

# import/reload dance so that reconfigs work
import buildbotcustom.misc
import master_common
import config
import master_localconfig
reload(buildbotcustom.misc)
reload(master_common)
reload(config)
reload(master_localconfig)

from master_common import BuildmasterConfig
c = BuildmasterConfig
for key, value in master_localconfig.BuildmasterConfig.items():
    if key in c:
        c[key].extend(value)
    else:
        c[key] = value

# Create our QueueDir objects
# This is reloaded in buildbotcustom.misc
from buildtools.queuedir import QueueDir
commandsQueue = QueueDir('commands', '%s/commands' % master_localconfig.QUEUEDIR)

from config import BRANCHES, PLATFORMS, SUITES, BRANCH_UNITTEST_VARS, PROJECTS, SLAVES
from master_localconfig import ACTIVE_BRANCHES, ACTIVE_PLATFORMS, ACTIVE_PROJECTS

from buildbotcustom.misc import generateTalosBranchObjects, generateProjectObjects, mergeBuildObjects

for p in ACTIVE_PLATFORMS.keys():
    ACTIVE_PLATFORMS[p] = deepcopy(PLATFORMS[p])

buildObjects = {}

for branch in ACTIVE_BRANCHES:
    talosObjects = generateTalosBranchObjects(branch, BRANCHES[branch],
                                               ACTIVE_PLATFORMS, SUITES,
                                               BRANCH_UNITTEST_VARS['platforms'])
    buildObjects = mergeBuildObjects(buildObjects, talosObjects)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

# We only want the schedulers and change sources
c['schedulers'].extend(buildObjects['schedulers'])
c['change_source'].extend(buildObjects['change_source'])

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

import passwords
from passwords import BBDB_URL
c['db_url'] = BBDB_URL
c['db_poll_interval'] = 60
c['multiMaster'] = True

if hasattr(passwords, 'PULSE_PASSWORD'):
    pulseQueue = QueueDir('pulse', '%s/pulse' % master_localconfig.QUEUEDIR)
    # Send pulse messages
    import re
    import buildbotcustom.status.pulse
    reload(buildbotcustom.status.pulse)
    from buildbotcustom.status.pulse import PulseStatus
    c['status'].append(PulseStatus(
        pulseQueue,
        ignoreBuilders=[re.compile('.*shadow-central.*'), re.compile('fuzzer-.*')],
        send_logs=False,
        ))

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig
