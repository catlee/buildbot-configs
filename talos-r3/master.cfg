# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os.path
from buildbot.buildslave import BuildSlave
from buildbot.status import html
from buildbot.steps.shell import WithProperties

import buildbotcustom.scheduler
import buildbotcustom.misc
reload(buildbotcustom.scheduler)
reload(buildbotcustom.misc)
from buildbotcustom.scheduler import NoMergeScheduler, NoMergeMultiScheduler, MultiScheduler
from buildbotcustom.misc import generateTalosBranchObjects

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

##
## Misc Config
##

c['debugPassword'] = "mozilla"
c['projectName'] = "Talos"
c['projectURL'] = "http://quality.mozilla.org/en/projects/automation/talos"
c['buildbotURL'] = "http://talos-master.mozilla.org:8012"
c['slavePortnum'] = 9012

##
## Status
##

c['status'] = []
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import tinderbox
from buildbot.status.mail import MailNotifier

c['status'].append(MailNotifier(
                       fromaddr="talos.buildbot@build.mozilla.org",
                       sendToInterestedUsers=False,
                       extraRecipients=["joduinn@mozilla.com"],
                       mode="failing",
                       builders=None, # send for all builders
                       relayhost="smtp.mozilla.org"))

import config
reload(config)
from config import *

##
## Slaves
##

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords

c['slaves'] = []
for platform, names in SLAVES.items():
    c['slaves'].extend(BuildSlave(name, SlavePasswords[platform], max_builds=1) for name in names)

##
## Sources
##
from buildbot.changes.pb import PBChangeSource
c['change_source'] = [PBChangeSource()]

##
## Builders and Schedulers
##

c['schedulers'] = []
c['builders'] = []

# Give the release builders priority over other builders
def prioritizeBuilders(botmaster, builders):
    def sortkey(builder):
        if builder.builder_status.category.endswith('-release'):
            return 0, builder.getOldestRequestTime()
        else:
            return 1, builder.getOldestRequestTime()
    builders.sort(key=sortkey)
    return builders
c['prioritizeBuilders'] = prioritizeBuilders

###
### we have to poll ftp for mozilla-1.9.0 builds
###
import ftppoller
reload(ftppoller)
from ftppoller import FtpPoller

for platform in PLATFORMS:
    c['change_source'].append(FtpPoller(
        searchString = BRANCHES['mozilla-1.9.0']['ftp_searchstrings'][platform],
        tree = "Firefox3.0",
        branch = "mozilla-1.9.0-%s" % platform,
        ftpURLs = BRANCHES['mozilla-1.9.0']['ftp_urls'][platform],
        pollInterval = 10 * 60)
    )

for branch, branch_config in BRANCHES.items():
    objects = generateTalosBranchObjects(branch, branch_config, PLATFORMS, SUITES)
    c['builders'].extend(objects['builders'])
    c['schedulers'].extend(objects['schedulers'])
    c['status'].extend(objects['status'])
