# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os.path
# from buildbot.changes.freshcvs import FreshCVSSource
from buildbot.buildslave import BuildSlave
from buildbot.process import factory
from buildbot.scheduler import Scheduler, Periodic
from buildbot.status import html
from buildbot import locks

# from auth import authlist, debugPassword

import perfrunner
reload(perfrunner)
from perfrunner import *

###
### Tinderbox builder names and build directories
###
WIN32_SEARCHSTRING="en-US.win32.zip"
MAC_SEARCHSTRING="en-US.mac.dmg"
LINUX_SEARCHSTRING="en-US.linux-i686.tar.bz2"

WIN32_MOZ2_CENTRAL_BUILDDIRS=["http://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-win32/"]
LINUX_MOZ2_CENTRAL_BUILDDIRS=["http://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-linux/"]
MAC_MOZ2_CENTRAL_BUILDDIRS=["http://ftp.mozilla.org/pub/mozilla.org/firefox/tinderbox-builds/mozilla-central-macosx/"]

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

##
## Misc Config
##

c['debugPassword'] = "mozilla"
#c['manhole'] = Manhole(9999, "admin", "password")
c['projectName'] = "Talos"
c['projectURL'] = "http://quality.mozilla.org/en/projects/automation/talos"
c['buildbotURL'] = "http://qm-buildbot01.mozilla.org:2008"
c['slavePortnum'] = 9987

##
## Slaves
##

c['slaves'] = [BuildSlave(name, password, max_builds=1) for (name, password) in [
               ("qm-pubuntu-stage01", "l1nux"),
               ("qm-ptiger-stage01", "mac1nt0sh"),
               ("qm-pxp-stage01", "w1nd3rs"),
               ("qm-pvista-stage01", "w1nd3rs"),
               ("qm-pleopard-stage01", "mac1nt0sh")
              ]]

##
## Status
##

c['status'] = []
c['status'].append(html.WebStatus(http_port=2008, allowForce=True))

from buildbot.status import tinderbox
from buildbot.status.mail import MailNotifier
from tinderboxmailnotifier import TinderboxMailNotifier

c['status'].append(MailNotifier(
                       fromaddr="talos.buildbot@build.mozilla.org",
                       sendToInterestedUsers=False,
                       extraRecipients=["anodelman@mozilla.com"],
                       mode="failing",
                       builders=None, # send for all builders
                       relayhost="smtp.mozilla.org"))

# this is the system installed TinderboxMailNotifier
c['status'].append(tinderbox.TinderboxMailNotifier(
                       fromaddr="talos.buildbot@build.mozilla.org",
                       tree="MozillaTest",
                       extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org",],
                       relayhost="smtp.mozilla.org",
                       builders=["Linux talos mozilla-central stage",
                                 "MacOSX Darwin 8.8.1 talos mozilla-central stage",
                                 "MacOSX Darwin 9.0.0 talos mozilla-central stage",
                                 "WINNT 5.1 talos mozilla-central stage",
                                 "WINNT 6.0 talos mozilla-central stage"],
#                       useChangeTime=True,
                       logCompression="bzip2"))

##
## Sources
##

import ftppoller
reload(ftppoller)
from ftppoller import FtpPoller

c['change_source'] = []

c['change_source'].append(FtpPoller(
    tree = "Firefox",
    branch = "MOZ2-WIN32-CENTRAL",
    pollInterval = 2 * 60,
    ftpURLs = WIN32_MOZ2_CENTRAL_BUILDDIRS,
    searchString = WIN32_SEARCHSTRING)
)

c['change_source'].append(FtpPoller(
    tree = "Firefox",
    branch = "MOZ2-LINUX-CENTRAL",
    pollInterval = 2 * 60,
    ftpURLs = LINUX_MOZ2_CENTRAL_BUILDDIRS,
    searchString = LINUX_SEARCHSTRING)
)

c['change_source'].append(FtpPoller(
    tree = "Firefox",
    branch = "MOZ2-MAC-CENTRAL",
    pollInterval = 2 * 60,
    ftpURLs = MAC_MOZ2_CENTRAL_BUILDDIRS,
    searchString = MAC_SEARCHSTRING)
)
##
## Schedulers
##

c['schedulers'] = []

#mozilla-central
c['schedulers'].append(Scheduler(name="moz2 central win32 scheduler",
                                 branch="MOZ2-WIN32-CENTRAL",
                                 treeStableTimer=5*60,
                                 builderNames=["WINNT 5.1 talos mozilla-central stage",
                                               "WINNT 6.0 talos mozilla-central stage"]
))
c['schedulers'].append(Scheduler(name="moz2 central perfrun linux scheduler",
                                 branch="MOZ2-LINUX-CENTRAL",
                                 treeStableTimer=5*60,
                                 builderNames=["Linux talos mozilla-central stage"]
))
c['schedulers'].append(Scheduler(name="moz2 central perfrun mac scheduler",
                                 branch="MOZ2-MAC-CENTRAL",
                                 treeStableTimer=5*60,
                                 builderNames=["MacOSX Darwin 8.8.1 talos mozilla-central stage",
                                               "MacOSX Darwin 9.0.0 talos mozilla-central stage"]
))

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

#STAGING MACHINES

graphConfig    = ['--resultsServer', 'graphs-stage.mozilla.org', '--resultsLink', '/server/bulk.cgi']
stageConfig    = graphConfig + ['--activeTests', 'tdhtml:ts:tsspider:tp'] 
nochromeConfig = graphConfig + ['--activeTests', 'tdhtml:ts:tsspider', '--noChrome']

basicConfig    = 'configs/production.sample.config'
branchConfig   = 'configs/production.sample.config.nogfx'
#nochromeConfig = 'configs/production.sample.config.nochrome'
fastConfig     = 'configs/fast.production.sample.config'
fastManifest   = 'configs/historic_manifest.txt'
jssConfig      = 'configs/jss.production.sample.config'

basicTalosCmd  = ['python', 'run_tests.py', '--noisy']


win32_moz2_stage_steps = TalosFactory(OS = 'win',
                          envName='vc8perf',
                          buildBranch="moz-central-stage",
                          configOptions=stageConfig,
                          buildPath="..\\firefox\\firefox.exe",
                          talosCmd=basicTalosCmd)

vista_moz2_stage_steps = TalosFactory(OS = 'win',
                          envName='vc8perf',
                          buildBranch="moz-central-stage",
                          configOptions=stageConfig,
                          buildPath="..\\firefox\\firefox.exe",
                          talosCmd=basicTalosCmd)

linux_moz2_stage_steps = TalosFactory(OS = 'linux',
                          envName='linux',
                          buildBranch="moz-central-stage",
                          configOptions=stageConfig,
                          buildPath="../firefox/firefox",
                          talosCmd=basicTalosCmd)

mac_moz2_stage_steps = TalosFactory(OS = 'tiger',
                          envName='mac',
                          buildBranch="moz-central-stage",
                          configOptions=stageConfig,
                          buildPath="../Minefield.app/Contents/MacOS/firefox",
                          talosCmd=basicTalosCmd)

leopard_moz2_stage_steps = TalosFactory(OS = 'leopard',
                          envName='mac',
                          buildBranch="moz-central-stage",
                          configOptions=stageConfig,
                          buildPath="../Minefield.app/Contents/MacOS/firefox",
                          talosCmd=basicTalosCmd)


#STAGING
win32_moz2_stage_builder = {
    'name': "WINNT 5.1 talos mozilla-central stage",
    'slavenames': ['qm-pxp-stage01'],
    'builddir': "win32-trunk",
    'factory': win32_moz2_stage_steps,
    'category': "Firefox Trunk"
}
vista_moz2_stage_builder = {
    'name': "WINNT 6.0 talos mozilla-central stage",
    'slavenames': ['qm-pvista-stage01'],
    'builddir': "vista-trunk",
    'factory': vista_moz2_stage_steps,
    'category': "Firefox Trunk"
}
linux_moz2_stage_builder = {
    'name': "Linux talos mozilla-central stage",
    'slavenames': ['qm-pubuntu-stage01'],
    'builddir': "linux-trunk",
    'factory': linux_moz2_stage_steps,
    'category': "Firefox Trunk"
}
mac_moz2_stage_builder = {
    'name': "MacOSX Darwin 8.8.1 talos mozilla-central stage",
    'slavenames': ['qm-ptiger-stage01'],
    'builddir': "mac-trunk",
    'factory': mac_moz2_stage_steps,
    'category': "Firefox Trunk"
}
leopard_moz2_stage_builder = {
    'name': "MacOSX Darwin 9.0.0 talos mozilla-central stage",
    'slavenames': ['qm-pleopard-stage01'],
    'builddir': "leopard-trunk",
    'factory': leopard_moz2_stage_steps,
    'category': "Firefox Trunk"
}

c['builders'] = []
#STAGING
c['builders'].append(win32_moz2_stage_builder)
c['builders'].append(vista_moz2_stage_builder)
c['builders'].append(linux_moz2_stage_builder)
c['builders'].append(mac_moz2_stage_builder)
c['builders'].append(leopard_moz2_stage_builder)
