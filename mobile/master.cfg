# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9020


####### SCHEDULERS AND CHANGE SOURCES
c['sources'] = []
c['schedulers'] = []

from buildbot.changes.bonsaipoller import BonsaiPoller
from buildbot.scheduler import Scheduler, Nightly

c['sources'].append(BonsaiPoller(
    bonsaiURL = 'http://bonsai.mozilla.org',
    module = 'AviarySuiteBranchTinderbox',
    branch = 'HEAD',
    pollInterval = 1 * 60
))

c['schedulers'].append(Scheduler(
    name="mobile dep scheduler",
    branch="HEAD",
    treeStableTimer=3*60,
    builderNames=["mobile-linux-arm-dep"]
))
c['schedulers'].append(Nightly(
    name="mobile nightly scheduler",
    branch="HEAD",
    hour=[1],
    builderNames=["mobile-linux-arm-nightly"]
))


####### BUILDERS
CVSROOT = ':ext:stgbld@cvs.mozilla.org:/cvsroot'
OBJDIR = 'xr-linux-arm'
CONFIG_REPO_URL = 'http://hg.mozilla.org/build/buildbot-configs'
CONFIG_SUBDIR = 'mobile'
STAGE_USERNAME = 'mobilebld'
STAGE_SERVER = 'stage.mozilla.org'
STAGE_BASE_PATH = '/home/mobilebld/mobile-builds'
STAGE_GROUP = 'mobilebld'
STAGE_SSH_KEY = 'mobilebld_dsa'
SBOX_HOME = '/scratchbox/users/cltbld/home/cltbld'

c['builders'] = []

from buildbot.process import factory
from buildbot.steps.transfer import FileDownload
from buildbot.steps.shell import Compile, ShellCommand, WithProperties
from buildbot.locks import SlaveLock

linux_lock = SlaveLock(name='linux_arm_lock', maxCount=1)

linux_arm_dep_factory = factory.BuildFactory()
linux_arm_dep_factory.addStep(ShellCommand(
    command = "rm /tmp/*_cltbld.log",
    description=['removing', 'logfile'],
    descriptionDone=['remove', 'logfile'],
    haltOnFailure=False,
    flunkOnFailure=False,
    warnOnFailure=False
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p',
               'mkdir dep'],
    description=['creating', 'dep dir'],
    descriptionDone=['create', 'dep dir'],
    haltOnFailure=False,
    flunkOnFailure=False,
    warnOnFailure=False
))
linux_arm_dep_factory.addStep(ShellCommand(
    # configure needs to be deleted since we regenerate it every time.
    #  if we don't delete it we get checkout conflicts
    # configs/ is the mozconfig repo; we check this out every time
    # extensions/softkb/ gets patched and copied over every time
    command = ['/scratchbox/login', '-p', '-d', 'dep',
               'rm -rfv mozilla/configure mozilla/configs/ ' + \
                 'mozilla/extensions/softkb/'],
    description=['cleaning up'],
    descriptionDone=['cleanup'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep',
               'cvs -d %s co mozilla/client.mk' % CVSROOT],
    description=['checkout client.mk'],
    descriptionDone=['checked out', 'client.mk'],
    haltOnFailure=True,
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'hg clone %s configs' % CONFIG_REPO_URL],
    description=['checkout configs'],
    descriptionDone=['checked out', 'configs'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'cp configs/%s/linux-arm/mozconfig .mozconfig' % CONFIG_SUBDIR],
    description=['copy mozconfig'],
    descriptionDone=['copied mozconfig'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'make -f client.mk checkout'],
    description=['checkout code'],
    descriptionDone=['checked out', 'code'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep',
               'cvs -d %s co mozilla/minimo/components/softkb' % CVSROOT],
    description=['checking', 'out', 'softkb'],
    descriptionDone=['checked', 'out', 'softkb'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(FileDownload(
    mastersrc='softkb.diff',
    slavedest='softkb.diff',
    workdir='%s/dep' % SBOX_HOME
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'patch -N -p0 -i ../softkb.diff'],
    description=['patching', 'for', 'softkb'],
    descriptionDone=['patched', 'for', 'softkb'],
    # this will return 1 on subsequent patches, we have to ignore it
    haltOnFailure=False,
    warnOnFailure=False,
    flunkOnFailure=False
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'mv -f minimo/components/softkb extensions/'],
    description=['moving', 'softkb'],
    descriptionDone=['move', 'softkb'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'autoconf2.13'],
    description=['running', 'autoconf'],
    descriptionDone=['run', 'autoconf'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(Compile(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'make -f client.mk build'],
    env={'PKG_CONFIG_PATH': '/usr/lib/pkgconfig/:/usr/local/lib/pkgconfig'},
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla/%s' % OBJDIR,
               'make package'],
    description=['make package'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'dep/mozilla',
               'ssh mobilebld@stage.mozilla.org ' + \
               'mkdir -p /home/ftp/pub/mobile/dep'],
    description=['creating', 'upload dir'],
    descriptionDone=['create', 'upload dir'],
    haltOnFailure=False
))
linux_arm_dep_factory.addStep(ShellCommand(
    workdir='%s/dep/mozilla/%s' % (SBOX_HOME, OBJDIR),
    command = ['bash', '-c',
               'scp dist/*.tar.bz2 ' + \
               'mobilebld@stage.mozilla.org:/home/ftp/pub/mobile/dep'],
    description=['uploading', 'build'],
    descriptionDone=['upload', 'build'],
    haltOnFailure=True
))

linux_arm_dep_builder = {
    'name': 'mobile-linux-arm-dep',
    'slavenames': ['mobile-linux-slave1'],
    'builddir': 'mobile-linux-arm-dep',
    'factory': linux_arm_dep_factory,
    'category': 'mobile',
    'locks': [linux_lock]
}
c['builders'].append(linux_arm_dep_builder)


linux_arm_nightly_factory = factory.BuildFactory()
linux_arm_nightly_factory.addStep(ShellCommand(
    command = "rm /tmp/*_cltbld.log",
    description=['removing', 'logfile'],
    descriptionDone=['remove', 'logfile'],
    haltOnFailure=False,
    flunkOnFailure=False,
    warnOnFailure=False
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p',
               'mkdir nightly'],
    description=['creating', 'nightly dir'],
    descriptionDone=['create', 'nightly dir'],
    haltOnFailure=False,
    flunkOnFailure=False,
    warnOnFailure=False
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly',
               'rm -rfv mozilla/'],
    description=['clobbering'],
    descriptionDone=['clobber'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly',
               'cvs -d %s co mozilla/client.mk' % CVSROOT],
    description=['checkout client.mk'],
    descriptionDone=['checked out', 'client.mk'],
    haltOnFailure=True,
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'hg clone %s configs' % CONFIG_REPO_URL],
    description=['checkout configs'],
    descriptionDone=['checked out', 'configs'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'cp configs/%s/linux-arm/mozconfig .mozconfig' % CONFIG_SUBDIR],
    description=['copy mozconfig'],
    descriptionDone=['copied mozconfig'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'make -f client.mk checkout'],
    description=['checkout code'],
    descriptionDone=['checked out', 'code'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly',
               'cvs -d %s co mozilla/minimo/components/softkb' % CVSROOT],
    description=['checking', 'out', 'softkb'],
    descriptionDone=['checked', 'out', 'softkb'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(FileDownload(
    mastersrc='softkb.diff',
    slavedest='softkb.diff',
    workdir='%s/nightly' % SBOX_HOME
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'patch -N -p0 -i ../softkb.diff'],
    description=['patching', 'for', 'softkb'],
    descriptionDone=['patched', 'for', 'softkb'],
    # this will return 1 on subsequent patches, we have to ignore it
    haltOnFailure=False,
    warnOnFailure=False,
    flunkOnFailure=False
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'mv -f minimo/components/softkb extensions/'],
    description=['moving', 'softkb'],
    descriptionDone=['move', 'softkb'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'autoconf2.13'],
    description=['running', 'autoconf'],
    descriptionDone=['run', 'autoconf'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(Compile(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'make -f client.mk build'],
    env={'PKG_CONFIG_PATH': '/usr/lib/pkgconfig/:/usr/local/lib/pkgconfig'},
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla/%s' % OBJDIR,
               'make package'],
    description=['make package'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'ssh mobilebld@stage.mozilla.org ' + \
               'mkdir -p /home/ftp/pub/mobile/nightly'],
    description=['creating', 'upload dir'],
    descriptionDone=['create', 'upload dir'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    workdir='%s/nightly/mozilla/%s' % (SBOX_HOME, OBJDIR),
    command = ['bash', '-c',
               'scp dist/*.tar.bz2 ' + \
               'mobilebld@stage.mozilla.org:/home/ftp/pub/mobile/nightly'],
    description=['uploading', 'build'],
    descriptionDone=['upload', 'build'],
    haltOnFailure=True
))

linux_arm_nightly_builder = {
    'name': 'mobile-linux-arm-nightly',
    'slavenames': ['mobile-linux-slave1'],
    'builddir': 'mobile-linux-arm-nightly',
    'factory': linux_arm_nightly_factory,
    'category': 'mobile',
    'locks': [linux_lock]
}
c['builders'].append(linux_arm_nightly_builder)


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.tinderbox import TinderboxMailNotifier

c['status'].append(html.WebStatus(
    http_port=8020, allowForce=True
))

c['status'].append(TinderboxMailNotifier(
    fromaddr="mozilla2.buildbot@build.mozilla.org",
    tree="Mobile",
    extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
    relayhost="mail.build.mozilla.org",
    logCompression="bzip2"
))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Mozilla Mobile"
c['projectURL'] = "http://wiki.mozilla.org/Mobile"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://staging-master.build.mozilla.org:8020/"
