# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9020


####### SCHEDULERS AND CHANGE SOURCES
c['sources'] = []
c['schedulers'] = []

from buildbot.changes.bonsaipoller import BonsaiPoller
from buildbot.scheduler import Scheduler, Nightly

c['sources'].append(BonsaiPoller(
    bonsaiURL = 'http://bonsai.mozilla.org',
    module = 'AviarySuiteBranchTinderbox',
    branch = 'HEAD',
    pollInterval = 1 * 60
))

c['schedulers'].append(Scheduler(
    name="mobile dep scheduler",
    branch="HEAD",
    treeStableTimer=3*60,
    builderNames=["mobile-linux-arm-dep"]
))
c['schedulers'].append(Nightly(
    name="mobile nightly scheduler",
    branch="HEAD",
    hour=[1],
    builderNames=["mobile-linux-arm-nightly"]
))


####### BUILDERS
CVSROOT = ':ext:stgbld@cvs.mozilla.org:/cvsroot'
OBJDIR = 'fx-linux-arm'
CONFIG_REPO_URL = 'http://hg.mozilla.org/build/buildbot-configs/mobile'
STAGE_USERNAME = 'ffxbld'
STAGE_SERVER = 'stage.mozilla.org'
STAGE_BASE_PATH = '/home/ffxbld/mobile-builds'
STAGE_GROUP = 'firefox'
STAGE_SSH_KEY = 'ffxbld_dsa'


c['builders'] = []

from buildbot.process import factory
from buildbot.steps.shell import Compile, ShellCommand, WithProperties
from buildbot.locks import SlaveLock

import buildbotcustom
reload(buildbotcustom)

from buildbotcustom.steps.misc import GetBuildID
from buildbotcustom.steps.transfer import MozillaStageUpload

# We have to override these classes to workaround scratchbox sillyness.
# This shouldn't be necessary after we get Buildbot running inside of
# scratchbox.

import re
from buildbot.status.builder import SUCCESS, FAILURE

class SboxGetBuildID(GetBuildID):
    def __init__(self, basedir, **kwargs):
        GetBuildID.__init__(self, **kwargs)
        self.addFactoryArguments(basedir=basedir)
        self.command = ['/scratchbox/login', '-d', basedir,
         'python config/printconfigsetting.py ' + \
         '%s/dist/bin/application.ini App BuildID' % OBJDIR]
    def commandComplete(self, cmd):
        buildidRegex = re.compile(r'^([0-9]+).*', re.DOTALL)
        try:
            buildid = re.sub(buildidRegex, r'\1', cmd.logs['stdio'].getText())
            self.setProperty('buildid', buildid)
        except:
            return FAILURE
        return SUCCESS


linux_lock = SlaveLock(name='linux_arm_lock', maxCount=1)

linux_arm_dep_factory = factory.BuildFactory()
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p',
               'cvs -d %s co mozilla/client.mk' % CVSROOT],
    description=['checkout client.mk'],
    descriptionDone=['checked out', 'client.mk'],
    haltOnFailure=True,
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'mozilla',
               'rm -rfv configs'],
    description=['remove configs'],
    descriptionDone=['removed configs'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'mozilla',
               'hg clone %s configs' % CONFIG_REPO_URL],
    description=['checkout configs'],
    descriptionDone=['checked out', 'configs'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'mozilla',
               'cp configs/linux-arm/mozconfig .mozconfig'],
    description=['copy mozconfig'],
    descriptionDone=['copied mozconfig'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'mozilla',
               'make -f client.mk checkout'],
    description=['checkout code'],
    descriptionDone=['checked out', 'code'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(Compile(
    command = ['/scratchbox/login', '-p', '-d', 'mozilla',
               'make -f client.mk build'],
    env={'PKG_CONFIG_PATH': '/usr/lib/pkgconfig/'},
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'mozilla/%s' % OBJDIR,
               'make package'],
    description=['make package'],
    descriptionDone=['make package'],
    haltOnFailure=True
))
linux_arm_dep_factory.addStep(SboxGetBuildID(
    basedir='mozilla'
))
linux_arm_dep_factory.addStep(MozillaStageUpload(
    objdir='/scratchbox/users/cltbld/home/cltbld/mozilla/%s' % OBJDIR,
    username=STAGE_USERNAME,
    milestone='mobile',
    remoteHost=STAGE_SERVER,
    remoteBasePath=STAGE_BASE_PATH,
    platform='linux',
    group=STAGE_GROUP,
    sshKey=STAGE_SSH_KEY,
    releaseToLatest=False,
    releaseToDated=False,
    releaseToTinderboxBuilds=True,
    tinderboxBuildsDir='mobile-linux-arm',
    dependToDated=True
))

linux_arm_dep_builder = {
    'name': 'mobile-linux-arm-dep',
    'slavenames': ['mobile-linux-slave1'],
    'builddir': 'mobile-linux-arm-dep',
    'factory': linux_arm_dep_factory,
    'category': 'mobile',
    'locks': [linux_lock]
}
c['builders'].append(linux_arm_dep_builder)


linux_arm_nightly_factory = factory.BuildFactory()
linux_arm_nightly_factory.addStep(ShellCommand(
    command=['/scratchbox/login', '-p', 'rm -rfv nightly/'],
    description=['clobbering'],
    descriptionDone=['clobbered'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command=['/scratchbox/login', '-p', 'mkdir nightly'],
    description=['create nightly', 'dir'],
    descriptionDone=['created nightly', 'dir'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly',
               'cvs -d %s co mozilla/client.mk' % CVSROOT],
    description=['checkout client.mk'],
    descriptionDone=['checked out', 'client.mk'],
    haltOnFailure=True,
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'rm -rfv configs'],
    description=['remove configs'],
    descriptionDone=['removed configs'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'hg clone %s configs' % CONFIG_REPO_URL],
    description=['checkout configs'],
    descriptionDone=['checked out', 'configs'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'cp configs/linux-arm/mozconfig .mozconfig'],
    description=['copy mozconfig'],
    descriptionDone=['copied mozconfig'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'make -f client.mk checkout'],
    description=['checkout code'],
    descriptionDone=['checked out', 'code'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(Compile(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla',
               'make -f client.mk build'],
    env={'PKG_CONFIG_PATH': '/usr/lib/pkgconfig/'},
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(ShellCommand(
    command = ['/scratchbox/login', '-p', '-d', 'nightly/mozilla/%s' % OBJDIR,
               'make package'],
    description=['make package'],
    descriptionDone=['make package'],
    haltOnFailure=True
))
linux_arm_nightly_factory.addStep(SboxGetBuildID(
    basedir='nightly/mozilla'
))
linux_arm_nightly_factory.addStep(MozillaStageUpload(
    objdir='/scratchbox/users/cltbld/home/cltbld/nightly/mozilla/%s' % OBJDIR,
    username=STAGE_USERNAME,
    milestone='mobile',
    remoteHost=STAGE_SERVER,
    remoteBasePath=STAGE_BASE_PATH,
    platform='linux',
    group=STAGE_GROUP,
    sshKey=STAGE_SSH_KEY,
    releaseToLatest=True,
    releaseToDated=True,
    releaseToTinderboxBuilds=True,
    tinderboxBuildsDir='mobile-linux-arm',
    dependToDated=True
))

linux_arm_nightly_builder = {
    'name': 'mobile-linux-arm-nightly',
    'slavenames': ['mobile-linux-slave1'],
    'builddir': 'mobile-linux-arm-nightly',
    'factory': linux_arm_nightly_factory,
    'category': 'mobile',
    'locks': [linux_lock]
}
c['builders'].append(linux_arm_nightly_builder)


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(
    http_port=8020, allowForce=True
))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Mozilla Mobile"
c['projectURL'] = "http://wiki.mozilla.org/Mobile"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://staging-master.build.mozilla.org:8020/"
