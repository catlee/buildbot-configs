from buildbot.process.factory import BuildFactory
from buildbot.scheduler import Scheduler
from buildbot.steps.shell import ShellCommand, WithProperties, SetProperty
from buildbot.steps.source import Mercurial
from buildbotcustom.steps.misc import DownloadFile

import os
import re

class DebRepoSign(BuildFactory):
    def __init__(self, configFile, scriptRepoPath, scriptRepoTag='default',
                 locales=None, env=None, platforms=None,
                 branch='unknown', logLevel='info', workDir=None,
                 scriptName='scripts/signdebs.py',
                 baseWorkDir="/scratchbox/users/cltbld/home/cltbld",
                 **kwargs):
        BuildFactory.__init__(self, **kwargs)
        
        self.baseWorkDir = baseWorkDir
        self.scriptRepoPath = scriptRepoPath
        self.scriptRepoName = os.path.basename(scriptRepoPath)
        self.scriptRepoTag = scriptRepoTag
        self.scriptName = scriptName
        if env is None:
            self.env = {}
        else:
            self.env = env.copy()
        if workDir:
            self.workDir = workDir
        else:
            self.workDir = 'deb-%s' % branch
        self.absWorkDir = '%s/%s' % (baseWorkDir, self.workDir)
        self.repoCommand = [self.scriptName, '--configFile', configFile,
                            '--workDir', self.workDir,
                            '--logLevel', logLevel]
        if locales:
            if type(locales) is str:
                self.repoCommand.extend(['--locale', locales])
            else:
                self.repoCommand.extend(['--locale', ','.join(locales)])
        if platforms:
            if type(platforms) is str:
                self.repoCommand.extend(['--platform', platforms])
            else:
                self.repoCommand.extend(['--platform', ','.join(platforms)])

        self.addStep(Mercurial(
         repourl=self.scriptRepoPath,
         defaultBranch=self.scriptRepoTag,
         branchType='inrepo',
         mode='clobber',
         workdir=self.absWorkDir,
         haltOnFailure=True,
         retry=(60, 10),
        ))

        self.addStep(ShellCommand(
         command=self.repoCommand,
         env=self.env,
         workdir=self.absWorkDir,
         haltOnFailure=True,
         description=['create', 'repos'],
        ))



for branch_name in sorted(BRANCHES.keys()):
    branch = BRANCHES[branch_name]
    nightlyBuilderName = "%s deb sign nightly" % branch_name
    nightlyDebFactory = DebRepoSign(
        configFile=branch['nightly_config_file'],
        scriptRepoPath=branch.get('script_repo', 'http://hg.mozilla.org/users/asasaki_mozilla.com/mozharness'),
        scriptRepoTag=branch.get('script_repo_tag', 'default'),
        locales=branch.get('nightly_locales', None),
        env=branch.get('env', None),
        platforms=branch.get('nightly_platforms', None),
        workDir=branch.get('workDir', None),
        logLevel=branch.get('log_level','info'),
        branch=branch_name,
    )
    nightlyDebBuilder = {
        'name': nightlyBuilderName,
        'slavenames': SLAVES['linux'],
        'builddir': "%s_nightly" % branch_name,
        'factory': nightlyDebFactory,
        'category': branch_name,
    }
    c['schedulers'].append(Nightly(
        name="%s deb nightly scheduler" % branch_name,
        hour=[branch.get('nightly_hour', 4)],
        minute=[branch.get('nightly_minute', 0)],
        builderNames=[nightlyBuilderName],
    ))
    c['builders'] += [nightlyDebBuilder]

    if branch['enable_release']:
        releaseBuilderName = "%s deb sign release" % branch_name

        releaseDebFactory = DebRepoSign(
            configFile=branch['release_config_file'],
            scriptRepoPath=branch.get('script_repo', 'http://hg.mozilla.org/users/asasaki_mozilla.com/mozharness'),
            scriptRepoTag=branch.get('script_repo_tag', 'default'),
            locales=branch.get('release_locales', None),
            env=branch.get('env', None),
            platforms=branch.get('release_platforms', None),
            workDir=branch.get('workDir', None),
            logLevel=branch.get('log_level','info'),
        )
        releaseDebBuilder = {
            'name': releaseBuilderName,
            'slavenames': SLAVES['linux'],
            'builddir': "%s_release" % branch_name,
            'factory': releaseDebFactory,
            'category': branch_name,
        }
        c['builders'] += [releaseDebBuilder]
