from buildbot.process.factory import BuildFactory
from buildbot.scheduler import Scheduler
from buildbot.steps.shell import ShellCommand, WithProperties, SetProperty
from buildbotcustom.steps.misc import DownloadFile

import os
import re

# This class is a substitute for sendchanges or poller...
# The ftppollers don't fit the bill for various reasons, and sendchanges
# on upload require |make upload| steps that aren't ready yet.
# The expectation is to replace this with sendchanges or db triggers
# as those become available.
# It's easy to manually run this build, which updates the
# repositories for an entire branch.
class DebTrigger(BuildFactory):
    def __init__(self, branchNick, baseUrl, sendchangeMaster,
                 mobileRepo="http://hg.mozilla.org/mobile-browser",
                 localesFile="mobile/locales/all-locales",
                 confFile="mobile/confvars.sh",
                 baseEnUsUrl=None, baseMultiUrl=None, baseL10nUrl=None,
                 release=False, **kwargs):
        BuildFactory.__init__(self, **kwargs)
        assert (branchNick, baseUrl, sendchangeMaster)

        self.branchNick = branchNick
        self.baseUrl = baseUrl
        self.sendchangeMaster = sendchangeMaster
        self.mobileRepo = mobileRepo
        self.localesFile = localesFile
        self.confFile = confFile
        if release:
            self.releaseString = 'release'
        else:
            self.releaseString = 'nightly'
        if baseEnUsUrl:
            self.baseEnUsUrl = baseEnUsUrl
        else:
            self.baseEnUsUrl = '%s%s/en-US' % (baseUrl, branchNick)
        if baseMultiUrl:
            self.baseMultiUrl = baseMultiUrl
        else:
            self.baseMultiUrl = '%s%s' % (baseUrl, branchNick)
        if baseL10nUrl:
            self.baseL10nUrl = baseL10nUrl
        else:
            self.baseL10nUrl = '%s%s-l10n' % (baseUrl, branchNick)

        self.addStep(ShellCommand,
         command=['sh', '-c', 'if [ -d mobile ] ; then ' +
                  'hg -R mobile pull -r default ; else ' +
                  'hg clone ' + self.mobileRepo + ' mobile ; ' +
                  'fi && hg -R mobile update -r default'],
         haltOnFailure=True,
         description=['clone', 'mobile', 'repo'],
        )
        self.addStep(SetProperty,
         command=['sh', '-x', self.confFile],
         extract_fn=self.get_fennec_version,
         haltOnFailure=True
        )
        self.addStep(ShellCommand,
         command=['buildbot', 'sendchange',
                  '--master=%s' % self.sendchangeMaster,
                  '-u', '%s_%s_multi' % (self.branchNick, self.releaseString),
                  '-b', '%s_%s' % (self.branchNick, self.releaseString),
                  WithProperties(self.baseMultiUrl +
                                 '/fennec_%(fennec_version)s_armel.deb')],
         haltOnFailure=True,
         description=['sendchange', 'multi'],
        )
        self.addStep(ShellCommand,
         command=['buildbot', 'sendchange',
                  '--master=%s' % self.sendchangeMaster,
                  '-u', '%s_%s_en-US' % (self.branchNick, self.releaseString),
                  '-b', '%s_%s' % (self.branchNick, self.releaseString),
                  WithProperties(self.baseEnUsUrl +
                                 '/fennec_%(fennec_version)s_armel.deb')],
         haltOnFailure=True,
         description=['sendchange', 'en-US'],
        )

        # I love this too.  It's this or cron or writing a new ftppoller or
        # depending on a bunch of (currently) non-existent |make upload|s
        # for debs.
        self.addStep(ShellCommand,
         command=WithProperties('for locale in `cat ' + self.localesFile +
                                '`; do buildbot sendchange --master=' +
                                self.sendchangeMaster +
                                ' -u ' +
                                self.branchNick+'_'+self.releaseString+'_' +
                                '$locale ' +
                                '-b ' + self.branchNick + '_' +
                                self.releaseString + ' ' +
                                self.baseL10nUrl +
                                '/$locale/fennec_%(fennec_version)s' +
                                '_armel.deb; done'),
         haltOnFailure=True,
         description=['sendchange', 'locales']
        )

    def get_fennec_version(self, rc, stdout, stderr):
        retval = {}
        stdout = "\n".join([stdout, stderr])
        m = re.search("MOZ_APP_VERSION=(\S+)", stdout, re.M)
        if m:
            retval['fennec_version'] = m.group(1)
        return retval

class DebRepoSign(BuildFactory):
    def __init__(self, branchNick, buildToolsRepo, baseXulrunnerUrl,
                 env=None, release=False, **kwargs):
        BuildFactory.__init__(self, **kwargs)
        self.buildToolsRepo = buildToolsRepo
        self.baseXulrunnerUrl = baseXulrunnerUrl
        self.release = release

        if env is None:
            self.env = {}
        else:
            self.env = env.copy()

        if release:
            self.env['RELEASE'] = "1"
        
        if branchNick:
            self.env['BRANCH_NICK'] = branchNick

        self.addStep(ShellCommand,
         command=['sh', '-c', 'if [ -d tools ] ; then ' +
                  'hg -R tools pull -r default ; else ' +
                  'hg clone ' + self.buildToolsRepo + ' tools ; ' +
                  'fi && hg -R tools update -r default'],
         haltOnFailure=True,
         description=['clone', 'build', 'tools'],
        )
        self.addStep(ShellCommand,
         command=['cp', 'tools/release/signing/signdebs.mk', '.'],
         haltOnFailure=True,
         description=['copy', 'signdebs.mk'],
        )

        # Download to set fennec_fileurl and locale.
        # This is very dependent on today's naming scheme.
        # If that changes this will need to adapt, either by
        # sendchanging these properties, or otherwise figuring these
        # things out.
        self.addStep(DownloadFile,
         url_fn=self.get_fennecUrl,
         filename_property='fennec_filename',
         warnOnFailure=True,
         name="download_fennec",
         timeout=30*60,
        )
        self.addStep(ShellCommand,
         command=['rm', '-f', WithProperties('%(fennec_filename)s')],
        )
        self.addStep(ShellCommand,
         command=['make', '-f', 'signdebs.mk',
                  'BASE_XULRUNNER_URL=%s' % self.baseXulrunnerUrl,
                  WithProperties('FENNEC_FILEURL=%(fennec_fileurl)s'),
                  WithProperties('LOCALE=%(locale)s'),
                 ],
         env=self.env,
         haltOnFailure=True,
         description=['update', 'repo'],
        )

    def get_fennecUrl(self, build):
        fennecUrl = build.source.changes[-1].files[0]
        if self.release:
            locale = os.path.basename(os.path.dirname(fennecUrl))
        else:
            locale = 'multi'
            m = re.search('-l10n/([^/]*)/', fennecUrl)
            if m:
                locale = m.group(1)
            else:
                m = re.search('en-US/', fennecUrl)
                if m:
                    locale = 'en-US'
        build.setProperty('locale', locale, 'DownloadFile')
        build.setProperty('fennec_fileurl', fennecUrl, 'DownloadFile')
        return fennecUrl



for branchNick in sorted(DEBSIGN_CONFIG['branches'].keys()):
    branch = DEBSIGN_CONFIG['branches'][branchNick]

    nightlyBuilderName = "%s deb sign nightly" % branchNick
    nightlyTriggerName = "%s deb trigger nightly" % branchNick
    nightlyDebFactory = DebRepoSign(
        branchNick=branchNick,
        buildToolsRepo=DEBSIGN_CONFIG['tools_repo_path'],
        baseXulrunnerUrl=branch['nightly_base_xulrunner_url'],
        env=branch['nightly_env'].copy()
    )
    nightlyDebBuilder = {
        'name': nightlyBuilderName,
        'slavenames': DEBSIGN_CONFIG['slaves'],
        'builddir': "%s_nightly" % branchNick,
        'factory': nightlyDebFactory,
        'category': branchNick,
    }
    c['schedulers'].append(NoMergeScheduler(
        name="%s deb nightly scheduler" % branchNick,
        branch='%s_nightly' % branchNick,
        treeStableTimer=0,
        builderNames=[nightlyBuilderName],
    ))

    nightlyTriggerFactory = DebTrigger(
        branchNick=branchNick,
        baseUrl=TRIGGER_CONFIG['nightly_base_url'],
        mobileRepo=TRIGGER_CONFIG['mobile_repo'],
        localesFile=TRIGGER_CONFIG['locales_file'],
        confFile=TRIGGER_CONFIG['conf_file'],
        sendchangeMaster=TRIGGER_CONFIG['sendchange_master']
    )
    nightlyTriggerBuilder = {
        'name': nightlyTriggerName,
        'slavenames': DEBSIGN_CONFIG['slaves'],
        'builddir': "%s_nightly_trigger" % branchNick,
        'factory': nightlyTriggerFactory,
        'category': branchNick,
    }
    c['schedulers'].append(Nightly(
        name="%s nightly trigger" % branchNick,
        branch="%s_nightly_trigger" % branchNick,
        hour=[4],
        builderNames=[nightlyTriggerName]
    ))

    c['builders'] += [nightlyDebBuilder, nightlyTriggerBuilder]


    if branch['enable_release']:
        releaseBuilderName = "%s deb sign release" % branchNick
        releaseTriggerName = "%s deb trigger release" % branchNick


        releaseDebFactory = DebRepoSign(
            branchNick=branchNick,
            buildToolsRepo=DEBSIGN_CONFIG['tools_repo_path'],
            baseXulrunnerUrl=branch['release_base_xulrunner_url'],
            release=True,
            env=branch['release_env'].copy()
        )
        releaseDebBuilder = {
            'name': releaseBuilderName,
            'slavenames': DEBSIGN_CONFIG['slaves'],
            'builddir': "%s_release" % branchNick,
            'factory': releaseDebFactory,
            'category': branchNick,
        }
        c['schedulers'].append(NoMergeScheduler(
            name="%s deb release scheduler" % branchNick,
            branch='%s_release' % branchNick,
            treeStableTimer=0,
            builderNames=[releaseBuilderName],
        ))

        releaseTriggerFactory = DebTrigger(
            branchNick=branchNick,
            baseUrl=TRIGGER_CONFIG['release_base_url'],
            baseMultiUrl='%s/multi' % TRIGGER_CONFIG['release_base_url'],
            baseEnUsUrl='%s/en-US' % TRIGGER_CONFIG['release_base_url'],
            baseL10nUrl=TRIGGER_CONFIG['release_base_url'],
            mobileRepo=TRIGGER_CONFIG['mobile_repo'],
            localesFile=TRIGGER_CONFIG['locales_file'],
            confFile=TRIGGER_CONFIG['conf_file'],
            sendchangeMaster=TRIGGER_CONFIG['sendchange_master'],
            release=True
        )
        releaseTriggerBuilder = {
            'name': releaseTriggerName,
            'slavenames': DEBSIGN_CONFIG['slaves'],
            'builddir': "%s_release_trigger" % branchNick,
            'factory': releaseTriggerFactory,
            'category': branchNick,
        }
        releaseTriggerScheduler = Scheduler(
            name="%s release trigger" % branchNick,
            branch="%s_release_trigger" % branchNick,
            builderNames=[releaseTriggerName],
            treeStableTimer=0
        )
        c['schedulers'].append(releaseTriggerScheduler)

        c['builders'] += [releaseDebBuilder, releaseTriggerBuilder]
