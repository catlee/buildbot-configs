# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### PROJECT IDENTITY
c['projectName'] = "Mozilla Messaging UnitTest Buildbot"
c['buildbotURL'] = "http://build.mozillamessaging.com/buildbot/unittest/"
c['slavePortnum'] = 9991

####### CONFIGURATION

HGURL = 'http://hg.mozilla.org/'

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

####### BRANCHES
DEFAULTS = {
    'irc':                  True,
    'poll_branch':          'comm-central',
    'client_py_args':       ['--skip-comm', '--skip-chatzilla', '--skip-venkman', '--hg-options=--verbose --time'],
    'period':   12*60*60,
    'platforms': {
      'linux':  "Linux", 
      'win32':  "Win2k3",
      'macosx':    "MacOSX 10.4",
    },
    'builder_type': "check",
    'clobber_url':  "http://build.mozillamessaging.com/clobberer/",
    'build_tools_repo': "build/tools",
    'hg_rev_shortnames': {
      'mozilla-central':        'm-c',
      'comm-central':           'rev',
      'dom-inspector':          'domi',
      'releases/mozilla-1.9.1': 'moz',
    }
}

BRANCHES = {
    'comm-1.9.1': {
        'add_poll_branches':    [ 
            'releases/mozilla-1.9.1', 
            'dom-inspector', 
        ],
        'tinderbox_tree': 'Thunderbird3.0',
    },
    'comm-central': {
        'add_poll_branches':    [ 
            'mozilla-central', 
            'dom-inspector', 
        ],
        'client_py_args': DEFAULTS['client_py_args'] + ['--mozilla-repo=http://hg.mozilla.org/mozilla-central'],
        'tinderbox_tree': 'Thunderbird',
    },
}

def getConfig(branch, value, default=None):
    return branch.get(value, DEFAULTS.get(value, default))

####### BUILDERS

builders = {}
allBuilders = []

for name in BRANCHES.keys():
    branch = BRANCHES[name]
    platforms = getConfig(branch, 'platforms')
    builder_type = getConfig(branch, 'builder_type')
    builders[name] = []
    for platform in platforms:
        platform_name = platforms[platform]
        builder_name = "%s %s %s" % (platform_name, name, builder_type)
        builders[name].append(builder_name)
        allBuilders.append(builder_name)
        
####### STATUS PLUGINS

from buildbot.status import html

c['status'] = []
c['status'].append(html.WebStatus(http_port=8811, allowForce=True, )) 
c['status'].append(html.WebStatus(http_port=8812, allowForce=False, )) 


builder_categories = {}

from buildbot.status import tinderbox
for name in BRANCHES.keys():
    branch = BRANCHES[name]
    tree = getConfig(branch, 'tinderbox_tree','MozillaTest')
    builder_type = getConfig(branch, 'builder_type')
    category = '%s-%s-builder' % (name, builder_type)
    builder_categories[category] = 1
    c['status'].append(tinderbox.TinderboxMailNotifier(
                       fromaddr="gozer@mozillamessaging.com",
                       tree=tree,
                       builders=builders[name],
                       extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
                       relayhost="10.200.80.5",
                       logCompression="bzip2",
		               errorparser="unittest",
		       ))

if DEFAULTS['irc']:
    from buildbot.status import words
    categories = builder_categories.keys()
    c['status'].append(words.IRC(
      host = 'irc.mozilla.org', 
      nick = 'thunderbot',
      channels = ['maildev'],
      categories = builder_categories.keys(),
    ))

####### SOURCES

c['change_source'] = []

import buildbotcustom.changes.hgpoller
reload(buildbotcustom.changes.hgpoller)
from buildbotcustom.changes.hgpoller import HgPoller

sources = {}

from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

# Figure out the unique pushlogs we should be polling
for name in BRANCHES.keys():
    branch = BRANCHES[name]
    poll_branch = getConfig(branch, 'poll_branch')
    for b in [poll_branch] + branch['add_poll_branches']:
        pushlogUrlOverride = '%s%s/pushlog' % (HGURL, b),
        if not sources.get(b):
            sources[b] = pushlogUrlOverride

for branch in sources.keys():
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=branch,
        pushlogUrlOverride="%s%s/pushlog" % (HGURL,branch),
        pollInterval=1*60
    ))

####### SCHEDULERS

c['schedulers'] = []

from buildbot.scheduler import Scheduler, Periodic, AnyBranchScheduler

for name in BRANCHES.keys():
    branch = BRANCHES[name]
    builder_type = getConfig(branch, 'builder_type')
    category = '%s-%s-builder' % (name, builder_type)
    period = getConfig(branch, 'period')

    c['schedulers'].append(Periodic(name="periodic build scheduler (%s)" % name,
				                    builderNames=builders[name],
                                    periodicBuildTimer=period))

    poll_branch = getConfig(branch, 'poll_branch')
    poll_branches = [poll_branch] + branch['add_poll_branches']
    c['schedulers'].append(AnyBranchScheduler(name="Hg build scheduler (%s / %s)" % (name, b),
				                         builderNames=builders[name],
                                         branches=poll_branches,
                                         treeStableTimer=5*60))


####### BUILDERS

c['builders'] = []

import buildbotcustom.process.factory
reload(buildbotcustom.process.factory)
from buildbotcustom.process.factory import CCUnittestBuildFactory

from buildbot.steps.transfer import FileDownload

for name in BRANCHES.keys():
    branch = BRANCHES[name]
    builder_type = getConfig(branch, 'builder_type')
    platforms = getConfig(branch, 'platforms')
    category = '%s-%s-builder' % (name, builder_type)
    clobber_url = getConfig(branch, 'clobber_url')                                                                                             
    build_tools_repo = getConfig(branch, 'build_tools_repo')
    main_branch = getConfig(branch, 'poll_branch')
    add_poll_branches = getConfig(branch, 'add_poll_branches')
    client_py_args = getConfig(branch, 'client_py_args')
    
    for platform in getConfig(branch, 'platforms'):
        platform_name = platforms[platform]
        builder_name = "%s %s %s" % (platform_name, name, builder_type)
        
        import sys
        print >> sys.stderr, "Hello %s" % name
        unittest_factory = CCUnittestBuildFactory(
       		    branchName=name, 
                    platform=platform,
                    config_repo_path='build/buildbot-configs',
                    config_dir='thunderbird',
                    objdir='objdir',
                    productName='thunderbird',
                    brandName='Thunderbird',
                    mochitest_leak_threshold=None,
                    mochichrome_leak_threshold=None,
                    mochibrowser_leak_threshold=None,
                    hgHost='hg.mozilla.org',
                    repoPath=main_branch,
                    mozRepoPath=add_poll_branches[0],
                    buildToolsRepoPath=build_tools_repo,
                    buildSpace=None,
                    clobberURL=clobber_url,
                    clobberTime=None,
                    buildsBeforeReboot=None,
                    exec_reftest_suites=False,
                    exec_mochi_suites=False,
                    client_py_args=client_py_args,
                    kill_processes=False,
                )
        
        builder = {
            'name': builder_name,
            'slavenames': BuildSlaves.SlaveListPlatform[platform],
            'builddir': "%s-%s-%s" % (platform, name, builder_type),
            'factory': unittest_factory,
            'category': category,
        }
        c['builders'].append(builder)
