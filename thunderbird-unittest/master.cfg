# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### PROJECT IDENTITY
c['projectName'] = "Mozilla Messaging UnitTest Buildbot"
c['buildbotURL'] = "http://build.mozillamessaging.com/buildbot/unittest/"
c['slavePortnum'] = 9991

####### CONFIGURATION

HGURL = 'http://hg.mozilla.org/'

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

####### BRANCHES
DEFAULTS = {
    'irc':                  False,
    'poll_branch':          'comm-central',
    'client_py_args':       ['--skip-comm', '--skip-chatzilla', '--skip-venkman'],
    'period':   12*60*60,
    'platforms': {
      'linux':  "Linux", 
      'win32':  "Win2k3",
      'osx':    "MacOSX 10.4",
    },
    'builder_type': "check",
    'hg_rev_shortnames': {
      'mozilla-central':        'm-c',
      'comm-central':           'rev',
      'dom-inspector':          'domi',
      'releases/mozilla-1.9.1': 'moz',
    }
}

BRANCHES = {
    'comm-1.9.1': {
        'add_poll_branches':    [ 
            'releases/mozilla-1.9.1', 
            'dom-inspector', 
        ],
        'tinderbox_tree': 'Thunderbird3.0',
    },
    'comm-central': {
        'add_poll_branches':    [ 
            'mozilla-central', 
            'dom-inspector', 
        ],
        'client_py_args': DEFAULTS['client_py_args'] + ['--mozilla-repo=http://hg.mozilla.org/mozilla-central'],
        'tinderbox_tree': 'Thunderbird',
    },
}

def getConfig(branch, value, default=None):
    return branch.get(value, DEFAULTS.get(value, default))

####### BUILDERS

builders = {}
allBuilders = []

for name in BRANCHES.keys():
    branch = BRANCHES[name]
    platforms = getConfig(branch, 'platforms')
    builder_type = getConfig(branch, 'builder_type')
    builders[name] = []
    for platform in platforms:
        platform_name = platforms[platform]
        builder_name = "%s %s %s" % (platform_name, name, builder_type)
        builders[name].append(builder_name)
        allBuilders.append(builder_name)
        
####### STATUS PLUGINS

from buildbot.status import html

c['status'] = []
c['status'].append(html.WebStatus(http_port=8811, allowForce=True, )) 
c['status'].append(html.WebStatus(http_port=8812, allowForce=False, )) 


builder_categories = {}

from buildbot.status import tinderbox
for name in BRANCHES.keys():
    branch = BRANCHES[name]
    tree = getConfig(branch, 'tinderbox_tree','MozillaTest')
    builder_type = getConfig(branch, 'builder_type')
    category = '%s-%s-builder' % (name, builder_type)
    builder_categories[category] = 1
    c['status'].append(tinderbox.TinderboxMailNotifier(
                       fromaddr="gozer@mozillamessaging.com",
                       tree=tree,
                       builders=builders[name],
                       extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
                       relayhost="10.200.80.5",
                       logCompression="bzip2",
		               errorparser="unittest",
		       ))

if DEFAULTS['irc']:
    from buildbot.status import words
    categories = builder_categories.keys()
    c['status'].append(words.IRC(
      host = 'irc.mozilla.org', 
      nick = 'thunderbot-new',
      channels = ['maildev'],
      categories = builder_categories.keys(),
    ))

####### SOURCES

c['change_source'] = []

import buildbotcustom.changes.hgpoller
reload(buildbotcustom.changes.hgpoller)
from buildbotcustom.changes.hgpoller import HgPoller

sources = {}

from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

# Figure out the unique pushlogs we should be polling
for name in BRANCHES.keys():
    branch = BRANCHES[name]
    poll_branch = getConfig(branch, 'poll_branch')
    for b in [poll_branch] + branch['add_poll_branches']:
        pushlogUrlOverride = '%s/%s/index.cgi/pushlog' % (HGURL, b),
        if not sources.get(b):
            sources[b] = pushlogUrlOverride

for branch in sources.keys():
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        #branch=branch,
        pushlogUrlOverride="%s/%s/index.cgi/pushlog" % (HGURL,branch),
        branch='comm-central',
        pollInterval=1*60
    ))

####### SCHEDULERS

c['schedulers'] = []

from buildbot.scheduler import Scheduler, Periodic

for name in BRANCHES.keys():
    branch = BRANCHES[name]
    builder_type = getConfig(branch, 'builder_type')
    category = '%s-%s-builder' % (name, builder_type)
    period = getConfig(branch, 'period')

    c['schedulers'].append(Periodic(name="periodic build scheduler (%s)" % name,
				                    builderNames=builders[name],
                                    periodicBuildTimer=period))

    poll_branch = getConfig(branch, 'poll_branch')
    for b in [poll_branch] + branch['add_poll_branches']:
        c['schedulers'].append(Scheduler(name="Hg build scheduler (%s / %s)" % (name, b),
				                         builderNames=builders[name],
                                         branch=b, 
                                         treeStableTimer=5*60))


####### BUILDERS

c['builders'] = []

import mozbuild
reload(mozbuild)
from mozbuild import *
from buildbot.process import factory
from buildbot import locks
from buildbot.steps.shell import Compile,TreeSize,WithProperties
from buildbot.steps.source import Mercurial
from buildbotcustom.unittest.steps import *
from buildbotcustom.steps.test import Codesighs
from buildbotcustom.steps.misc import SetMozillaBuildProperties, GetHgRevision
from buildbot.steps.transfer import FileDownload

s = factory.s

slave_display_lock = locks.SlaveLock("slave_display_lock")

for name in BRANCHES.keys():
    branch = BRANCHES[name]
    builder_type = getConfig(branch, 'builder_type')
    platforms = getConfig(branch, 'platforms')
    category = '%s-%s-builder' % (name, builder_type)
    
    main_branch = getConfig(branch, 'poll_branch')
    add_poll_branches = getConfig(branch, 'add_poll_branches')
    for platform in getConfig(branch, 'platforms'):
        platform_name = platforms[platform]
        builder_name = "%s %s %s" % (platform_name, name, builder_type)

        clobber_lock_name = "%s-%s-clobber-lock" % (platform_name, name)
        clobber_lock = locks.MasterLock(clobber_lock_name)
        clobber_workdir = "../%s-%s-%s/build" % (platform, name, builder_type)
    
        clobber_steps = [
            s(TreeSize,
              workdir="%s/objdir-tb" % clobber_workdir,
            ),
            s(ShellCommand, name="clobber",
              workdir=clobber_workdir,
              command=["rm", "-rf", "objdir-tb"],
            ),
        ]
        clobber_builder = {
            'name': "%s clobber" % builder_name,
            'slavenames': BuildSlaves.SlaveListPlatform[platform],
            'builddir': "%s-%s-%s-clobber" % (platform, name, builder_type),
            'factory': factory.BuildFactory(clobber_steps),
            'locks': [clobber_lock],
            'category': "clobber",
        }
        c['builders'].append(clobber_builder)
        
        steps = []
        
        if platform == "linux":
            steps.append(s(ShellCommand, name="rpm -qa",
                command=["rpm" , "-qa"],
            ))
        if platform == "osx":
            steps.append(s(ShellCommand, name="sw_vers",
                command=["sw_vers"],
            ))

        steps.append(s(Mercurial,
            mode='update',
            baseURL=HGURL,
            defaultBranch=main_branch,
            #repourl="%s/%s" % (HGURL,main_branch),
            alwaysUseLatest=True,
            timeout=60*60, #hg clone can take a long time
        ))
        steps.append(s(ShellCommand,
            command=['hg', 'diff', '-g'],
            name='hg diff',
        ))
        
        
        hg_rev_shortnames = getConfig(branch, 'hg_rev_shortnames')
        changesetLink = '<a href=%s/%s/rev' % (HGURL, main_branch)
        changesetLink += '/%(got_revision)s title="Built from revision %(got_revision)s">' 
        changesetLink += hg_rev_shortnames[main_branch]
        changesetLink += ':%(got_revision)s</a>'
        
        steps.append(s(ShellCommand,
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)],
        ))
        client_py_args = getConfig(branch, 'client_py_args')
        '--skip-comm', '--skip-chatzilla', '--skip-venkman'
        steps.append(s(ShellCommand,
            command=['python', 'client.py'] + client_py_args + ['checkout'],
            description=['running', 'client.py', 'checkout'],
            descriptionDone=['client.py', 'checkout'],
            haltOnFailure=True,
            timeout=60*60, #hg clone can take a long time
        ))
        steps.append(s(GetHgRevision,
            workdir='build/mozilla',
        ))
        steps.append(s(ShellCommand,
            command=['hg', 'diff', '-g'],
            name='hg diff mozilla',
            workdir='build/mozilla',
        ))

        
        changesetLink = '<a href=%s/%s/rev' % (HGURL, add_poll_branches[0])
        changesetLink += '/%(hg_revision)s title="Built from revision %(hg_revision)s">' 
        changesetLink += hg_rev_shortnames[add_poll_branches[0]]
        changesetLink += ':%(hg_revision)s</a>'
        
        steps.append(s(ShellCommand,
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)],
        ))
        steps.append(s(FileDownload, mastersrc="mozconfig-common",
            slavedest=".mozconfig-common",
        ))
        steps.append(s(ShellCommand, name="mozconfig-common contents",
            command=["cat",".mozconfig-common"],
        ))
        steps.append(s(FileDownload, mastersrc="mozconfig-%s" % platform,
            slavedest=".mozconfig",
        ))
        steps.append(s(ShellCommand, name="mozconfig contents",
            command=["cat",".mozconfig"],
        ))
        steps.append(s(Compile, 
            command=["make", "-f", "client.mk", "build",],
        ))
        steps.append(s(MozillaCheck,
            warnOnWarnings=True,
            timeout=60*30,
            workdir="build/objdir-tb",
            locks=[slave_display_lock],
        ))

        builder = {
            'name': builder_name,
            'slavenames': BuildSlaves.SlaveListPlatform[platform],
            'locks': [clobber_lock],
            'builddir': "%s-%s-%s" % (platform, name, builder_type),
            'factory': factory.BuildFactory(steps),
            'category': category,
        }
        c['builders'].append(builder)
