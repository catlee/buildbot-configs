import config
reload(config)
from config import SLAVES

import buildbotcustom.misc
reload(buildbotcustom.misc)
from buildbotcustom.misc import generateCCBranchObjects

ACTIVE_BRANCHES = ['comm-central-trunk', 'comm-1.9.1']
L10N_SLAVES = {
    'linux': SLAVES['linux'],
    'win32': SLAVES['win32'],
    'macosx': SLAVES['macosx'],
}

execfile("master-main.cfg")

c['buildbotURL'] = 'http://cb-sea-linux-tbox.sj.mozilla.com:8010/'

for branch in ACTIVE_BRANCHES:
    branchObjects = generateCCBranchObjects(BRANCHES[branch], branch)
    c['builders'].extend(branchObjects['builders'])
    c['schedulers'].extend(branchObjects['schedulers'])
    c['change_source'].extend(branchObjects['change_source'])
    c['status'].extend(branchObjects['status'])

import buildbotcustom.log
import buildbotcustom.l10n
reload(buildbotcustom.log)
reload(buildbotcustom.l10n)
from buildbotcustom.l10n import Scheduler as SchedulerL10n

buildbotcustom.log.init(
    scheduler = buildbotcustom.log.DEBUG,
    dispatcher = buildbotcustom.log.DEBUG
)

s = SchedulerL10n("l10n", "l10nbuilds.ini")
c['schedulers'].append(s)


####### Release Automation

import release_master
reload(release_master)

c['builders'].extend(release_master.builders)
c['schedulers'].extend(release_master.schedulers)
c['change_source'].extend(release_master.change_source)
c['status'].extend(release_master.status)

# Give the release builders priority over other builders
def prioritizeBuilders(botmaster, builders):
    def sortkey(builder):
        if builder.builder_status.category == 'release':
            return 0, builder.getOldestRequestTime()
        else:
            return 1, builder.getOldestRequestTime()
    builders.sort(key=sortkey)
    return builders
c['prioritizeBuilders'] = prioritizeBuilders
