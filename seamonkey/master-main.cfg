# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

import config
from config import *

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords

from buildbot.buildslave import BuildSlave
c['slaves'] = []
for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1))

# Now setup the l10n slaves. L10N_SLAVES is defined in
# master.cfg before we get exec'ed
for branch in BRANCHES.keys():
    BRANCHES[branch]['l10n_slaves'] = L10N_SLAVES

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

from buildbot.changes.pb import PBChangeSource

c['change_source'].append(PBChangeSource())

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "SeaMonkey 2"
c['projectURL'] = "http://wiki.mozilla.org/SeaMonkey:hg-based_build"

# Cap the log size at 50 MB
c['logMaxSize'] = 50 * 1024 * 1024

# Keep 100 changes
c['changeHorizon'] = 600


######## PULSE
import passwords
reload(passwords)
if hasattr(passwords, 'PULSE_PASSWORD'):
    pulseQueue = QueueDir('pulse', '%s/pulse' % master_localconfig.QUEUEDIR)
    # Send pulse messages
    import re
    import buildbotcustom.status.pulse
    reload(buildbotcustom.status.pulse)
    from buildbotcustom.status.pulse import PulseStatus
    c['status'].append(PulseStatus(
        pulseQueue,
        ignoreBuilders=[re.compile('.*shadow-central.*'), re.compile('fuzzer-.*')],
        send_logs=False,
        ))

assert c is BuildmasterConfig
