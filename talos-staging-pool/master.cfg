# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os.path
from buildbot.buildslave import BuildSlave
from buildbot.status import html
from buildbot.steps.shell import WithProperties

import buildbotcustom.process.factory
import buildbotcustom.scheduler
reload(buildbotcustom.process.factory)
reload(buildbotcustom.scheduler)
from buildbotcustom.process.factory import TalosFactory
from buildbotcustom.scheduler import NoMergeScheduler, NoMergeMultiScheduler, MultiScheduler

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

##
## Misc Config
##

c['debugPassword'] = "mozilla"
c['projectName'] = "Talos"
c['projectURL'] = "http://quality.mozilla.org/en/projects/automation/talos"
c['buildbotURL'] = "http://talos-staging-master02.mv.mozilla.com:8010"
c['slavePortnum'] = 9010

##
## Status
##

c['status'] = []
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import tinderbox
from buildbot.status.mail import MailNotifier

# this is the system installed TinderboxMailNotifier
c['status'].append(tinderbox.TinderboxMailNotifier(
                       fromaddr="talos.buildbot@build.mozilla.org",
                       tree="MozillaTest",
                       extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org",],
                       relayhost="smtp.mozilla.org",
                       builders=None,
                       useChangeTime=True,
                       logCompression="bzip2"))

import config
reload(config)
from config import *

##
## Slaves
##

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords

c['slaves'] = []
for platform, names in SLAVES.items():
    c['slaves'].extend(BuildSlave(name, SlavePasswords[platform], max_builds=1) for name in names)

##
## Sources
##
from buildbot.changes.pb import PBChangeSource
c['change_source'] = [PBChangeSource()]

##
## Builders and Schedulers
##

c['schedulers'] = []
c['builders'] = []

####### Buildbot Database
import buildbotcustom.status.db.status
reload(buildbotcustom.status.db.status)
from buildbotcustom.status.db.status import DBStatus

# passwords.py should be a locally available file with various passwords
# defined
import passwords
reload(passwords)
from passwords import *
c['status'].append(DBStatus("mysql://buildbot_setup:%s@tm-stage01-master01.mozilla.org/buildbot_staging" % BBDB_PASSWORD, 'talos-staging-master'))

###
### we have to poll ftp for mozilla-1.9.0 builds
###
import ftppoller
reload(ftppoller)
from ftppoller import FtpPoller

for platform in PLATFORMS:
    c['change_source'].append(FtpPoller(
        searchString = BRANCHES['mozilla-1.9.0']['ftp_searchstrings'][platform],
        tree = "Firefox3.0",
        branch = "mozilla-1.9.0-%s" % platform,
        ftpURLs = BRANCHES['mozilla-1.9.0']['ftp_urls'][platform],
        pollInterval = 10 * 60)
    )

for branch, branch_config in BRANCHES.items():
    branchName = branch_config['branch_name']
    buildBranch = branch_config['build_branch']
    for platform, platform_config in PLATFORMS.items():
        chrome_tests, chrome_merge, chrome_addon, chrome_platforms = branch_config['chrome_tests']
        nochrome_tests, nochrome_merge, nochrome_addon, nochrome_platforms = branch_config['nochrome_tests']
        jss_tests, jss_merge, jss_addon, jss_platforms = branch_config['jss_tests']
        dirty_tests, dirty_merge, dirty_addon, dirty_platforms = branch_config['dirty_tests']
        tp4_tests, tp4_merge, tp4_addon, tp4_platforms = branch_config['tp4_tests']
        cold_tests, cold_merge, cold_addon, cold_platforms = branch_config['cold_tests']
        svg_tests, svg_merge, svg_addon, svg_platforms = branch_config['svg_tests']

        for slave_platform in platform_config['slave_platforms']:
            if chrome_tests and slave_platform in chrome_platforms:
                factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                    plugins='',
                    pageset='',
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s" % (branch, slave_platform),
                    'factory': factory,
                    'category': branch,
                }
                if chrome_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=chrome_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)

            if nochrome_tests and slave_platform in nochrome_platforms:
                nochrome_factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_NOCHROME_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                    plugins='',
                    pageset='',
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos nochrome" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s-nochrome" % (branch, slave_platform),
                    'factory': nochrome_factory,
                    'category': branch,
                }
                if nochrome_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s nochrome scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=nochrome_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)

            if jss_tests and slave_platform in jss_platforms:
                jss_factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_JSS_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                    plugins='',
                    pageset='',
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos jss" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s-jss" % (branch, slave_platform),
                    'factory': jss_factory,
                    'category': branch,
                }
                if jss_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s jss scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=jss_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)

            if dirty_tests and slave_platform in dirty_platforms:
                dirty_factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_DIRTY_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                    plugins='',
                    pageset='',
                    talosAddOns=dirty_addon,
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos dirty" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s-dirty" % (branch, slave_platform),
                    'factory': dirty_factory,
                    'category': branch,
                }
                if dirty_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s dirty scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=dirty_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)

            if tp4_tests and slave_platform in tp4_platforms:
                tp4_factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_TP4_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos tp4" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s-tp4" % (branch, slave_platform),
                    'factory': tp4_factory,
                    'category': branch,
                }
                if tp4_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s tp4 scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=tp4_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)

            if cold_tests and slave_platform in cold_platforms:
                cold_factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_COLD_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                    plugins='',
                    pageset='',
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos cold" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s-cold" % (branch, slave_platform),
                    'factory': cold_factory,
                    'category': branch,
                }
                if cold_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s cold scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=cold_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)
                                                                 
            if svg_tests and slave_platform in svg_platforms:
                svg_factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_SVG_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                    plugins='',
                    pageset='',
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos svg" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s-svg" % (branch, slave_platform),
                    'factory': svg_factory,
                    'category': branch,
                }
                if svg_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s svg scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=svg_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)

            if v8_tests and slave_platform in v8_platforms:
                v8_factory = TalosFactory(
                    OS=slave_platform,
                    toolsDir="tools",
                    envName=platform_config['env_name'],
                    workdirBase="../talos-data",
                    buildBranch=buildBranch,
                    branchName=branchName,
                    configOptions=TALOS_V8_CONFIG_OPTIONS,
                    talosCmd=TALOS_CMD,
                    fetchSymbols=branch_config['fetch_symbols'],
                    plugins='',
                    pageset='',
                )
                platform_name = platform_config[slave_platform]['name']
                builder = {
                    'name': "%s %s talos v8" % (platform_name, branch),
                    'slavenames': SLAVES[slave_platform],
                    'builddir': "%s-%s-v8" % (branch, slave_platform),
                    'factory': v8_factory,
                    'category': branch,
                }
                if v8_merge:
                    scheduler_class = MultiScheduler
                else:
                    scheduler_class = NoMergeMultiScheduler
                s = scheduler_class(name='%s %s v8 scheduler' % (branch, slave_platform),
                              branch='%s-%s' % (branch, platform),
                              treeStableTimer=0,
                              builderNames=[builder['name']],
                              numberOfBuildsToTrigger=v8_tests,
                              )
                c['schedulers'].append(s)
                c['builders'].append(builder)
                branch_builders.append(builder['name'])
