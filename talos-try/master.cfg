# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os.path
# from buildbot.changes.freshcvs import FreshCVSSource
from buildbot.buildslave import BuildSlave
from buildbot.process import factory
from buildbot.scheduler import Scheduler, Periodic
from buildbot.status import html
from buildbot import locks

# from auth import authlist, debugPassword

import perfrunner
reload(perfrunner)
from perfrunner import *

###
### Tinderbox builder names and build directories
###
TRUNK_BUILDDIR="https://build.mozilla.org/tryserver-builds/"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

##
## Misc Config
##

c['debugPassword'] = "mozilla"
#c['manhole'] = Manhole(9999, "admin", "password")
c['projectName'] = "Talos"
c['projectURL'] = "http://quality.mozilla.org/en/projects/automation/talos"
c['buildbotURL'] = "http://qm-rhel02.mozilla.org:2007"
c['slavePortnum'] = 9985

##
## Slaves
##

c['slaves'] = [BuildSlave(name, password, max_builds=1) for (name, password) in [
             ("qm-pxp-try01", "w1nd3rs"),
             ("qm-pxp-try02", "w1nd3rs"),
             ("qm-pvista-try01", "vist@"),
             ("qm-pvista-try02", "vist@"),
             ("qm-ptiger-try01", "mac1nt0sh"),
             ("qm-ptiger-try02", "mac1nt0sh"),
             ("qm-pleopard-try01", "mac1nt0sh"),
             ("qm-pleopard-try02", "mac1nt0sh"),
             ("qm-pubuntu-try01", "l1nux"),
             ("qm-pubuntu-try02", "l1nux"),
             ]]

##
## Status
##

c['status'] = []
c['status'].append(html.WebStatus(http_port=2007, allowForce=True))

from tinderboxmailnotifier import TinderboxMailNotifier
from buildbot.status.mail import MailNotifier

c['status'].append(MailNotifier(
                       fromaddr="talos.buildbot@build.mozilla.org",
                       sendToInterestedUsers=False,
                       extraRecipients=["anodelman@mozilla.com",],
                       mode="failing",
                       builders=None, # send for all builders
                       relayhost="smtp.mozilla.org"))

# this is the system installed TinderboxMailNotifier
c['status'].append(TinderboxMailNotifier(
                       fromaddr="talos.buildbot@build.mozilla.org",
                       tree="MozillaTry", # move to MozillaTry
                       extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org",],
                       relayhost="smtp.mozilla.org",
                       builders=["WINNT 5.1 talos try",
                                 "WINNT 6.0 talos try",
                                 "MacOSX Darwin 8.8.1 talos try",
                		 "MacOSX Darwin 9.2.2 talos try",
                                 "Linux talos try"],
                       useChangeTime=True,
                       logCompression="bzip2"))



##
## Sources
##

from buildbot.changes.pb import PBChangeSource

c['change_source'] = [PBChangeSource()]

##
## Schedulers
##

c['schedulers'] = []

c['schedulers'].append(noMergeMultiScheduler(name="WinXP try perfrun scheduler",
                                 branch="win32",
                                 treeStableTimer=0,
                                 builderNames=["WINNT 5.1 talos try",
                		               "WINNT 6.0 talos try"]))

c['schedulers'].append(noMergeMultiScheduler(name="Mac OS X try perfrun scheduler",
                                 branch="mac",
                                 treeStableTimer=0,
                                 builderNames=["MacOSX Darwin 8.8.1 talos try",
                		               "MacOSX Darwin 9.2.2 talos try"]))

c['schedulers'].append(noMergeMultiScheduler(name="Linux try perfrun scheduler",
                                 branch="linux",
                                 treeStableTimer=0,
                                 builderNames=["Linux talos try"]))

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

graphConfig    = ['--oldresultsServer', 'graphs-stage.mozilla.org', '--oldresultsLink', '/server/bulk.cgi', '--resultsServer', 'graphs-stage2.mozilla.org', '--resultsLink', '/server/collect.cgi']

basicConfig    = graphConfig + ['--activeTests', 'ts:tp:twinopen']

basicTalosCmd  = ['python', 'run_tests.py', '--noisy']

win32_steps = TalosFactory(OS = 'win',
                          envName='vc8perf',
                          buildBranch="Try",
                          branchName="MozillaTest",
                          configOptions=basicConfig,
                          buildSearchString="win32.zip",
                          buildDir=TRUNK_BUILDDIR,
                          buildPath=r"C:\talos-slave\win32-trunk-mini\firefox\firefox.exe",
                          talosCmd=basicTalosCmd)

vista_steps = TalosFactory(OS = 'win',
                          envName='vc8perf',
                          buildBranch="Try",
                          branchName="MozillaTest",
                          configOptions=basicConfig,
                          buildSearchString="win32.zip",
                          buildDir=TRUNK_BUILDDIR,
                          buildPath=r"C:\talos-slave\vista-try\firefox\firefox.exe",
                          talosCmd=basicTalosCmd)

linux_steps = TalosFactory(OS = 'linux',
                          envName='linux',
                          buildBranch="Try",
                          branchName="MozillaTest",
                          configOptions=basicConfig,
                          buildSearchString="try-linux.tar.bz2",
                          buildDir=TRUNK_BUILDDIR,
                          buildPath="../firefox/firefox",
                          talosCmd=basicTalosCmd)
                           
mac_steps = TalosFactory(OS = 'tiger',
                          envName='mac',
                          buildBranch="Try",
                          branchName="MozillaTest",
                          configOptions=basicConfig,
                          buildSearchString="try-mac.dmg",
                          buildDir=TRUNK_BUILDDIR,
                          buildPath="../Minefield.app/Contents/MacOS/firefox",
                          talosCmd=basicTalosCmd)

leopard_steps = TalosFactory(OS = 'leopard',
                          envName='mac',
                          buildBranch="Try",
                          branchName="MozillaTest",
                          configOptions=basicConfig,
                          buildSearchString="try-mac.dmg",
                          buildDir=TRUNK_BUILDDIR,
                          buildPath="../Minefield.app/Contents/MacOS/firefox",
                          talosCmd=basicTalosCmd)

win32_builder = {
    'name': "WINNT 5.1 talos try",
    'slavenames': ['qm-pxp-try01', 'qm-pxp-try02'],
    'builddir': "win32-trunk-mini",
    'factory': win32_steps,
    'category': "Firefox Trunk"
}

vista_builder = {
    'name': "WINNT 6.0 talos try",
    'slavenames': ['qm-pvista-try01', 'qm-pvista-try02'],
    'builddir': "vista-try",
    'factory': vista_steps,
    'category': "Firefox Trunk"
}

linux_builder = {
    'name': "Linux talos try",
    'slavenames': ['qm-pubuntu-try01', 'qm-pubuntu-try02'],
    'builddir': "linux-try-trunk",
    'factory': linux_steps,
    'category': "Firefox Trunk"
}

mac_builder = {
    'name': "MacOSX Darwin 8.8.1 talos try",
    'slavenames': ['qm-ptiger-try01', 'qm-ptiger-try02'],
    'builddir': "mac-trunk",
    'factory': mac_steps,
    'category': "Firefox Trunk"
}

leopard_builder = {
    'name': "MacOSX Darwin 9.2.2 talos try",
    'slavenames': ['qm-pleopard-try01', 'qm-pleopard-try02'],
    'builddir': "leopard-try",
    'factory': leopard_steps,
    'category': "Firefox Trunk"
}


c['builders'] = []

c['builders'].append(win32_builder)
c['builders'].append(vista_builder)
c['builders'].append(linux_builder)
c['builders'].append(mac_builder)
c['builders'].append(leopard_builder)
