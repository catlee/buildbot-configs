# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010


####### SCHEDULERS, CHANGE SOURCES, AND BUILDERS

HGURL = 'http://hg.mozilla.org/'
# for nss/nspr
CVSROOT = ':ext:stgbld@cvs.mozilla.org:/cvsroot'
CONFIG_REPO_URL = 'http://hg.mozilla.org/build/buildbot-configs'
CONFIG_SUBDIR = 'mozilla2'
OBJDIR = 'obj-firefox'
STAGE_USERNAME = 'ffxbld'
STAGE_SERVER = 'stage.mozilla.org'
STAGE_BASE_PATH = '/home/ftp/pub/firefox'
STAGE_GROUP = None
STAGE_SSH_KEY = 'ffxbld_dsa'
AUS2_USER = 'cltbld'
AUS2_HOST = 'aus2-staging.mozilla.org'
AUS2_BASE_UPLOAD_DIR = '/opt/aus2/build/0/Firefox/mozilla2'
DOWNLOAD_BASE_URL = 'http://ftp.mozilla.org/pub/mozilla.org/firefox'
BRANCHES = {'mozilla-central': {}, 'actionmonkey': {}}
BRANCHES['mozilla-central']['platforms'] = {'linux': {}, 'win32': {}, 'macosx': {}, 'linux-debug': {}, 'macosx-debug': {}, 'win32-debug': {}}
BRANCHES['mozilla-central']['create_snippet'] = True
BRANCHES['mozilla-central']['upload_symbols'] = True
BRANCHES['mozilla-central']['platforms']['linux']['slaves'] = ['moz2-linux-slave1', 'bm-centos5-moz2-01']
BRANCHES['mozilla-central']['platforms']['win32']['slaves'] = ['moz2-win32-slave1', 'bm-win2k3-moz2-01']
BRANCHES['mozilla-central']['platforms']['macosx']['slaves'] = ['moz2-mac-slave1', 'bm-xserve18']
BRANCHES['mozilla-central']['platforms']['linux-debug']['slaves'] = ['moz2-linux-slave1', 'bm-centos5-moz2-01']
BRANCHES['mozilla-central']['platforms']['win32-debug']['slaves'] = ['moz2-win32-slave1', 'bm-win2k3-moz2-01']
BRANCHES['mozilla-central']['platforms']['macosx-debug']['slaves'] = ['moz2-mac-slave1', 'bm-xserve18']
BRANCHES['mozilla-central']['platforms']['linux']['platform_objdir'] = OBJDIR
BRANCHES['mozilla-central']['platforms']['win32']['platform_objdir'] = OBJDIR
BRANCHES['mozilla-central']['platforms']['macosx']['platform_objdir'] = '%s/ppc' % OBJDIR
BRANCHES['mozilla-central']['platforms']['linux-debug']['platform_objdir'] = OBJDIR
BRANCHES['mozilla-central']['platforms']['macosx-debug']['platform_objdir'] = OBJDIR
BRANCHES['mozilla-central']['platforms']['win32-debug']['platform_objdir'] = OBJDIR
BRANCHES['mozilla-central']['platforms']['linux']['env'] = {
    'MOZ_OBJDIR': OBJDIR,
    'SYMBOL_SERVER_HOST': 'dm-symbolpush01.mozilla.org',
    'SYMBOL_SERVER_USER': 'ffxbld',
    'SYMBOL_SERVER_PATH': '/mnt/netapp/breakpad/symbols_ffx/',
    'SYMBOL_SERVER_SSH_KEY': "/home/cltbld/.ssh/ffxbld_dsa",
}
BRANCHES['mozilla-central']['platforms']['win32']['env'] = {'CVS_RSH': 'ssh',
    'MOZ_OBJDIR': OBJDIR,
    'SYMBOL_SERVER_HOST': 'dm-symbolpush01.mozilla.org',
    'SYMBOL_SERVER_USER': 'ffxbld',
    'SYMBOL_SERVER_PATH': '/mnt/netapp/breakpad/symbols_ffx/',
    'SYMBOL_SERVER_SSH_KEY': "/c/Documents and Settings/cltbld/.ssh/ffxbld_dsa",
}
BRANCHES['mozilla-central']['platforms']['macosx']['env'] = {
    'MOZ_OBJDIR': OBJDIR,
    'SYMBOL_SERVER_HOST': 'dm-symbolpush01.mozilla.org',
    'SYMBOL_SERVER_USER': 'ffxbld',
    'SYMBOL_SERVER_PATH': '/mnt/netapp/breakpad/symbols_ffx/',
    'SYMBOL_SERVER_SSH_KEY': "/Users/cltbld/.ssh/ffxbld_dsa",
}
BRANCHES['mozilla-central']['platforms']['linux-debug']['env'] = {
    'MOZ_OBJDIR': OBJDIR,
}
BRANCHES['mozilla-central']['platforms']['macosx-debug']['env'] = {
    'MOZ_OBJDIR': OBJDIR,
}
BRANCHES['mozilla-central']['platforms']['win32-debug']['env'] = {
    'MOZ_OBJDIR': OBJDIR,
}
BRANCHES['mozilla-central']['platforms']['linux']['update_platform'] = 'Linux_x86-gcc3'
BRANCHES['mozilla-central']['platforms']['win32']['update_platform'] = 'WINNT_x86-msvc'
BRANCHES['mozilla-central']['platforms']['macosx']['update_platform'] = 'Darwin_Universal-gcc3'
BRANCHES['actionmonkey']['platforms'] = {'linux': {}, 'win32': {}, 'macosx': {}}
BRANCHES['actionmonkey']['create_snippet'] = False
BRANCHES['actionmonkey']['upload_symbols'] = False
BRANCHES['actionmonkey']['platforms']['linux']['slaves'] = ['moz2-linux-slave1', 'bm-centos5-moz2-01']
BRANCHES['actionmonkey']['platforms']['win32']['slaves'] = ['moz2-win32-slave1', 'bm-win2k3-moz2-01']
BRANCHES['actionmonkey']['platforms']['macosx']['slaves'] = ['moz2-mac-slave1', 'bm-xserve18']
BRANCHES['actionmonkey']['platforms']['linux']['platform_objdir'] = OBJDIR
BRANCHES['actionmonkey']['platforms']['win32']['platform_objdir'] = OBJDIR
BRANCHES['actionmonkey']['platforms']['macosx']['platform_objdir'] = '%s/ppc' % OBJDIR
BRANCHES['actionmonkey']['platforms']['linux']['env'] = {
    'MOZ_OBJDIR': OBJDIR
}
BRANCHES['actionmonkey']['platforms']['win32']['env'] = {'CVS_RSH': 'ssh',
    'MOZ_OBJDIR': OBJDIR
}
BRANCHES['actionmonkey']['platforms']['macosx']['env'] = {
    'MOZ_OBJDIR': OBJDIR
}


from buildbot.process import factory
from buildbot.scheduler import Scheduler, Nightly, Periodic
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

import buildbotcustom.changes.hgpoller
import buildbotcustom.steps.misc
import buildbotcustom.steps.transfer
import buildbotcustom.steps.updates
reload(buildbotcustom.changes.hgpoller)
reload(buildbotcustom.steps.misc)
reload(buildbotcustom.steps.transfer)
reload(buildbotcustom.steps.updates)

from buildbotcustom.changes.hgpoller import HgPoller
from buildbotcustom.steps.misc import SetMozillaBuildProperties
from buildbotcustom.steps.transfer import MozillaStageUpload
from buildbotcustom.steps.updates import CreateCompleteUpdateSnippet

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

for name in BRANCHES.keys():
    # shorthand
    branch = BRANCHES[name]
    builders = []
    nightlyBuilders = []
    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        builders.append('%s-%s' % (name, platform))
        # Skip the nightly builder for debug builds
        if platform.find('debug') == -1:
            nightlyBuilders.append('%s-%s-nightly' % (name, platform))

    # change sources
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=name,
        pushlogUrlOverride='%s/%s/index.cgi/pushlog' % (HGURL, name),
        pollInterval=1*60
    ))

    # schedulers
    # this one gets triggered by the HG Poller
    c['schedulers'].append(Scheduler(
        name=name,
        branch=name,
        treeStableTimer=3*60,
        builderNames=builders
    ))
    c['schedulers'].append(Nightly(
        name='%s nightly' % name,
        branch=name,
        hour=[2],
        builderNames=nightlyBuilders
    ))
    c['schedulers'].append(Periodic(
        name='%s periodic' % name,
        builderNames=builders,
        branch=name,
        periodicBuildTimer=60*60*2 # 2 hours
    ))

    for platform in branch['platforms'].keys():
        # shorthand
        pf = branch['platforms'][platform]
        mozilla2_dep_factory = factory.BuildFactory()
        mozilla2_dep_factory.addStep(ShellCommand(
            command="rm -rfv %s/dist/firefox-* %s/dist/install/sea/*.exe " %
                     (pf['platform_objdir'], pf['platform_objdir']),
            env=pf['env'],
            description=['deleting', 'old', 'package'],
            descriptionDone=['delete', 'old', 'package']
        ))
        mozilla2_dep_factory.addStep(Mercurial(
            mode='update',
            baseURL=HGURL,
            defaultBranch=name
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['python', 'client.py', '--cvsroot=%s' % CVSROOT,
                     WithProperties('--mozilla-repo=' + HGURL + '%(branch)s'),
                     'checkout'],
            env=pf['env'],
            description=['running', 'client.py'],
            descriptionDone=['run', 'client.py'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            # cp configs/mozilla2/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))
        mozilla2_dep_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', 'build'],
            env=pf['env'],
            haltOnFailure=True
        ))
        if platform.find('debug') == -1:
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['make', 'package'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
            if platform.startswith("win32"):
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['make', 'installer'],
                    workdir='build/%s' % pf['platform_objdir'],
                    haltOnFailure=True
                ))
            mozilla2_dep_factory.addStep(SetMozillaBuildProperties(
                objdir='build/%s' % pf['platform_objdir']
            ))
            mozilla2_dep_factory.addStep(MozillaStageUpload(
                objdir=pf['platform_objdir'],
                username=STAGE_USERNAME,
                milestone=name,
                remoteHost=STAGE_SERVER,
                remoteBasePath=STAGE_BASE_PATH,
                platform=platform,
                group=STAGE_GROUP,
                sshKey=STAGE_SSH_KEY,
                releaseToLatest=False,
                releaseToDated=False,
                releaseToTinderboxBuilds=True,
                tinderboxBuildsDir='%s-%s' % (name, platform),
                dependToDated=False
            ))
        # OS X builds eat up a ton of space with -save-temps enabled
        # until we have dwarf support we need to clean this up so we don't
        # fill up the disk
        if platform.startswith("macosx"):
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['find', '-E', '.', '-iregex',
                         '.*\.(i|s|mii|ii)$', '-exec', 'rm', '{}', ';'],
                workdir='build/%s' % OBJDIR
            ))


        mozilla2_dep_builder = {
            'name': '%s-%s' % (name, platform),
            'slavenames': pf['slaves'],
            'builddir': '%s-%s' % (name, platform),
            'factory': mozilla2_dep_factory,
            'category': name,
        }
        c['builders'].append(mozilla2_dep_builder)

        # Skip the nightly builder for debug builds
        if platform.find('debug') > -1:
            continue

        mozilla2_nightly_factory = factory.BuildFactory()
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['find', '.', '-maxdepth', '2', '-mtime', '+7', '-exec',
                     'rm', '-rfv', '{}', ';'],
            env=pf['env'],
            workdir='.',
            description=['cleanup', 'old', 'symbols'],
        ))
        mozilla2_nightly_factory.addStep(Mercurial(
            mode='clobber',
            baseURL=HGURL,
            defaultBranch=name
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['python', 'client.py', '--cvsroot=%s' % CVSROOT,
                     WithProperties('--mozilla-repo=' + HGURL + '%(branch)s'),
                     'checkout'],
            env=pf['env'],
            description=['running', 'client.py'],
            descriptionDone=['run', 'client.py'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            # cp configs/mozilla2/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))
        mozilla2_nightly_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', 'build'],
            env=pf['env'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['make', 'package'],
            workdir='build/%s' % pf['platform_objdir'],
            haltOnFailure=True
        ))
        if platform.startswith("win32"):
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'installer'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['make', '-C',
                     '%s/tools/update-packaging' % pf['platform_objdir']],
            description=['create', 'complete', 'update'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(SetMozillaBuildProperties(
                objdir='build/%s' % pf['platform_objdir']
        ))
        mozilla2_nightly_factory.addStep(MozillaStageUpload(
                objdir=pf['platform_objdir'],
                username=STAGE_USERNAME,
                milestone=name,
                remoteHost=STAGE_SERVER,
                remoteBasePath=STAGE_BASE_PATH,
                platform=platform,
                group=STAGE_GROUP,
                sshKey=STAGE_SSH_KEY,
                releaseToDated=True,
                releaseToLatest=True,
                releaseToTinderboxBuilds=True,
                tinderboxBuildsDir='%s-%s' % (name, platform),
                dependToDated=False
        ))
        if branch['create_snippet']:
            # this is a tad ugly because we need to python interpolation
            # as well as WithProperties
            # here's an example of what it translates to:
            # /opt/aus2/build/0/Firefox/mozilla2/WINNT_x86-msvc/2008010103/en-US
            AUS2_FULL_UPLOAD_DIR = '%s/%s/%%(buildid)s/en-US' % \
              (AUS2_BASE_UPLOAD_DIR,
              branch['platforms'][platform]['update_platform']
              )

            mozilla2_nightly_factory.addStep(CreateCompleteUpdateSnippet(
                objdir='build/%s' % pf['platform_objdir'],
                milestone=name,
                baseurl='%s/nightly' % DOWNLOAD_BASE_URL
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['ssh', '-l', AUS2_USER, AUS2_HOST,
                         WithProperties('mkdir -p %s' % AUS2_FULL_UPLOAD_DIR)],
                description=['create', 'aus2', 'upload', 'dir'],
                haltOnFailure=True
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['scp', '-o', 'User=%s' % AUS2_USER,
                         'dist/update/complete.update.snippet',
                         WithProperties('%s:%s/complete.txt' % \
                           (AUS2_HOST, AUS2_FULL_UPLOAD_DIR))],
                workdir='build/%s' % pf['platform_objdir'],
                description=['upload', 'complete', 'snippet'],
                haltOnFailure=True
              ))
        if branch['upload_symbols']:
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'buildsymbols'],
                env=pf['env'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'uploadsymbols'],
                env=pf['env'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
        # in order to save disk space we clobber 'build' at the end.
        # we don't want to clobber anything else though, because symbols
        # sit alongside
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'build'],
            env=pf['env'],
            workdir='.'
        ))


        mozilla2_nightly_builder = {
            'name': '%s-%s-nightly' % (name, platform),
            'slavenames': pf['slaves'],
            'builddir': '%s-%s-nightly' % (name, platform),
            'factory': mozilla2_nightly_factory,
            'category': name,
        }
        c['builders'].append(mozilla2_nightly_builder)


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.tinderbox import TinderboxMailNotifier

c['status'].append(html.WebStatus(
    http_port=8010, allowForce=True
))

c['status'].append(TinderboxMailNotifier(
    fromaddr="mozilla2.buildbot@build.mozilla.org",
    tree="Mozilla2",
    extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
    relayhost="mail.build.mozilla.org",
    logCompression="bzip2"
))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Mozilla 2"
c['projectURL'] = "http://wiki.mozilla.org/Mozilla_2"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://production-master.build.mozilla.org:8010/"
