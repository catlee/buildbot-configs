# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010


####### SCHEDULERS, CHANGE SOURCES, AND BUILDERS

HGURL = 'http://hg.mozilla.org/'
# for nss/nspr
CVSROOT = ':ext:stgbld@cvs.mozilla.org:/cvsroot'
CONFIG_REPO_URL = 'http://hg.mozilla.org/build/buildbot-configs'
CONFIG_SUBDIR = 'mozilla2'
OBJDIR = 'obj-firefox'
STAGE_USERNAME = 'ffxbld'
STAGE_SERVER = 'stage.mozilla.org'
STAGE_BASE_PATH = '/home/ftp/pub/firefox'
STAGE_GROUP = None
STAGE_SSH_KEY = 'ffxbld_dsa'
BRANCHES = {'mozilla-central': {}, 'actionmonkey': {}}
BRANCHES['mozilla-central']['platforms'] = {'linux': {}, 'win32': {}, 'macosx': {}}
BRANCHES['mozilla-central']['platforms']['linux']['slaves'] = ['moz2-linux-slave1']
BRANCHES['mozilla-central']['platforms']['win32']['slaves'] = ['moz2-win32-slave1']
BRANCHES['mozilla-central']['platforms']['macosx']['slaves'] = ['moz2-mac-slave1']
BRANCHES['mozilla-central']['platforms']['linux']['platform_objdir'] = OBJDIR
BRANCHES['mozilla-central']['platforms']['win32']['platform_objdir'] = OBJDIR
BRANCHES['mozilla-central']['platforms']['macosx']['platform_objdir'] = '%s/ppc' % OBJDIR
BRANCHES['mozilla-central']['platforms']['linux']['env'] = {
    'MOZ_OBJDIR': OBJDIR
}
BRANCHES['mozilla-central']['platforms']['win32']['env'] = {'CVS_RSH': 'ssh',
    'MOZ_OBJDIR': OBJDIR
}
BRANCHES['mozilla-central']['platforms']['macosx']['env'] = {
    'MOZ_OBJDIR': OBJDIR
}
BRANCHES['actionmonkey']['platforms'] = {'linux': {}, 'win32': {}, 'macosx': {}}
BRANCHES['actionmonkey']['platforms']['linux']['slaves'] = ['moz2-linux-slave1']
BRANCHES['actionmonkey']['platforms']['win32']['slaves'] = ['moz2-win32-slave1']
BRANCHES['actionmonkey']['platforms']['macosx']['slaves'] = ['moz2-mac-slave1']
BRANCHES['actionmonkey']['platforms']['linux']['platform_objdir'] = OBJDIR
BRANCHES['actionmonkey']['platforms']['win32']['platform_objdir'] = OBJDIR
BRANCHES['actionmonkey']['platforms']['macosx']['platform_objdir'] = '%s/ppc' % OBJDIR
BRANCHES['actionmonkey']['platforms']['linux']['env'] = {
    'MOZ_OBJDIR': OBJDIR
}
BRANCHES['actionmonkey']['platforms']['win32']['env'] = {'CVS_RSH': 'ssh',
    'MOZ_OBJDIR': OBJDIR
}
BRANCHES['actionmonkey']['platforms']['macosx']['env'] = {
    'MOZ_OBJDIR': OBJDIR
}


from buildbot.process import factory
from buildbot.changes.hgpoller import HgPoller
from buildbot.scheduler import Scheduler, Nightly, Periodic
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import Compile, ShellCommand, WithProperties
from buildbot.locks import SlaveLock

import buildbotcustom.steps.misc
import buildbotcustom.steps.transfer
reload(buildbotcustom.steps.misc)
reload(buildbotcustom.steps.transfer)

from buildbotcustom.steps.misc import GetBuildID
from buildbotcustom.steps.transfer import MozillaStageUpload

c['sources'] = []
c['schedulers'] = []
c['builders'] = []

locks = {'linux': SlaveLock(name='linux', maxCount=1),
         'win32': SlaveLock(name='win32', maxCount=1),
         'macosx': SlaveLock(name='macosx', maxCount=1)}

for name in BRANCHES.keys():
    # shorthand
    branch = BRANCHES[name]
    builders = []
    nightlyBuilders = []
    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        builders.append('%s-%s' % (name, platform))
        nightlyBuilders.append('%s-%s-nightly' % (name, platform))

    # change sources
    c['sources'].append(HgPoller(
        hgURL=HGURL,
        branch=name,
        pollInterval=1*60
    ))

    # schedulers
    # this one gets triggered by the HG Poller
    c['schedulers'].append(Scheduler(
        name=name,
        branch=name,
        treeStableTimer=3*60,
        builderNames=builders
    ))
    c['schedulers'].append(Nightly(
        name='%s nightly' % name,
        branch=name,
        hour=[2],
        builderNames=nightlyBuilders
    ))
    c['schedulers'].append(Periodic(
        name='%s periodic' % name,
        builderNames=builders,
        branch=name,
        periodicBuildTimer=60*60*2 # 2 hours
    ))

    for platform in branch['platforms'].keys():
        # shorthand
        pf = branch['platforms'][platform]
        mozilla2_dep_factory = factory.BuildFactory()
        mozilla2_dep_factory.addStep(ShellCommand(
            command="rm -rfv %s/dist/firefox-* %s/dist/install/sea/*.exe " %
                     (pf['platform_objdir'], OBJDIR),
            env=pf['env'],
            description=['deleting', 'old', 'package'],
            descriptionDone=['delete', 'old', 'package']
        ))
        mozilla2_dep_factory.addStep(Mercurial(
            mode='update',
            baseURL=HGURL,
            defaultBranch=name
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['python', 'client.py', '--cvsroot=%s' % CVSROOT,
                     WithProperties('--mozilla-repo=' + HGURL + '%(branch)s'),
                     'checkout'],
            env=pf['env'],
            description=['running', 'client.py'],
            descriptionDone=['run', 'client.py'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            # cp configs/mozilla2/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))
        mozilla2_dep_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', 'build'],
            env=pf['env'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['make', 'package'],
            workdir='build/%s' % pf['platform_objdir'],
            haltOnFailure=True
        ))
        if platform == "win32":
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['make', 'installer'],
                workdir='build/%s' % OBJDIR,
                haltOnFailure=True
            ))
        mozilla2_dep_factory.addStep(GetBuildID(
                objdir=pf['platform_objdir']
        ))
        mozilla2_dep_factory.addStep(MozillaStageUpload(
                objdir=pf['platform_objdir'],
                username=STAGE_USERNAME,
                milestone=name,
                remoteHost=STAGE_SERVER,
                remoteBasePath=STAGE_BASE_PATH,
                platform=platform,
                group=STAGE_GROUP,
                sshKey=STAGE_SSH_KEY,
                releaseToLatest=False,
                releaseToDated=False,
                releaseToTinderboxBuilds=True,
                tinderboxBuildsDir='%s-%s' % (name, platform),
                dependToDated=False
        ))


        mozilla2_dep_builder = {
            'name': '%s-%s' % (name, platform),
            'slavenames': pf['slaves'],
            'builddir': '%s-%s' % (name, platform),
            'factory': mozilla2_dep_factory,
            'category': name,
            'locks': [ locks[platform] ]
        }
        c['builders'].append(mozilla2_dep_builder)

        # TODO: does all of this have to be repeated? the only change is 'mode'
        mozilla2_nightly_factory = factory.BuildFactory()
        mozilla2_nightly_factory.addStep(Mercurial(
            mode='clobber',
            baseURL=HGURL,
            defaultBranch=name
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['python', 'client.py', '--cvsroot=%s' % CVSROOT,
                     WithProperties('--mozilla-repo=' + HGURL + '%(branch)s'),
                     'checkout'],
            env=pf['env'],
            description=['running', 'client.py'],
            descriptionDone=['run', 'client.py'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            # cp configs/mozilla2/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))
        mozilla2_nightly_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', 'build'],
            env=pf['env'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['make', 'package'],
            workdir='build/%s' % pf['platform_objdir'],
            haltOnFailure=True
        ))
        if platform == "win32":
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'installer'],
                workdir='build/%s' % OBJDIR,
                haltOnFailure=True
            ))
        mozilla2_nightly_factory.addStep(GetBuildID(
                objdir=pf['platform_objdir']
        ))
        mozilla2_nightly_factory.addStep(MozillaStageUpload(
                objdir=pf['platform_objdir'],
                username=STAGE_USERNAME,
                milestone=name,
                remoteHost=STAGE_SERVER,
                remoteBasePath=STAGE_BASE_PATH,
                platform=platform,
                group=STAGE_GROUP,
                sshKey=STAGE_SSH_KEY,
                releaseToDated=True,
                releaseToLatest=True,
                releaseToTinderboxBuilds=True,
                tinderboxBuildsDir='%s-%s' % (name, platform),
                dependToDated=False
        ))

        mozilla2_nightly_builder = {
            'name': '%s-%s-nightly' % (name, platform),
            'slavenames': pf['slaves'],
            'builddir': '%s-%s-nightly' % (name, platform),
            'factory': mozilla2_nightly_factory,
            'category': name,
            'locks': [ locks[platform] ]
        }
        c['builders'].append(mozilla2_nightly_builder)


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.tinderbox import TinderboxMailNotifier

c['status'].append(html.WebStatus(
    http_port=8010, allowForce=True
))

c['status'].append(TinderboxMailNotifier(
    fromaddr="mozilla2.buildbot@build.mozilla.org",
    tree="Mozilla2",
    extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
    relayhost="mail.build.mozilla.org",
    logCompression="bzip2"
))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Mozilla 2"
c['projectURL'] = "http://wiki.mozilla.org/Mozilla_2"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://staging-master.build.mozilla.org:8010/"
