# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010


# most of the config is in an external file
import config
reload(config)
from config import *


from buildbot.process import factory
from buildbot.scheduler import Scheduler, Nightly, Periodic
from buildbot.status.tinderbox import TinderboxMailNotifier
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

import buildbotcustom.changes.hgpoller
import buildbotcustom.steps.misc
import buildbotcustom.steps.test
import buildbotcustom.steps.transfer
import buildbotcustom.steps.updates
reload(buildbotcustom.changes.hgpoller)
reload(buildbotcustom.steps.misc)
reload(buildbotcustom.steps.test)
reload(buildbotcustom.steps.transfer)
reload(buildbotcustom.steps.updates)

from buildbotcustom.changes.hgpoller import HgPoller
from buildbotcustom.steps.test import AliveTest, CompareBloatLogs, \
  CompareLeakLogs, Codesighs
from buildbotcustom.steps.misc import SetMozillaBuildProperties
from buildbotcustom.steps.transfer import MozillaStageUpload
from buildbotcustom.steps.updates import CreateCompleteUpdateSnippet

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

for name in BRANCHES.keys():
    # shorthand
    branch = BRANCHES[name]
    builders = []
    nightlyBuilders = []
    allBuilders = []
    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        builders.append('%s build' % branch['platforms'][platform]['base_name'])
        # Skip the nightly builder for debug builds
        if platform.find('debug') == -1:
            nightlyBuilders.append('%s nightly' % \
                                    branch['platforms'][platform]['base_name'])
    allBuilders.extend(builders)
    allBuilders.extend(nightlyBuilders)

    # Currently, each branch goes to a different tree
    # If this changes in the future this may have to be
    # moved out of the loop
    c['status'].append(TinderboxMailNotifier(
        fromaddr="mozilla2.buildbot@build.mozilla.org",
        tree=branch['tinderbox_tree'],
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
        relayhost="mail.build.mozilla.org",
        builders=allBuilders,
        logCompression="bzip2"
    ))

    # change sources
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=name,
        pushlogUrlOverride='%s/%s/index.cgi/pushlog' % (HGURL, name),
        pollInterval=1*60
    ))

    # schedulers
    # this one gets triggered by the HG Poller
    c['schedulers'].append(Scheduler(
        name=name,
        branch=name,
        treeStableTimer=3*60,
        builderNames=builders
    ))
    c['schedulers'].append(Nightly(
        name='%s nightly' % name,
        branch=name,
        hour=[2],
        builderNames=nightlyBuilders
    ))
    c['schedulers'].append(Periodic(
        name='%s periodic' % name,
        builderNames=builders,
        branch=name,
        periodicBuildTimer=60*60*2 # 2 hours
    ))

    for platform in branch['platforms'].keys():
        # no need to have a whole new directory just for logs.
        # let's put these in their non-debug counterpart
        # translates to, eg:
        #  /home/ftp/pub/firefox/tinderbox-builds/mozilla-central-linux
        realPlatform = platform.replace('-debug', '').replace('64', '')
        logUploadDir = 'tinderbox-builds/%s-%s/' % (name, realPlatform)

        # shorthand
        pf = branch['platforms'][platform]
        mozilla2_dep_factory = factory.BuildFactory()
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['echo', WithProperties('Building on: %(slavename)s')],
            env=pf['env']
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command="rm -rfv %s/dist/firefox-* %s/dist/install/sea/*.exe " %
                     (pf['platform_objdir'], pf['platform_objdir']),
            env=pf['env'],
            description=['deleting', 'old', 'package'],
            descriptionDone=['delete', 'old', 'package']
        ))
        mozilla2_dep_factory.addStep(Mercurial(
            mode='update',
            baseURL=HGURL,
            defaultBranch=name
        ))
        changesetLink = '<a href=%s/%s/index.cgi/rev' % (HGURL, name)
        changesetLink += '/%(got_revision)s title="Built from revision %(got_revision)s">rev:%(got_revision)s</a>'
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            # cp configs/mozilla2/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_dep_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))

        buildcmd = 'build'
        if pf['profiled_build']:
            buildcmd = 'profiledbuild'
        mozilla2_dep_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', buildcmd],
            env=pf['env'],
            haltOnFailure=True,
            timeout=3600 # 1 hour, because windows PGO builds take a long time
        ))
        if platform.find('debug') > -1:
            # we want the same thing run a few times here, with different
            # extraArgs
            for args in [['-register'], ['-CreateProfile', 'default'],
                         ['-P', 'default']]:
                mozilla2_dep_factory.addStep(AliveTest(
                    env=pf['env'],
                    workdir='build/%s/_leaktest' % pf['platform_objdir'],
                    extraArgs=args
                ))

            # we only want this variable for this test - this sucks
            bloatEnv = pf['env'].copy()
            bloatEnv['XPCOM_MEM_BLOAT_LOG'] = '1' 
            mozilla2_dep_factory.addStep(AliveTest(
                env=bloatEnv,
                workdir='build/%s/_leaktest' % pf['platform_objdir'],
                logfile='bloat.log',
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                workdir='.',
                command=['wget', '-O', 'bloat.log.old',
                         'http://%s/pub/mozilla.org/firefox/%s/bloat.log' % \
                           (STAGE_SERVER, logUploadDir)]
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                command=['mv',
                         '%s/_leaktest/bloat.log' % pf['platform_objdir'],
                         '../bloat.log'],
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                command=['scp', '-o', 'User=%s' % STAGE_USERNAME,
                         '-o', 'IdentityFile=~/.ssh/%s' % STAGE_SSH_KEY,
                         '../bloat.log',
                         '%s:%s/%s' % (STAGE_SERVER, STAGE_BASE_PATH,
                                       logUploadDir)]
            ))
            mozilla2_dep_factory.addStep(CompareBloatLogs(
                bloatLog='../bloat.log',
                env=pf['env'],
            ))
            mozilla2_dep_factory.addStep(AliveTest(
                env=pf['env'],
                workdir='build/%s/_leaktest' % pf['platform_objdir'],
                extraArgs=['--trace-malloc', 'malloc.log',
                           '--shutdown-leaks=sdleak.log'],
                timeout=3600 # 1 hour, because this takes a long time on win32
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                workdir='.',
                command=['wget', '-O', 'malloc.log.old',
                         'http://%s/pub/mozilla.org/firefox/%s/malloc.log' % \
                           (STAGE_SERVER, logUploadDir)]
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                workdir='.',
                command=['wget', '-O', 'sdleak.tree.old',
                         'http://%s/pub/mozilla.org/firefox/%s/sdleak.tree' % \
                           (STAGE_SERVER, logUploadDir)]
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                command=['mv',
                         '%s/_leaktest/malloc.log' % pf['platform_objdir'],
                         '../malloc.log'],
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                command=['mv',
                         '%s/_leaktest/sdleak.log' % pf['platform_objdir'],
                         '../sdleak.log'],
            ))
            mozilla2_dep_factory.addStep(CompareLeakLogs(
                mallocLog='../malloc.log',
                platform=platform,
                env=pf['env'],
                testname='current'
            ))
            mozilla2_dep_factory.addStep(CompareLeakLogs(
                mallocLog='../malloc.log.old',
                platform=platform,
                env=pf['env'],
                testname='previous'
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                workdir='.',
                command=['bash', '-c',
                         'perl build/tools/trace-malloc/diffbloatdump.pl '
                         '--depth=15 --use-address /dev/null sdleak.log '
                         '> sdleak.tree']
            ))
            if platform.find('macosx') > -1 or platform.find('linux') > -1:
                mozilla2_dep_factory.addStep(ShellCommand(
                    env=pf['env'],
                    workdir='.',
                    command=['mv', 'sdleak.tree', 'sdleak.tree.raw']
                ))
                mozilla2_dep_factory.addStep(ShellCommand(
                    env=pf['env'],
                    workdir='.',
                    command=['/bin/bash', '-c', 
                             'perl '
                             'build/tools/rb/fix-%s-stack.pl '
                             'sdleak.tree.raw '
                             '> sdleak.tree' % realPlatform]
                ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                command=['scp', '-o', 'User=%s' % STAGE_USERNAME,
                         '-o', 'IdentityFile=~/.ssh/%s' % STAGE_SSH_KEY,
                         '../malloc.log', '../sdleak.tree',
                         '%s:%s/%s' % (STAGE_SERVER, STAGE_BASE_PATH,
                                       logUploadDir)]
            ))
            mozilla2_dep_factory.addStep(ShellCommand(
                env=pf['env'],
                command=['perl', 'tools/trace-malloc/diffbloatdump.pl',
                         '--depth=15', '../sdleak.tree.old', '../sdleak.tree']
            ))

        if platform.find('debug') == -1:
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['make', 'package'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
            if platform.startswith("win32"):
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['make', 'installer'],
                    workdir='build/%s' % pf['platform_objdir'],
                    haltOnFailure=True
                ))
            mozilla2_dep_factory.addStep(SetMozillaBuildProperties(
                objdir='build/%s' % pf['platform_objdir']
            ))
            mozilla2_dep_factory.addStep(MozillaStageUpload(
                objdir=pf['platform_objdir'],
                username=STAGE_USERNAME,
                milestone=name,
                remoteHost=STAGE_SERVER,
                remoteBasePath=STAGE_BASE_PATH,
                platform=realPlatform,
                group=STAGE_GROUP,
                sshKey=STAGE_SSH_KEY,
                releaseToLatest=False,
                releaseToDated=False,
                releaseToTinderboxBuilds=True,
                tinderboxBuildsDir='%s-%s' % (name, platform),
                dependToDated=True
            ))
            if platform.find('win32') == -1 and platform.find('linux64') == -1:
                # Codesighs
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['make'],
                    workdir='build/%s/tools/codesighs' % pf['platform_objdir']
                ))
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['wget', '-O', 'codesize-auto-old.log',
                     'http://%s/pub/mozilla.org/firefox/%s/codesize-auto.log' %\
                      (STAGE_SERVER, logUploadDir)],
                    workdir='.',
                    env=pf['env']
                ))
                mozilla2_dep_factory.addStep(Codesighs(
                    objdir=pf['platform_objdir'],
                    platform=realPlatform,
                    env=pf['env']
                ))
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['cat', '../codesize-auto-diff.log']
                ))
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['scp', '-o', 'User=%s' % STAGE_USERNAME,
                     '-o', 'IdentityFile=~/.ssh/%s' % STAGE_SSH_KEY,
                     '../codesize-auto.log',
                     '%s:%s/%s' % (STAGE_SERVER, STAGE_BASE_PATH, logUploadDir)]
                ))
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['wget', '-O', 'codesize-base-old.log',
                     'http://%s/pub/mozilla.org/firefox/%s/codesize-base.log' %\
                      (STAGE_SERVER, logUploadDir)],
                    workdir='.',
                    env=pf['env']
                ))
                mozilla2_dep_factory.addStep(Codesighs(
                    objdir=pf['platform_objdir'],
                    platform=realPlatform,
                    type='base',
                    env=pf['env']
                ))
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['cat', '../codesize-base-diff.log']
                ))
                mozilla2_dep_factory.addStep(ShellCommand(
                    command=['scp', '-o', 'User=%s' % STAGE_USERNAME,
                     '-o', 'IdentityFile=~/.ssh/%s' % STAGE_SSH_KEY,
                     '../codesize-base.log',
                     '%s:%s/%s' % (STAGE_SERVER, STAGE_BASE_PATH, logUploadDir)]
                ))

        # OS X builds eat up a ton of space with -save-temps enabled
        # until we have dwarf support we need to clean this up so we don't
        # fill up the disk
        if platform.startswith("macosx"):
            mozilla2_dep_factory.addStep(ShellCommand(
                command=['find', '-E', '.', '-iregex',
                         '.*\.(i|s|mii|ii)$', '-exec', 'rm', '{}', ';'],
                workdir='build/%s' % OBJDIR
            ))


        mozilla2_dep_builder = {
            'name': '%s build' % pf['base_name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s' % (name, platform),
            'factory': mozilla2_dep_factory,
            'category': name,
        }
        c['builders'].append(mozilla2_dep_builder)

        # Skip the nightly builder for debug builds
        if platform.find('debug') > -1:
            continue

        mozilla2_nightly_factory = factory.BuildFactory()
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['echo', WithProperties('Building on: %(slavename)s')],
            env=pf['env']
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['find', '.', '-maxdepth', '2', '-mtime', '+7', '-exec',
                     'rm', '-rfv', '{}', ';'],
            env=pf['env'],
            workdir='.',
            description=['cleanup', 'old', 'symbols'],
            flunkOnFailure=False,
        ))
        mozilla2_nightly_factory.addStep(Mercurial(
            mode='clobber',
            baseURL=HGURL,
            defaultBranch=name
        ))
        changesetLink = '<a href=%s/%s/index.cgi/rev' % (HGURL, name)
        changesetLink += '/%(got_revision)s title="Built from revision %(got_revision)s">rev:%(got_revision)s</a>'
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            # cp configs/mozilla2/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))

        buildcmd = 'build'
        if pf['profiled_build']:
            buildcmd = 'profiledbuild'
        mozilla2_nightly_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', buildcmd],
            env=pf['env'],
            haltOnFailure=True,
            timeout=3600 # 1 hour, because windows PGO builds take a long time
        ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['make', 'package'],
            workdir='build/%s' % pf['platform_objdir'],
            haltOnFailure=True
        ))
        if platform.startswith("win32"):
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'installer'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['make', '-C',
                     '%s/tools/update-packaging' % pf['platform_objdir']],
            description=['create', 'complete', 'update'],
            haltOnFailure=True
        ))
        mozilla2_nightly_factory.addStep(SetMozillaBuildProperties(
                objdir='build/%s' % pf['platform_objdir']
        ))
        mozilla2_nightly_factory.addStep(MozillaStageUpload(
                objdir=pf['platform_objdir'],
                username=STAGE_USERNAME,
                milestone=name,
                remoteHost=STAGE_SERVER,
                remoteBasePath=STAGE_BASE_PATH,
                platform=realPlatform,
                group=STAGE_GROUP,
                sshKey=STAGE_SSH_KEY,
                releaseToDated=True,
                releaseToLatest=True,
                releaseToTinderboxBuilds=True,
                tinderboxBuildsDir='%s-%s' % (name, platform),
                dependToDated=True
        ))
        if branch['create_snippet']:
            # this is a tad ugly because we need to python interpolation
            # as well as WithProperties
            # here's an example of what it translates to:
            # /opt/aus2/build/0/Firefox/mozilla2/WINNT_x86-msvc/2008010103/en-US
            AUS2_FULL_UPLOAD_DIR = '%s/%s/%%(buildid)s/en-US' % \
              (branch['aus2_base_upload_dir'],
               branch['platforms'][platform]['update_platform']
              )

            mozilla2_nightly_factory.addStep(CreateCompleteUpdateSnippet(
                objdir='build/%s' % pf['platform_objdir'],
                milestone=name,
                baseurl='%s/nightly' % DOWNLOAD_BASE_URL
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['ssh', '-l', AUS2_USER, AUS2_HOST,
                         WithProperties('mkdir -p %s' % AUS2_FULL_UPLOAD_DIR)],
                description=['create', 'aus2', 'upload', 'dir'],
                haltOnFailure=True
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['scp', '-o', 'User=%s' % AUS2_USER,
                         'dist/update/complete.update.snippet',
                         WithProperties('%s:%s/complete.txt' % \
                           (AUS2_HOST, AUS2_FULL_UPLOAD_DIR))],
                workdir='build/%s' % pf['platform_objdir'],
                description=['upload', 'complete', 'snippet'],
                haltOnFailure=True
              ))
        if pf['upload_symbols']:
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'buildsymbols'],
                env=pf['env'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
            mozilla2_nightly_factory.addStep(ShellCommand(
                command=['make', 'uploadsymbols'],
                env=pf['env'],
                workdir='build/%s' % pf['platform_objdir'],
                haltOnFailure=True
            ))
        # in order to save disk space we clobber 'build' at the end.
        # we don't want to clobber anything else though, because symbols
        # sit alongside
        mozilla2_nightly_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'build'],
            env=pf['env'],
            workdir='.'
        ))


        mozilla2_nightly_builder = {
            'name': '%s nightly' % pf['base_name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s-nightly' % (name, platform),
            'factory': mozilla2_nightly_factory,
            'category': name,
        }
        c['builders'].append(mozilla2_nightly_builder)

####### STATUS TARGETS

from buildbot.status import html

c['status'].append(html.WebStatus(
    http_port=8010, allowForce=True
))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Mozilla 2"
c['projectURL'] = "http://wiki.mozilla.org/Mozilla_2"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://production-master.build.mozilla.org:8010/"
