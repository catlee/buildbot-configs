# -*- python -*-

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import buildbotcustom.changes.hgpoller
import buildbotcustom.scheduler
import buildbotcustom.tryserver.env
import buildbotcustom.tryserver.steps
import buildbotcustom.unittest.steps as unittest
import buildbotcustom.steps.misc
reload(buildbotcustom.changes.hgpoller)
reload(buildbotcustom.scheduler)
reload(buildbotcustom.tryserver.env)
reload(buildbotcustom.tryserver.steps)
reload(unittest)
reload(buildbotcustom.steps.misc)

from buildbotcustom.changes.hgpoller import HgPoller
from buildbotcustom.scheduler import NoMergeScheduler
from buildbotcustom.tryserver.env import MozillaEnvironments
from buildbotcustom.steps.misc import TinderboxShellCommand, SendChangeStep

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

##
## Misc Config
##

c['projectName'] = "Mozilla Try Server"
c['projectURL'] = "http://www.mozilla.org"
c['buildbotURL'] = "http://sm-try-master.mozilla.org:8010"
c['slavePortnum'] = 9982

##
## Slaves
##
# (bot-name, bot-password)

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

##
## Status
##

from buildbot.status.html import WebStatus
c['status'] = []
c['status'].append(WebStatus(http_port=8010, allowForce=True))

#
## Sources
##

from buildbot.changes.pb import PBChangeSource
c['change_source'] = []
c['change_source'].append(PBChangeSource())
c['change_source'].append(HgPoller(
    hgURL='http://hg.mozilla.org',
    branch='try',
    pushlogUrlOverride='http://hg.mozilla.org/try/index.cgi/pushlog',
    tipsOnly=1,
    pollInterval=1*60
))

##
## Schedulers
##

c['schedulers'] = []

# scheduler for sendchange
c['schedulers'].append(NoMergeScheduler(name="Sendchange test scheduler",
				 branch="PATCH_TRY",
				 treeStableTimer=3,
				 builderNames=["Try server linux builder",
                               "Try server mac builder",
                               "Try server win32 builder"]))
                               
c['schedulers'].append(NoMergeScheduler(name="Sendchange hg scheduler",
				 branch="HG_TRY",
				 treeStableTimer=3,
				 builderNames=[
				     "Try server linux hg builder",
                     "Try server mac hg builder",
                     "Try server win32 hg builder",
                     "Try linux hg unittest builder",
                     "Try win32 hg unittest builder",
                     "Try macosx hg unittest builder"]))

c['schedulers'].append(NoMergeScheduler(name="Sendchange hg push scheduler",
				 branch="try",
				 treeStableTimer=3,
				 builderNames=[
				     "Try server linux hg builder",
                     "Try server mac hg builder",
                     "Try server win32 hg builder",
                     "Try linux hg unittest builder",
                     "Try win32 hg unittest builder",
                     "Try macosx hg unittest builder"]))
                                               

from buildbot.status.tinderbox import TinderboxMailNotifier
c['status'].append(TinderboxMailNotifier(
                     fromaddr="tryserver@build.mozilla.org",
                     tree="MozillaTry",
                     extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
                     relayhost="mail.build.mozilla.org",
                     builders=["Try server linux builder",
                               "Try server mac builder",
                               "Try server win32 builder",
                               "Try server linux hg builder",
                               "Try server mac hg builder",
                               "Try server win32 hg builder",
                              ],
                     logCompression="bzip2"))

c['status'].append(TinderboxMailNotifier(
                     fromaddr="tryserver@build.mozilla.org",
                     tree="MozillaTry",
                     extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
                     relayhost="mail.build.mozilla.org",
                     builders=["Try linux hg unittest builder",
                               "Try win32 hg unittest builder",
                               "Try macosx hg unittest builder",
                              ],
                     logCompression="bzip2",
                     errorparser="unittest"))

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

builders = []

CVSROOT      = ":ext:trybld@cvs.mozilla.org:/cvsroot"
OBJDIR       = "objdir"
PKG_BASENAME = "firefox-try"
SCP_STRING   = "trybld@build.mozilla.org:/builds/tryserver"
TALOS_TRY_MASTER = "qm-rhel02.mozilla.org:9985"
PACKAGE_URL  = "http://build.mozilla.org/tryserver-builds/%(uploadpath)s"

from buildbot.process import factory
s = factory.s
from buildbot.steps.shell import ShellCommand, WithProperties
from buildbot.steps.transfer import FileDownload, FileUpload

from buildbotcustom.tryserver.steps import *


firefox_sendchange_linux_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="."),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="env | sort"),

    s(MozillaClientMk, cvsroot=CVSROOT),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-linux",
                                patchDir="patches/"),

    s(ShellCommand, name="source checkout",
                    description=["fetching source"],
                    descriptionDone=["source"],
                    command=["make", "-f", "client.mk", "checkout"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="mozilla",
                    env={'MOZ_CO_PROJECT': 'browser'}),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=True,
                            flunkOnFailure=True,
                            workdir="mozilla"),
    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat",".mozconfig"],
                    workdir="mozilla"),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    timeout=3600,
                    workdir="mozilla"),

    s(ShellCommand, name="packaging",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "package",
                            WithProperties(''.join(["PKG_BASENAME=%s",
                                           "-%s-linux" % PKG_BASENAME]),
                                           "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="mozilla/%s" % OBJDIR),

    s(ShellCommand, name="chmod package",
                    command=["chmod", "666",
                             WithProperties(''.join(["mozilla/%s/dist/" \
                                         % OBJDIR,
                                         "%s",
                                         "-%s-linux.tar.bz2" % PKG_BASENAME]),
                                         "identifier")],

                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaCreateUploadDirectory,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                    slavedir="mozilla/%s/dist" % OBJDIR,
                    baseFilename="%s-linux.tar.bz2" % PKG_BASENAME,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(SendChangeStep,
                    master=TALOS_TRY_MASTER,
                    user='sendchange',
                    branch='linux',
                    files=[WithProperties(PACKAGE_URL)],
                    ),
]

firefox_sendchange_linux_builder = {
	'name': "Try server linux builder",
	'slavenames': BuildSlaves.Linux,
	'builddir': "sendchange-linux",
	'factory': factory.BuildFactory(firefox_sendchange_linux_steps),
	'category': "Sendchange",
}
builders.append(firefox_sendchange_linux_builder)

firefox_sendchange_mac_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="."),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="env | sort"),

    s(MozillaClientMk, cvsroot=CVSROOT),
    
    s(MozillaDownloadMozconfig, mastersrc="mozconfig-mac",
                                patchDir="patches/"),

    s(ShellCommand, name="source checkout",
                    description=["fetching source"],
                    descriptionDone=["source"],
                    command=["make", "-f", "client.mk", "checkout"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="mozilla",
                    env={'MOZ_CO_PROJECT': 'browser'}),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=True,
                            flunkOnFailure=True,
                            workdir="mozilla"),
    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat",".mozconfig"],
                    workdir="mozilla"),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    timeout=3600,
                    workdir="mozilla"),

    s(ShellCommand, name="packaging",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "package",
                             WithProperties(''.join(["PKG_BASENAME=%s",
                                            "-%s-mac" % PKG_BASENAME]),
                                            "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="mozilla/%s/ppc" % OBJDIR),

    s(ShellCommand, name="chmod package",
                    # this gets really ugly here, but it translates to this:
                    # mozilla/$OBJDIR/ppc/dist/$IDENTIFIER-$PKG_BASENAME-mac.dmg
                    command=["chmod", "666",
                             WithProperties(''.join(["mozilla/%s/ppc/dist/" \
                                              % OBJDIR,
                                              "%s",
                                              "-%s-mac.dmg" % PKG_BASENAME]),
                                              "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaCreateUploadDirectory,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                    slavedir="mozilla/%s/ppc/dist" % OBJDIR,
                    baseFilename="%s-mac.dmg" % PKG_BASENAME,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(SendChangeStep,
                    master=TALOS_TRY_MASTER,
                    user='sendchange',
                    branch='mac',
                    files=[WithProperties(PACKAGE_URL)],
                    ),
]

firefox_sendchange_mac_builder = {
    'name': "Try server mac builder",
    'slavenames': BuildSlaves.Mac,
    'builddir': "sendchange-mac",
    'factory': factory.BuildFactory(firefox_sendchange_mac_steps),
    'category': "Sendchange",
}
builders.append(firefox_sendchange_mac_builder)

firefox_sendchange_win32_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rmdir", "/s", "/q", "mozilla"],
                    workdir=".",
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    timeout=3600, # 1 hour
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="set | sort",
                    env=MozillaEnvironments['tryserver']),

    s(MozillaClientMk, cvsroot=CVSROOT),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-win32",
                                patchDir="patches/"),

    s(ShellCommand, name="source checkout",
                    description=["fetching source"],
                    descriptionDone=["source"],
                    command=["make", "-f", "client.mk", "checkout"],
                    workdir="mozilla",
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    env=MozillaEnvironments['tryserver']),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=True,
                            flunkOnFailure=True,
                            workdir="mozilla"),
    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat",".mozconfig"],
                    workdir="mozilla",
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    workdir="mozilla",
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    timeout=3600,
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="packaging (zip)",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "package",
                             WithProperties(''.join(["PKG_BASENAME=%s",
                                            "-%s-win32" % PKG_BASENAME]),
                                            "identifier")],
                    workdir="mozilla/%s" % OBJDIR,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="chmod package (zip)",
                    command=["chmod", "666",
                        WithProperties(''.join(["mozilla/%s/dist/" \
                            % OBJDIR,
                            "%s", "-%s-win32.zip" % PKG_BASENAME]),
                            "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaCreateUploadDirectory,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                slavedir="mozilla/%s/dist" % OBJDIR,
                # the identifier gets prepended to this in the BuildStep
                baseFilename="%s-win32.zip" % PKG_BASENAME,
                scpString=SCP_STRING,
                haltOnFailure=False,
                flunkOnFailure=False,
                workdir="."),

    s(SendChangeStep,
                    master=TALOS_TRY_MASTER,
                    user='sendchange',
                    branch='win32',
                    files=[WithProperties(PACKAGE_URL)],
                    ),

    s(ShellCommand, name="packaging (exe)",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "installer",
                             WithProperties(''.join(["PKG_BASENAME=%s",
                                            "-%s-win32" % PKG_BASENAME]),
                                            "identifier")],
                    workdir="mozilla/%s" % OBJDIR,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="chmod package (exe)",
                    command=["chmod", "666",
                        WithProperties(''.join(["mozilla/%s/dist/install/sea/" \
                            % OBJDIR,
                            "%s", "-%s-win32.installer.exe" % PKG_BASENAME]),
                            "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                slavedir="mozilla/%s/dist/install/sea" % OBJDIR,
                # the identifier gets prepended to this in the BuildStep
                baseFilename="%s-win32.installer.exe" % PKG_BASENAME,
                scpString=SCP_STRING,
                haltOnFailure=False,
                flunkOnFailure=False,
                workdir="."),

    s(ShellCommand,
                name="build symbols",
                command=["make", "-C", OBJDIR, "buildsymbols"],
                haltOnFailure=True,
                flunkOnFailure=False,
                env=MozillaEnvironments['tryserver'],
                workdir="mozilla"),

     s(ShellCommand,
                name="upload symbols",
                command=["make", "-C", OBJDIR, "uploadsymbols"],
                haltOnFailure=True,
                flunkOnFailure=False,
                env=MozillaEnvironments['tryserver'],
                workdir="mozilla"),
]

firefox_sendchange_win32_builder = {
	'name': "Try server win32 builder",
	'slavenames': BuildSlaves.Win32,
	'builddir': "sendchange-win32",
	'factory': factory.BuildFactory(firefox_sendchange_win32_steps),
	'category': "Sendchange",
}
builders.append(firefox_sendchange_win32_builder)


firefox_sendchange_hg_linux_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla/"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="."),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="env | sort"),

    s(MozillaTryServerHgClone, workdir="mozilla"),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-linux",
                                patchDir="patches/"),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=False,
                            flunkOnFailure=True,
                            workdir="mozilla",
                            isOptional=True),

    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True,
                          isOptional=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat", ".mozconfig"],
                    workdir="mozilla"),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    timeout=3600,
                    workdir="mozilla"),

    s(ShellCommand, name="packaging",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "package",
                            WithProperties(''.join(["PKG_BASENAME=%s",
                                           "-%s-linux" % PKG_BASENAME]),
                                           "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="mozilla/%s" % OBJDIR),

    s(ShellCommand, name="chmod package",
                    command=["chmod", "666",
                             WithProperties(''.join(["mozilla/%s/dist/" \
                                         % OBJDIR,
                                         "%s",
                                         "-%s-linux.tar.bz2" % PKG_BASENAME]),
                                         "identifier")],

                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaCreateUploadDirectory,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                    slavedir="mozilla/%s/dist" % OBJDIR,
                    baseFilename="%s-linux.tar.bz2" % PKG_BASENAME,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(SendChangeStep,
                    master=TALOS_TRY_MASTER,
                    user='sendchange',
                    branch='linux',
                    files=[WithProperties(PACKAGE_URL)],
                    ),
]

firefox_sendchange_linux_hg_builder = {
        'name': "Try server linux hg builder",
        'slavenames': BuildSlaves.Linux,
        'builddir': "sendchange-linux-hg",
        'factory': factory.BuildFactory(firefox_sendchange_hg_linux_steps),
        'category': "Sendchange",
}
builders.append(firefox_sendchange_linux_hg_builder)

firefox_sendchange_hg_mac_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla/"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="."),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="env | sort"),

    s(MozillaTryServerHgClone, workdir="mozilla/"),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-mac",
                                patchDir="patches/"),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=True,
                            flunkOnFailure=True,
                            workdir="mozilla",
                            isOptional=True),

    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True,
                          isOptional=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat", ".mozconfig"],
                    workdir="mozilla"),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    timeout=3600,
                    workdir="mozilla"),

    s(ShellCommand, name="packaging",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "package",
                             WithProperties(''.join(["PKG_BASENAME=%s",
                                            "-%s-mac" % PKG_BASENAME]),
                                            "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="mozilla/%s/ppc" % OBJDIR),

    s(ShellCommand, name="chmod package",
                    # this gets really ugly here, but it translates to this:
                    # mozilla/$OBJDIR/ppc/dist/$IDENTIFIER-$PKG_BASENAME-mac.dmg
                    command=["chmod", "666",
                             WithProperties(''.join(["mozilla/%s/ppc/dist/" \
                                              % OBJDIR,
                                              "%s",
                                              "-%s-mac.dmg" % PKG_BASENAME]),
                                              "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaCreateUploadDirectory,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                    slavedir="mozilla/%s/ppc/dist" % OBJDIR,
                    baseFilename="%s-mac.dmg" % PKG_BASENAME,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(SendChangeStep,
                    master=TALOS_TRY_MASTER,
                    user='sendchange',
                    branch='mac',
                    files=[WithProperties(PACKAGE_URL)],
                    ),
]

firefox_sendchange_mac_hg_builder = {
        'name': "Try server mac hg builder",
        'slavenames': BuildSlaves.Mac,
        'builddir': "sendchange-mac-hg",
        'factory': factory.BuildFactory(firefox_sendchange_hg_mac_steps),
        'category': "Sendchange",
}
builders.append(firefox_sendchange_mac_hg_builder)

firefox_sendchange_hg_win32_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla/"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir=".",
                    timeout=3600, # 1 hour
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="set | sort",
                    env=MozillaEnvironments['tryserver']),

    s(MozillaTryServerHgClone, workdir="mozilla/"),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-win32",
                                patchDir="patches/"),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=True,
                            flunkOnFailure=True,
                            workdir="mozilla",
                            isOptional=True),

    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True,
                          isOptional=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat", ".mozconfig"],
                    workdir="mozilla",
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="mozilla",
                    timeout=3600,
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="packaging (zip)",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "package",
                             WithProperties(''.join(["PKG_BASENAME=%s",
                                            "-%s-win32" % PKG_BASENAME]),
                                            "identifier")],
                    workdir="mozilla/%s" % OBJDIR,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="chmod package (zip)",
                    command=["chmod", "666",
                        WithProperties(''.join(["mozilla/%s/dist/" \
                            % OBJDIR,
                            "%s", "-%s-win32.zip" % PKG_BASENAME]),
                            "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaCreateUploadDirectory,
                    scpString=SCP_STRING,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                slavedir="mozilla/%s/dist" % OBJDIR,
                # the identifier gets prepended to this in the BuildStep
                baseFilename="%s-win32.zip" % PKG_BASENAME,
                scpString=SCP_STRING,
                haltOnFailure=False,
                flunkOnFailure=False,
                workdir="."),

    s(SendChangeStep,
                    master=TALOS_TRY_MASTER,
                    user='sendchange',
                    branch='win32',
                    files=[WithProperties(PACKAGE_URL)],
                    ),

    s(ShellCommand, name="packaging (exe)",
                    description=["creating package"],
                    descriptionDone=["packaging"],
                    command=["make", "installer",
                             WithProperties(''.join(["PKG_BASENAME=%s",
                                            "-%s-win32" % PKG_BASENAME]),
                                            "identifier")],
                    workdir="mozilla/%s" % OBJDIR,
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="chmod package (exe)",
                    command=["chmod", "666",
                        WithProperties(''.join(["mozilla/%s/dist/install/sea/" \
                            % OBJDIR,
                            "%s", "-%s-win32.installer.exe" % PKG_BASENAME]),
                            "identifier")],
                    haltOnFailure=False,
                    flunkOnFailure=False,
                    workdir="."),

    s(MozillaUploadTryBuild,
                slavedir="mozilla/%s/dist/install/sea" % OBJDIR,
                # the identifier gets prepended to this in the BuildStep
                baseFilename="%s-win32.installer.exe" % PKG_BASENAME,
                scpString=SCP_STRING,
                haltOnFailure=False,
                flunkOnFailure=False,
                workdir="."),

    s(ShellCommand,
                name="build symbols",
                command=["make", "-C", OBJDIR, "buildsymbols"],
                haltOnFailure=True,
                flunkOnFailure=False,
                env=MozillaEnvironments['tryserver'],
                workdir="mozilla"),

     s(ShellCommand,
                name="upload symbols",
                command=["make", "-C", OBJDIR, "uploadsymbols"],
                haltOnFailure=True,
                flunkOnFailure=False,
                env=MozillaEnvironments['tryserver'],
                workdir="mozilla"),
]

firefox_sendchange_win32_hg_builder = {
        'name': "Try server win32 hg builder",
        'slavenames': BuildSlaves.Win32,
        'builddir': "sendchange-win32-hg",
        'factory': factory.BuildFactory(firefox_sendchange_hg_win32_steps),
        'category': "Sendchange",
}
builders.append(firefox_sendchange_win32_hg_builder)

firefox_sendchange_linux_unittest_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla/"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="."),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="env | sort"),

    s(MozillaTryServerHgClone, workdir="mozilla"),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-linux-unittest",
                                patchDir="patches/"),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=False,
                            flunkOnFailure=True,
                            workdir="mozilla",
                            isOptional=True),

    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True,
                          isOptional=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat", ".mozconfig"],
                    workdir="mozilla"),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    timeout=3600,
                    workdir="mozilla"),

    s(unittest.MozillaCheck,
      test_name="check",
      warnOnWarnings=True,
      workdir="mozilla/%s" % OBJDIR,
      timeout=5*60, # 5 minutes.
    ),

    s(unittest.MozillaCheck,
      test_name="xpcshell-tests",
      warnOnWarnings=True,
      workdir="mozilla/%s" % OBJDIR,
      timeout=5*60, # 5 minutes.
    ),

    s(unittest.CreateProfile, workdir="mozilla",
                              warnOnWarnings=True,
                              command = "python testing/tools/profiles/createTestingProfile.py --clobber --binary %s/dist/bin/firefox" % OBJDIR,
                              env=MozillaEnvironments['linux-centos-unittest'],
                              clobber=True)
]

for test_name in ('reftest', 'crashtest'): 
    firefox_sendchange_linux_unittest_steps.append(
        s(unittest.MozillaReftest, 
             test_name=test_name, 
             warnOnWarnings=True,
             workdir="mozilla/objdir",
             env=MozillaEnvironments['linux-centos-unittest'],
             timeout=60*5))

for test_name in ('mochitest-plain', 'mochitest-chrome', 'mochitest-browser-chrome', 'mochitest-a11y'): 
    firefox_sendchange_linux_unittest_steps.append(
        s(unittest.MozillaMochitest,
                test_name=test_name,
                warnOnWarnings=True,
                env=MozillaEnvironments['linux-centos-unittest'],
                workdir="mozilla/objdir",
                timeout=60*5))                                                      


firefox_sendchange_linux_unittest_builder = {
        'name': "Try linux hg unittest builder",
        'slavenames': BuildSlaves.Linux,
        'builddir': "sendchange-linux-unittest",
        'factory': factory.BuildFactory(firefox_sendchange_linux_unittest_steps),
        'category': "Sendchange",
}
builders.append(firefox_sendchange_linux_unittest_builder)

firefox_sendchange_mac_unittest_steps = [
    s(MozillaTryProcessing),
    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla/"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="."),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="env | sort"),

    s(MozillaTryServerHgClone, workdir="mozilla/"),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-mac-unittest",
                                patchDir="patches/"),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=True,
                            flunkOnFailure=True,
                            workdir="mozilla",
                            isOptional=True),

    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True,
                          isOptional=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat", ".mozconfig"],
                    workdir="mozilla"),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    timeout=3600,
                    workdir="mozilla"),

    s(unittest.MozillaCheck,
      test_name="check",
      warnOnWarnings=True,
      workdir="mozilla/%s" % OBJDIR,
      timeout=5*60, # 5 minutes.
    ),

    s(unittest.MozillaCheck,
      test_name="xpcshell-tests",
      warnOnWarnings=True,
      workdir="mozilla/%s" % OBJDIR,
      timeout=5*60, # 5 minutes.
    ),

    s(unittest.CreateProfile, workdir="mozilla",
                              warnOnWarnings=True,
                              command = "python testing/tools/profiles/createTestingProfile.py --clobber --binary %s/dist/bin/firefox" % OBJDIR,
                              clobber=True)]
                              
for test_name in ('reftest', 'crashtest'): 
    firefox_sendchange_mac_unittest_steps.append(
        s(unittest.MozillaReftest, 
           test_name=test_name, 
           warnOnWarnings=True,
           workdir="mozilla/objdir",
           timeout=60*5))

for test_name in ('mochitest-plain', 'mochitest-chrome', 'mochitest-browser-chrome'): 
    firefox_sendchange_mac_unittest_steps.append(
        s(unittest.MozillaMochitest,
            test_name=test_name,
            warnOnWarnings=True,
            workdir="mozilla/objdir",
            timeout=60*5))       


firefox_sendchange_mac_unittest_builder = {
        'name': "Try macosx hg unittest builder",
        'slavenames': BuildSlaves.Mac,
        'builddir': "sendchange-mac-unittest",
        'factory': factory.BuildFactory(firefox_sendchange_mac_unittest_steps),
        'category': "Sendchange",
}
builders.append(firefox_sendchange_mac_unittest_builder)

firefox_sendchange_win32_unittest_steps = [
    s(MozillaTryProcessing),
    s(TinderboxShellCommand, name="kill sh",
            description='kill sh',
            descriptionDone="killed sh",
            haltOnFailure=False,
            flunkOnFailure=False,
            command="pskill -t sh.exe",
            workdir="D:\\Utilities"),

    s(TinderboxShellCommand, name="kill make",
            description='kill make',
            descriptionDone="killed make",
            haltOnFailure=False,
            flunkOnFailure=False,
            command="pskill -t make.exe",
            workdir="D:\\Utilities"),

    s(TinderboxShellCommand, name="kill firefox",
            description='kill firefox',
            descriptionDone="killed firefox",
            haltOnFailure=False,
            flunkOnFailure=False,
            command="pskill -t firefox.exe",
            workdir="D:\\Utilities"),

    s(ShellCommand, name="remove source and obj dirs",
                    command=["rm", "-rf", "mozilla/"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir=".",
                    timeout=60*60, # 1 hour
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="dump env vars",
                    workdir=".",
                    command="set | sort",
                    env=MozillaEnvironments['tryserver']),

    s(MozillaTryServerHgClone, workdir="mozilla/"),

    s(MozillaDownloadMozconfig, mastersrc="mozconfig-win32-unittest",
                                patchDir="patches/"),

    s(MozillaPatchDownload, patchDir="patches/",
                            haltOnFailure=True,
                            flunkOnFailure=True,
                            workdir="mozilla",
                            isOptional=True),

    s(MozillaCustomPatch, workdir="mozilla",
                          haltOnFailure=True,
                          flunkOnFailure=True,
                          isOptional=True),

    s(ShellCommand, name="mozconfig contents",
                    command=["cat", ".mozconfig"],
                    workdir="mozilla",
                    env=MozillaEnvironments['tryserver']),

    s(ShellCommand, name="building",
                    description=["building"],
                    descriptionDone=["compile"],
                    command=["make", "-f", "client.mk", "build"],
                    haltOnFailure=True,
                    flunkOnFailure=True,
                    workdir="mozilla",
                    timeout=3600,
                    env=MozillaEnvironments['tryserver']),

    s(unittest.MozillaCheck,
      test_name="check",
      warnOnWarnings=True,
      workdir="mozilla/%s" % OBJDIR,
      env=MozillaEnvironments['tryserver'],
      timeout=5*60, # 5 minutes.
    ),

    s(unittest.MozillaCheck,
      test_name="xpcshell-tests",
      warnOnWarnings=True,
      workdir="mozilla/%s" % OBJDIR,
      env=MozillaEnvironments['tryserver'],
      timeout=5*60, # 5 minutes.
    ),

    s(unittest.CreateProfileWin, workdir="mozilla",
                                 warnOnWarnings=True,
                                 command = "python testing\\tools\\profiles\\createTestingProfile.py --clobber --binary %s\\dist\\bin\\firefox.exe" % OBJDIR,
                                 env=MozillaEnvironments['tryserver'],
                                 clobber=True)]

for test_name in ('reftest', 'crashtest'): 
    firefox_sendchange_win32_unittest_steps.append(
        s(unittest.MozillaReftest, 
            test_name=test_name, 
            warnOnWarnings=True,
            workdir="mozilla/objdir",
            env=MozillaEnvironments['tryserver'],
            timeout=60*5))
         
for test_name in ('mochitest-plain', 'mochitest-chrome', 'mochitest-browser-chrome', 'mochitest-a11y'): 
    firefox_sendchange_win32_unittest_steps.append(
        s(unittest.MozillaMochitest,
            test_name=test_name,
            warnOnWarnings=True,
            env=MozillaEnvironments['tryserver'],
            workdir="mozilla/objdir",
            timeout=60*5))                                                    

firefox_sendchange_win32_unittest_builder = {
        'name': "Try win32 hg unittest builder",
        'slavenames': BuildSlaves.Win32,
        'builddir': "sendchange-win32-unittest",
        'factory': factory.BuildFactory(firefox_sendchange_win32_unittest_steps),
        'category': "Sendchange",
}
builders.append(firefox_sendchange_win32_unittest_builder)

c['builders'] = builders
