###########################################################################
# mobile-staging master.cfg
###########################################################################

from buildbot.buildslave import BuildSlave
from buildbot.changes.pb import PBChangeSource
from buildbot.scheduler import Scheduler, Periodic
from buildbot.status import html, tinderbox
from buildbot.status.mail import MailNotifier

import buildbotcustom.process.mobiletestfactory
reload(buildbotcustom.process.mobiletestfactory)
from buildbotcustom.process.mobiletestfactory import MaemoUnittestFactory, \
  MobileParseTestLog, MaemoTalosFactory, RebootFactory

import buildbotcustom.changes.mobileftppoller
reload(buildbotcustom.changes.mobileftppoller)
from buildbotcustom.changes.mobileftppoller import MobileFtpPoller

import config
reload(config)
from config import BRANCHES, SLAVES

c = BuildmasterConfig = {}
adminEmails = ['aki@mozilla.com', 'jford@mozilla.com']

c['debugPassword'] = "mozilla"
c['projectName'] = "Mobile Staging"
c['projectURL'] = "http://mobile-master.mv.mozilla.com:8011/"
c['buildbotURL'] = "http://mobile-master.mv.mozilla.com:8011/"
c['slavePortnum'] = 9011

c['change_source'] = []
c['change_source'].append(PBChangeSource())

c['slaves'] = []
for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, 'm0b1l3', max_builds=1))

c['status'] = []
c['status'].append(html.WebStatus(http_port=8011, allowForce=True))

c['status'].append(MailNotifier(
    fromaddr="cltbld@mobile-master.mv.mozilla.com",
    sendToInterestedUsers=False,
    extraRecipients=adminEmails,
    mode="failing",
    builders=None,
    relayhost="smtp.mozilla.org"
))

c['schedulers'] = []
c['builders'] = []

for branchName in sorted(BRANCHES.keys()):
    branch=BRANCHES[branchName]
    unittestBuilders = []
    talosBuilders = []

    for platformName in sorted(branch['platforms'].keys()):
        platform = branch['platforms'][platformName]
        baseName = platform['base_name']

        c['change_source'].append(MobileFtpPoller(
            tree=branchName,
            branch='%s-unit' % platform['buildbot_branch'],
            pollInterval=platform['poll_interval'],
            ftpURLs=platform['unit_build_dirs'],
            searchString=platform['poller_string'],
        ))
        c['change_source'].append(MobileFtpPoller(
            tree=branchName,
            branch='%s-talos' % platform['buildbot_branch'],
            pollInterval=platform['poll_interval'],
            ftpURLs=platform['talos_build_dirs'],
            idleTimeout=2*60*60,
            searchString=platform['poller_string'],
        ))

        # Talos suites
        for talosSuiteName in sorted(platform['talos_suites'].keys()):
            resultsServer = branch['graph_server']
            talosSuite = platform['talos_suites'][talosSuiteName]
            if 'graph_server' in talosSuite:
                resultsServer = talosSuite['graph_server']
            talosFactory = MaemoTalosFactory(
                activeTests=talosSuite['active_tests'],
                talosConfigFile=talosSuite['config_file'],
                resultsServer=resultsServer,
                branch=platform['talos_branch'],
                disableJit=talosSuite['disable_jit'],
                reboot=True,
                hackTbPrint=1,
            )
            talosBuilder = {
                'name': talosSuite['suite_name'],
                'slavenames': platform['slaves'],
                'builddir': talosSuite['build_dir'],
                'factory': talosFactory,
                'category': platform['buildbot_branch'],
            }
            c['builders'].append(talosBuilder)
            talosBuilders.append(talosSuite['suite_name'])

        # Unit test suites
        for testName in sorted(platform['test_suites'].keys()):
            builderName = "%s %s" % (platform['base_name'], testName)
            testSuite = platform['test_suites'][testName]
            testFactory = MaemoUnittestFactory(
                activeTests={testName: testSuite},
                reboot=True
            )
            testBuilder = {
                'name': builderName,
                'slavenames': platform['slaves'],
                'builddir': "%s-%s" % (platform['buildbot_branch'], testName),
                'factory': testFactory,
                'category': platform['buildbot_branch'],
            }
            c['builders'].append(testBuilder)
            unittestBuilders.append(builderName)

    c['schedulers'].append(Scheduler(
        name="%s nightly scheduler" % branchName,
        branch='%s-talos' % platform['buildbot_branch'],
        treeStableTimer=5*60,
        builderNames=talosBuilders,
    ))
    c['schedulers'].append(Scheduler(
        name="%s tb scheduler" % branchName,
        branch='%s-unit' % platform['buildbot_branch'],
        treeStableTimer=5*60,
        builderNames=unittestBuilders,
    ))

    c['status'].append(tinderbox.TinderboxMailNotifier(
        fromaddr="mobile.buildbot@build.mozilla.org",
        tree=branch['tinderbox_tree'],
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
        relayhost="smtp.mozilla.org",
        builders=talosBuilders,
        logCompression="bzip2"
    ))
    c['status'].append(tinderbox.TinderboxMailNotifier(
        fromaddr="mobile.buildbot@build.mozilla.org",
        tree=branch['tinderbox_tree'],
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
        relayhost="smtp.mozilla.org",
        builders=unittestBuilders,
        logCompression="bzip2",
        errorparser="unittest"
    ))
