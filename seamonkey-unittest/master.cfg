# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010


# most of the config is in an external file
import config
reload(config)
from config import *


from buildbot.process import factory
from buildbot.scheduler import Scheduler, Nightly, Periodic
from buildbot.status.tinderbox import TinderboxMailNotifier
from buildbot.status.words import IRC
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

import buildbotcustom.changes.hgpoller
import buildbotcustom.steps.misc
import buildbotcustom.steps.test
import buildbotcustom.steps.transfer
import buildbotcustom.steps.updates
reload(buildbotcustom.changes.hgpoller)
reload(buildbotcustom.steps.misc)
reload(buildbotcustom.steps.test)
reload(buildbotcustom.steps.transfer)
reload(buildbotcustom.steps.updates)

from buildbotcustom.changes.hgpoller import HgPoller
from buildbotcustom.steps.test import AliveTest, CompareBloatLogs, \
  CompareLeakLogs, Codesighs
from buildbotcustom.steps.misc import SetMozillaBuildProperties, GetHgRevision
from buildbotcustom.steps.transfer import MozillaStageUpload
from buildbotcustom.steps.updates import CreateCompleteUpdateSnippet

import buildbotcustom.env
import buildbotcustom.unittest.steps
reload(buildbotcustom.env)
reload(buildbotcustom.unittest.steps)
from buildbotcustom.env import *
from buildbotcustom.unittest.steps import *
from buildbotcustom.steps.misc import CreateDir, TinderboxShellCommand

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

for name in BRANCHES.keys():
    # shorthand
    branch = BRANCHES[name]
    builders = []
    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        builders.append(branch['platforms'][platform]['name'])

    # Currently, each branch goes to a different tree
    # If this changes in the future this may have to be
    # moved out of the loop
    c['status'].append(TinderboxMailNotifier(
        fromaddr="seamonkey.buildbot@build.mozilla.org",
        tree=branch['tinderbox_tree'],
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
        relayhost="mail.build.mozilla.org",
        builders=builders,
        logCompression="bzip2",
        errorparser="unittest",
    ))

    c['status'].append(IRC(
        host='irc.mozilla.org',
        nick='sea-unit-bot',
        channels=['mozbot']
    ))

    # change sources
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=name,
        pushlogUrlOverride='%s%s/pushlog' % (HGURL, ADD_POLL_BRANCH),
        pollInterval=1*60
    ))
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=name,
        pushlogUrlOverride='%s%s/pushlog' % (HGURL, name),
        pollInterval=1*60
    ))

    # schedulers
    # this one gets triggered by the HG Poller
    c['schedulers'].append(Scheduler(
        name=name,
        branch=name,
        treeStableTimer=3*60,
        builderNames=builders
    ))
    c['schedulers'].append(Periodic(
        name='%s periodic' % name,
        builderNames=builders,
        branch=name,
        periodicBuildTimer=60*60*3 # 3 hours
    ))

    for platform in branch['platforms'].keys():
        # shorthand
        pf = branch['platforms'][platform]
        mozilla2_dep_unittest_factory = factory.BuildFactory()
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            command=['echo', WithProperties('Building on: %(slavename)s')],
            env=pf['env']
        ))
        if platform.startswith("win32"):
            # on Windows, we need to explicitely kill processes from failed runs
            mozilla2_dep_unittest_factory.addStep(TinderboxShellCommand(
                name="kill hg",
                description='kill hg',
                descriptionDone="killed hg",
                command="pskill -t hg.exe",
                workdir="D:\\PsTools"
            ))
            mozilla2_dep_unittest_factory.addStep(TinderboxShellCommand(
                name="kill sh",
                description='kill sh',
                descriptionDone="killed sh",
                command="pskill -t sh.exe",
                workdir="D:\\PsTools"
            ))
            mozilla2_dep_unittest_factory.addStep(TinderboxShellCommand(
                name="kill make",
                description='kill make',
                descriptionDone="killed make",
                command="pskill -t make.exe",
                workdir="D:\\PsTools"
            ))
            mozilla2_dep_unittest_factory.addStep(TinderboxShellCommand(
                name="kill seamonkey",
                description='kill seamonkey',
                descriptionDone="killed seamonkey",
                command="pskill -t seamonkey.exe",
                workdir="D:\\PsTools"
            ))
            mozilla2_dep_unittest_factory.addStep(TinderboxShellCommand(
                name="kill xpcshell",
                description='kill xpcshell',
                descriptionDone="killed xpcshell",
                command="pskill -t xpcshell.exe",
                workdir="D:\\PsTools"
            ))
        mozilla2_dep_unittest_factory.addStep(Mercurial(
            mode='update',
            baseURL=HGURL,
            defaultBranch=name,
            alwaysUseLatest=True
        ))
        changesetLink = '<a href=%s%s/rev' % (HGURL, name)
        changesetLink += '/%(got_revision)s title="Built from revision %(got_revision)s">rev:%(got_revision)s</a>'
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            command=['python', 'client.py', 'checkout'],
            description=['running', 'client.py', 'checkout'],
            descriptionDone=['client.py', 'checkout']
        ))
        mozilla2_dep_unittest_factory.addStep(GetHgRevision(
            workdir='build/mozilla'
        ))
        changesetLink = '<a href=%s%s/rev' % (HGURL, ADD_POLL_BRANCH)
        changesetLink += '/%(hg_revision)s title="Built from Mozilla revision %(hg_revision)s">moz:%(hg_revision)s</a>'
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            command=['echo', 'TinderboxPrint:', WithProperties(changesetLink)]
        ))
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            command=['rm', '-rfv', 'configs'],
            description=['removing', 'configs'],
            descriptionDone=['remove', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            command=['hg', 'clone', CONFIG_REPO_URL, 'configs'],
            description=['checking', 'out', 'configs'],
            descriptionDone=['checkout', 'configs'],
            haltOnFailure=True
        ))
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            # cp configs/seamonkey/$platform/mozconfig .mozconfig
            command=['cp', 'configs/%s/%s/mozconfig' % (CONFIG_SUBDIR,
                                                        platform),
                     '.mozconfig'],
            description=['copying', 'mozconfig'],
            descriptionDone=['copy', 'mozconfig'],
            haltOnFailure=True
        ))
        mozilla2_dep_unittest_factory.addStep(ShellCommand(
            command=['cat', '.mozconfig'],
        ))

        buildcmd = 'build'
        mozilla2_dep_unittest_factory.addStep(Compile(
            command=['make', '-f', 'client.mk', buildcmd],
            env=pf['env'],
            haltOnFailure=True,
            timeout=60*40
        ))

        if platform.startswith("linux"):
            mozilla2_dep_unittest_factory.addStep(MozillaCheck(
                timeout=60*40,
                workdir="build/objdir",
                env=MozillaEnvironments['linux-centos-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(CreateProfile(
                    workdir="build",
                    command = r'python mozilla/testing/tools/profiles/createTestingProfile.py --clobber --binary objdir/mozilla/dist/bin/seamonkey',
                    env=MozillaEnvironments['linux-centos-unittest'],
                    clobber=True,
                    warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaReftest(
                command = ["../../../objdir/mozilla/dist/bin/run-mozilla.sh",
                           "../../../objdir/mozilla/dist/bin/seamonkey",
                           "-P",
                           "default",
                           "-reftest",
                           "reftest.list"],
                workdir="build/mozilla/layout/reftests",
                timeout=2400,
                env=MozillaEnvironments['linux-centos-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaCrashtest(
                command = ["../../../objdir/mozilla/dist/bin/run-mozilla.sh",
                           "../../../objdir/mozilla/dist/bin/seamonkey",
                           "-P",
                           "default",
                           "-reftest",
                           "crashtests.list"],
                workdir="build/mozilla/testing/crashtest",
                env=MozillaEnvironments['linux-centos-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaMochitest(
                command = ["python",
                           "runtests.py",
                           "--appname=../../../dist/bin/seamonkey",
                           "--autorun",
                           "--console-level=INFO",
                           "--close-when-done",
                           "--leak-threshold=" + pf['mochitest_leakthreshold']],
                workdir="build/objdir/mozilla/_tests/testing/mochitest",
                timeout=2400,
                leakThreshold=pf['mochitest_leakthreshold'],
                env=MozillaEnvironments['linux-centos-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaMochichrome(
                command = ["python",
                           "runtests.py",
                           "--appname=../../../dist/bin/seamonkey",
                           "--chrome",
                           "--autorun",
                           "--console-level=INFO",
                           "--close-when-done",
                           "--leak-threshold=" + pf['mochichrome_leakthreshold']],
                workdir="build/objdir/mozilla/_tests/testing/mochitest",
                leakThreshold=pf['mochichrome_leakthreshold'],
                env=MozillaEnvironments['linux-centos-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaBrowserChromeTest(
                command = ["python",
                           "runtests.py",
                           "--appname=../../../dist/bin/seamonkey",
                           "--autorun",
                           "--browser-chrome",
                           "--close-when-done",
                           "--leak-threshold=" + pf['mochibrowser_leakthreshold']],
                workdir="build/objdir/mozilla/_tests/testing/mochitest",
                leakThreshold=pf['mochibrowser_leakthreshold'],
                env=MozillaEnvironments['linux-centos-unittest'],
                warnOnWarnings=True
            ))

        if platform.startswith("win32"):
            mozilla2_dep_unittest_factory.addStep(MozillaCheck(
                workdir="build\\objdir",
                timeout=60*40,
                env=MozillaEnvironments['win32-vc8-mozbuild-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(CreateProfileWin(
                workdir="build",
                env=MozillaEnvironments['win32-vc8-mozbuild-unittest'],
                command = r'python mozilla\testing\tools\profiles\createTestingProfile.py --clobber --binary objdir\mozilla\dist\bin\seamonkey.exe',
                clobber=True,
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaReftest(
                command = [r'..\..\..\objdir\mozilla\dist\bin\seamonkey.exe -P default -reftest reftest.list'],
                workdir="build\\mozilla\\layout\\reftests",
                timeout=2400,
                env=MozillaEnvironments['win32-vc8-mozbuild-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaCrashtest(
                command = [r'..\..\..\objdir\mozilla\dist\bin\seamonkey.exe -P default -reftest crashtests.list'],
                workdir="build\\mozilla\\testing\\crashtest",
                env=MozillaEnvironments['win32-vc8-mozbuild-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaMochitest(
                command = ['python runtests.py --appname=..\\..\\..\\dist\\bin\\seamonkey.exe --autorun --console-level=INFO --close-when-done --leak-threshold=%s' % pf['mochitest_leakthreshold']],
                workdir="build\\objdir\\mozilla\\_tests\\testing\\mochitest",
                timeout=2400,
                leakThreshold=pf['mochitest_leakthreshold'],
                env=MozillaEnvironments['win32-vc8-mozbuild-unittest'],
                warnOnWarnings=True
            ))
            # Can use the regular build step here. Perl likes the PATHs that way anyway.
            mozilla2_dep_unittest_factory.addStep(MozillaMochichrome(
                command = ['python runtests.py --appname=..\\..\\..\\dist\\bin\\seamonkey.exe --chrome --autorun --console-level=INFO --close-when-done --leak-threshold=%s' % pf['mochichrome_leakthreshold']],
                workdir="build\\objdir\\mozilla\\_tests\\testing\\mochitest",
                leakThreshold=pf['mochichrome_leakthreshold'],
                env=MozillaEnvironments['win32-vc8-mozbuild-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaBrowserChromeTest(
                command = ['python runtests.py --appname=..\\..\\..\\dist\\bin\\seamonkey.exe --autorun --browser-chrome --close-when-done --leak-threshold=%s' % pf['mochibrowser_leakthreshold']],
                workdir="build\\objdir\\mozilla\\_tests\\testing\\mochitest",
                leakThreshold=pf['mochibrowser_leakthreshold'],
                env=MozillaEnvironments['win32-vc8-mozbuild-unittest'],
                warnOnWarnings=True
            ))

        if platform.startswith("macosx"):
            mozilla2_dep_unittest_factory.addStep(MozillaCheck(
                timeout=60*40,
                workdir="build/objdir",
                env=MozillaEnvironments['mac-osx-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(CreateProfile(
                command = r'python mozilla/testing/tools/profiles/createTestingProfile.py --clobber --binary objdir/mozilla/dist/SeaMonkey.app/Contents/MacOS/seamonkey-bin',
                workdir="build",
                env=MozillaEnvironments['mac-osx-unittest'],
                clobber=True,
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaReftest(
                command = ["../../../objdir/mozilla/dist/SeaMonkey.app/Contents/MacOS/seamonkey-bin",
                           "-console",
                           "-P",
                           "default",
                           "-reftest",
                           "reftest.list"],
                workdir="build/mozilla/layout/reftests",
                timeout=2400,
                env=MozillaEnvironments['mac-osx-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaCrashtest(
                command = ["../../../objdir/mozilla/dist/SeaMonkey.app/Contents/MacOS/seamonkey-bin",
                           "-console",
                           "-P",
                           "default",
                           "-reftest",
                           "crashtests.list"],
                workdir="build/mozilla/testing/crashtest",
                env=MozillaEnvironments['mac-osx-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaMochitest(
                command = ["python",
                           "runtests.py",
                           "--appname=../../../dist/SeaMonkey.app/Contents/MacOS/seamonkey-bin",
                           "--autorun",
                           "--console-level=INFO",
                           "--close-when-done",
                           "--leak-threshold=" + pf['mochitest_leakthreshold']],
                workdir="build/objdir/mozilla/_tests/testing/mochitest",
                timeout=2400,
                leakThreshold=pf['mochitest_leakthreshold'],
                env=MozillaEnvironments['mac-osx-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaMochichrome(
                command = ["python",
                           "runtests.py",
                           "--appname=../../../dist/SeaMonkey.app/Contents/MacOS/seamonkey-bin",
                           "--chrome",
                           "--autorun",
                           "--console-level=INFO",
                           "--close-when-done",
                           "--leak-threshold=" + pf['mochichrome_leakthreshold']],
                workdir="build/objdir/mozilla/_tests/testing/mochitest",
                leakThreshold=pf['mochichrome_leakthreshold'],
                env=MozillaEnvironments['mac-osx-unittest'],
                warnOnWarnings=True
            ))
            mozilla2_dep_unittest_factory.addStep(MozillaBrowserChromeTest(
                command = ["python",
                           "runtests.py",
                           "--appname=../../../dist/SeaMonkey.app/Contents/MacOS/seamonkey-bin",
                           "--autorun",
                           "--browser-chrome",
                           "--close-when-done",
                           "--leak-threshold=" + pf['mochibrowser_leakthreshold']],
                workdir="build/objdir/mozilla/_tests/testing/mochitest",
                leakThreshold=pf['mochibrowser_leakthreshold'],
                env=MozillaEnvironments['mac-osx-unittest'],
                warnOnWarnings=True
            ))

        mozilla2_dep_unittest = {
            'name': pf['name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s' % (name, platform),
            'factory': mozilla2_dep_unittest_factory,
            'category': name,
        }
        c['builders'].append(mozilla2_dep_unittest)


####### STATUS TARGETS

from buildbot.status import html

c['status'].append(html.WebStatus(
    http_port=8010, allowForce=True
))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "SeaMonkey:hg:unittest"
c['projectURL'] = "http://wiki.mozilla.org/SeaMonkey:hg-based_build"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://cn-sea-qm-centos5-01.nl.mozilla.org:8010/"
