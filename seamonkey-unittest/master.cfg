# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010


# most of the config is in an external file
import config
reload(config)
from config import *

import buildbot.status.tinderbox
reload(buildbot.status.tinderbox)

from buildbot.scheduler import Nightly
from buildbot.status.tinderbox import TinderboxMailNotifier
from buildbot.status.words import IRC
from buildbot.steps.shell import WithProperties

import buildbotcustom.misc
import buildbotcustom.changes.hgpoller
import buildbotcustom.process.factory
import buildbotcustom.scheduler
reload(buildbotcustom.misc)
reload(buildbotcustom.changes.hgpoller)
reload(buildbotcustom.process.factory)
reload(buildbotcustom.scheduler)
from buildbotcustom.misc import isHgPollerTriggered
from buildbotcustom.changes.hgpoller import HgPoller, HgAllLocalesPoller
from buildbotcustom.process.factory import NightlyBuildFactory, \
  NightlyRepackFactory, UnittestBuildFactory, CodeCoverageFactory
from buildbotcustom.scheduler import MozScheduler

# l10n parallelization logic
import buildbotcustom.log
import buildbotcustom.l10n
reload(buildbotcustom.log)
reload(buildbotcustom.l10n)
from buildbotcustom.l10n import NightlyL10n, Scheduler as SchedulerL10n

# comm-central logic, temporary location
import ccfactory
reload(ccfactory)
from ccfactory import CCUnittestBuildFactory

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

for name in sorted(BRANCHES.keys()):
    # shorthand
    branch = BRANCHES[name]
    builders = []
    unittestBuilders = []
    nightlyBuilders = []
    weeklyBuilders = []
    # This dict provides a mapping between en-US nightly scheduler names
    # and l10n nightly scheduler names. It's filled out just below here.
    l10nNightlyBuilders = {}
    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        base_name =  branch['platforms'][platform]['base_name']
        #builders.append('%s build' % base_name)
        ## Skip l10n, unit tests and nightlies for debug builds
        #if platform.find('debug') >= 0:
        #    continue

        #builder = '%s nightly' % base_name
        #nightlyBuilders.append(builder)
        #if branch['enable_l10n'] and platform in ('linux','win32','macosx'):
        #    l10nNightlyBuilders[builder] = {} 
        #    l10nNightlyBuilders[builder]['l10n_builder'] = '%s l10n' % base_name
        #    l10nNightlyBuilders[builder]['platform'] = platform
        if branch['enable_unittests'] and platform in ('linux','win32','macosx'):
            unittestBuilders.append('%s unit test' % base_name) 
        #if branch['enable_codecoverage'] and platform in ('linux',):
        #    weeklyBuilders.append('%s code coverage' % branch['platforms'][platform]['base_name'])

    ## Currently, each branch goes to a different tree
    ## If this changes in the future this may have to be
    ## moved out of the loop
    #c['status'].append(TinderboxMailNotifier(
    #    fromaddr="seamonkey.buildbot@build.mozilla.org",
    #    tree=branch['tinderbox_tree'],
    #    extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
    #    relayhost="mail.build.mozilla.org",
    #    builders=builders + nightlyBuilders,
    #    logCompression="bzip2"
    #))
    # Separate notifier for unittests, since they need to be run through
    # the unittest errorparser
    c['status'].append(TinderboxMailNotifier(
        fromaddr="seamonkey.buildbot@build.mozilla.org",
        tree=branch['tinderbox_tree'],
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
        relayhost="mail.build.mozilla.org",
        builders=unittestBuilders,
        logCompression="bzip2",
        errorparser="unittest"
    ))

    if branch['enable_l10n']:
        l10n_builders = []
        for b in l10nNightlyBuilders:
            l10n_builders.append(l10nNightlyBuilders[b]['l10n_builder'])
        # This notifies all l10n related build objects to Mozilla-l10n
        c['status'].append(TinderboxMailNotifier(
            fromaddr="seamonkey.buildbot@build.mozilla.org",
            tree="Mozilla-l10n",
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="mail.build.mozilla.org",
            logCompression="bzip2",
            builders=l10n_builders,
            binaryURL="http://ftp.mozilla.org/pub/mozilla.org/seamonkey/nightly/latest-comm-central-l10n/"
        ))

        # We only want the builds from the specified builders
        # since their builds have a build property called "locale"
        c['status'].append(TinderboxMailNotifier(
            fromaddr="seamonkey.buildbot@build.mozilla.org",
            tree=WithProperties("Mozilla-l10n-%(locale)s"),
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="mail.build.mozilla.org",
            logCompression="bzip2",
            builders=l10n_builders,
            binaryURL="http://ftp.mozilla.org/pub/mozilla.org/seamonkey/nightly/latest-comm-central-l10n/"
        ))

    c['status'].append(IRC(
        host='irc.mozilla.org',
        nick=IRC_BOT_NAME,
        channels=IRC_BOT_CHANNELS
    ))

    # change sources
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=branch['repo_path'],
        pushlogUrlOverride='%s%s/pushlog' % (HGURL, branch['repo_path']),
        pollInterval=1*60
    ))
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=branch['repo_path'],
        pushlogUrlOverride='%s%s/pushlog' % (HGURL, MOZILLA_POLL_BRANCH),
        pollInterval=1*60
    ))

    if branch['enable_l10n']:
        hg_all_locales_poller = HgAllLocalesPoller(hgURL = HGURL,
                            repositoryIndex = branch['l10n_repo_path'],
                            pollInterval = 5*60)
        hg_all_locales_poller.parallelRequests = 1
        c['change_source'].append(hg_all_locales_poller)

    # schedulers
    # this one gets triggered by the HG Poller
    c['schedulers'].append(MozScheduler(
        name=name,
        branch=branch['repo_path'],
        treeStableTimer=3*60,
        idleTimeout=branch.get('idle_timeout', None),
        builderNames=builders + unittestBuilders,
        fileIsImportant=lambda c: isHgPollerTriggered(c, HGURL)
    ))

    # Now, setup the nightly en-US schedulers and maybe,
    # their downstream l10n ones
    for builder in nightlyBuilders:
        nightly_scheduler=Nightly(
            name=builder,
            branch=branch['repo_path'],
            hour=[0],
            builderNames=[builder]
        )
        c['schedulers'].append(nightly_scheduler)

        if branch['enable_l10n'] and builder in l10nNightlyBuilders:
            l10n_builder = l10nNightlyBuilders[builder]['l10n_builder']
            platform = l10nNightlyBuilders[builder]['platform']
            c['schedulers'].append(NightlyL10n(
                                   name=l10n_builder,
                                   platform=platform,
                                   hour=[4],
                                   builderNames=[l10n_builder],
                                   repoType='hg',
                                   branch=branch['repo_path'],
                                   baseTag='default',
                                   localesFile=branch['allLocalesFile']
                                  ))

    for builder in weeklyBuilders:
        weekly_scheduler=Nightly(
            name=builder,
            branch=branch['repo_path'],
            dayOfWeek=5, # Saturday
            hour=[0],
            builderNames=[builder],
        )
        c['schedulers'].append(weekly_scheduler)

    for platform in branch['platforms'].keys():
        # shorthand
        pf = branch['platforms'][platform]

        leakTest = False
        codesighs = False
        uploadPackages = False
        uploadSymbols = False
        if platform.find('win32') > -1 or platform.find('64') > -1:
            codesighs = False
        if 'upload_symbols' in pf and pf['upload_symbols']:
            uploadSymbols = True

        buildSpace = pf.get('build_space', DEFAULT_BUILD_SPACE)
        clobberTime = pf.get('clobber_time', DEFAULT_CLOBBER_TIME)

        if branch['enable_unittests']:
            if platform in ('linux','win32','macosx'):
                unittest_factory = CCUnittestBuildFactory(
                    platform=platform,
                    config_repo_path=CONFIG_REPO_PATH,
                    config_dir=CONFIG_SUBDIR,
                    objdir=OBJDIR_UNITTESTS,
                    productName=branch['product_name'],
                    brandName=branch['brand_name'],
                    mochitest_leak_threshold=pf['mochitest_leak_threshold'],
                    mochichrome_leak_threshold=pf['mochichrome_leak_threshold'],
                    mochibrowser_leak_threshold=pf['mochibrowser_leak_threshold'],
                    hgHost=HGHOST,
                    repoPath=branch['repo_path'],
                    buildToolsRepoPath=BUILD_TOOLS_REPO_PATH,
                    buildSpace=branch['unittest_build_space'],
                    clobberURL=BASE_CLOBBER_URL,
                    clobberTime=clobberTime,
                    buildsBeforeReboot=pf['builds_before_reboot']
                )
                unittest_builder = {
                    'name': '%s unit test' % pf['base_name'],
                    'slavenames': pf['slaves'],
                    'builddir': '%s-%s-unittest' % (name, platform),
                    'factory': unittest_factory,
                    'category': name,
                }
                c['builders'].append(unittest_builder)


####### STATUS TARGETS

from buildbot.status import html

c['status'].append(html.WebStatus(
    http_port=8010, allowForce=True
))

######## L10n Scheduler with multiple dispatchers
#
## for debugging purposes of the repack on locale change system
#buildbotcustom.log.init(
#    scheduler = buildbotcustom.log.DEBUG,
#    dispatcher = buildbotcustom.log.DEBUG
#)
#
#s = SchedulerL10n("l10n", "l10nbuilds.ini")
#c['schedulers'].append(s)
#
######## Release Automation
#
#import release_master
#reload(release_master)
#
#c['builders'].extend(release_master.builders)
#c['schedulers'].extend(release_master.schedulers)
#c['change_source'].extend(release_master.change_source)
#c['status'].extend(release_master.status)

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "SeaMonkey:hg:unittest"
c['projectURL'] = "http://wiki.mozilla.org/SeaMonkey:hg-based_build"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://cn-sea-qm-centos5-01.nl.mozilla.org:8010/"
