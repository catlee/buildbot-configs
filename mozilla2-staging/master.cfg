# -*- python -*-
# ex: set syntax=python:

# Shorthand
c = BuildmasterConfig = {}

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9010


# most of the config is in an external file
import config
reload(config)
from config import *

import buildbot.status.tinderbox
reload(buildbot.status.tinderbox)

from buildbot.scheduler import Scheduler, Nightly, Periodic
from buildbot.status.tinderbox import TinderboxMailNotifier
from buildbot.steps.shell import WithProperties

import buildbotcustom.misc
import buildbotcustom.changes.hgpoller
import buildbotcustom.process.factory
reload(buildbotcustom.misc)
reload(buildbotcustom.changes.hgpoller)
reload(buildbotcustom.process.factory)
from buildbotcustom.misc import isHgPollerTriggered
from buildbotcustom.changes.hgpoller import HgPoller
from buildbotcustom.process.factory import MercurialBuildFactory, RepackFactory

# l10n parallelization logic
import buildbotcustom.l10n.scheduler
reload(buildbotcustom.l10n.scheduler)
from buildbotcustom.l10n.scheduler import DependentL10n


c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

for name in sorted(BRANCHES.keys()):
    # shorthand
    branch = BRANCHES[name]
    builders = []
    nightlyBuilders = []
    # This dict provides a mapping between en-US nightly scheduler names
    # and l10n nightly scheduler names. It's filled out just below here.
    l10nNightlyBuilders = {}
    # generate a list of builders, nightly builders (names must be different)
    # for easy access
    for platform in branch['platforms'].keys():
        builders.append('%s build' % branch['platforms'][platform]['base_name'])
        # Skip the nightly builder for debug builds
        if platform.find('debug') == -1:
            builder = '%s nightly' % branch['platforms'][platform]['base_name']
            nightlyBuilders.append(builder)
            if branch['enable_l10n'] and platform in ('linux','win32','macosx'):
                l10nNightlyBuilders[builder] = \
                  '%s l10n nightly' % branch['platforms'][platform]['base_name']

    # Currently, each branch goes to a different tree
    # If this changes in the future this may have to be
    # moved out of the loop
    c['status'].append(TinderboxMailNotifier(
        fromaddr="mozilla2.buildbot@build.mozilla.org",
        tree=branch['tinderbox_tree'],
        extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
        relayhost="mail.build.mozilla.org",
        builders=builders + nightlyBuilders,
        logCompression="bzip2"
    ))

    if branch['enable_l10n']:
        # This notifies all l10n related build objects to Mozilla-l10n
        c['status'].append(TinderboxMailNotifier(
            fromaddr="bootstrap@mozilla.com",
            tree="MozillaStaging",
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="mail.build.mozilla.org",
            logCompression="bzip2",
            builders=l10nNightlyBuilders.values(),
            binaryURL="http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-central-l10n/"
        ))

        # We only want the builds from the specified builders
        # since their builds have a build property called "locale"
        c['status'].append(TinderboxMailNotifier(
            fromaddr="bootstrap@mozilla.com",
            tree=WithProperties("MozillaStaging-%(locale)s"),
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="mail.build.mozilla.org",
            logCompression="bzip2",
            builders=l10nNightlyBuilders.values(),
            binaryURL="http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-central-l10n/"
        ))

    # change sources
    c['change_source'].append(HgPoller(
        hgURL=HGURL,
        branch=branch['repo_path'],
        pushlogUrlOverride='%s/%s/index.cgi/pushlog' % (HGURL,
                                                        branch['repo_path']),
        pollInterval=1*60
    ))

    # schedulers
    # this one gets triggered by the HG Poller
    c['schedulers'].append(Scheduler(
        name=name,
        branch=branch['repo_path'],
        treeStableTimer=3*60,
        builderNames=builders,
        fileIsImportant=lambda c: isHgPollerTriggered(c, HGURL)
    ))

    if branch['periodic_scheduler_period'] > 0:
        c['schedulers'].append(Periodic(
              name='%s periodic' % name,
              builderNames=builders,
              branch=branch['repo_path'],
              periodicBuildTimer=branch['periodic_scheduler_period']
        ))

    # Now, setup the nightly en-US schedulers and maybe,
    # their downstream l10n ones
    for builder in nightlyBuilders:
        nightly_scheduler=Nightly(
            name=builder,
            branch=branch['repo_path'],
            hour=[2],
            builderNames=[builder]
        )
        c['schedulers'].append(nightly_scheduler)

        if branch['enable_l10n'] and builder in l10nNightlyBuilders:
            l10n_builder = l10nNightlyBuilders[builder]
            c['schedulers'].append(DependentL10n(
                name=l10n_builder,
                # l10n nightlies are done after the en-US one finishes
                upstream=nightly_scheduler,
                builderNames=[l10n_builder],
                repoType='hg',
                repoPath=branch['repo_path'],
                localesFile=branch['allLocalesFile']
            ))

    for platform in sorted(branch['platforms'].keys()):
        # shorthand
        pf = branch['platforms'][platform]

        leakTest = False
        codesighs = True
        uploadPackages = True
        uploadSymbols = False
        if platform.find('-debug') > -1:
            leakTest = True
            codesighs = False
            uploadPackages = False
        if platform.find('win32') > -1 or platform.find('64') > -1:
            codesighs = False
        if 'upload_symbols' in pf and pf['upload_symbols']:
            uploadSymbols = True

        buildSpace = pf.get('build_space', DEFAULT_BUILD_SPACE)

        mozilla2_dep_factory = MercurialBuildFactory(
            env=pf['env'],
            objdir=pf['platform_objdir'],
            platform=platform,
            branch=branch['repo_path'],
            sourceRepo=HGURL,
            buildToolsRepo=BUILD_TOOLS_REPO_URL,
            configRepo=CONFIG_REPO_URL,
            configSubDir=CONFIG_SUBDIR,
            profiledBuild=pf['profiled_build'],
            mozconfig=pf['mozconfig'],
            stageServer=STAGE_SERVER,
            stageUsername=STAGE_USERNAME,
            stageGroup=STAGE_GROUP,
            stageSshKey=STAGE_SSH_KEY,
            stageBasePath=STAGE_BASE_PATH,
            graphServer=GRAPH_SERVER,
            graphSelector=GRAPH_SELECTOR,
            graphBranch=branch['major_version'],
            baseName=pf['base_name'],
            leakTest=leakTest,
            codesighs=codesighs,
            uploadPackages=uploadPackages,
            uploadSymbols=False,
            buildSpace=buildSpace,
        )
        mozilla2_dep_builder = {
            'name': '%s build' % pf['base_name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s' % (name, platform),
            'factory': mozilla2_dep_factory,
            'category': name,
        }
        c['builders'].append(mozilla2_dep_builder)

        # skip nightlies for debug builds
        if platform.find('debug') > -1:
             continue

        mozilla2_nightly_factory = MercurialBuildFactory(
            env=pf['env'],
            objdir=pf['platform_objdir'],
            platform=platform,
            branch=branch['repo_path'],
            sourceRepo=HGURL,
            buildToolsRepo=BUILD_TOOLS_REPO_URL,
            configRepo=CONFIG_REPO_URL,
            configSubDir=CONFIG_SUBDIR,
            profiledBuild=pf['profiled_build'],
            mozconfig=pf['mozconfig'],
            stageServer=STAGE_SERVER,
            stageUsername=STAGE_USERNAME,
            stageGroup=STAGE_GROUP,
            stageSshKey=STAGE_SSH_KEY,
            stageBasePath=STAGE_BASE_PATH,
            codesighs=False,
            uploadPackages=uploadPackages,
            uploadSymbols=uploadSymbols,
            nightly=True,
            createSnippet=branch['create_snippet'],
            ausBaseUploadDir=branch['aus2_base_upload_dir'],
            updatePlatform=pf['update_platform'],
            downloadBaseURL=DOWNLOAD_BASE_URL,
            ausUser=AUS2_USER,
            ausHost=AUS2_HOST,
            buildSpace=buildSpace,
        )

        mozilla2_nightly_builder = {
            'name': '%s nightly' % pf['base_name'],
            'slavenames': pf['slaves'],
            'builddir': '%s-%s-nightly' % (name, platform),
            'factory': mozilla2_nightly_factory,
            'category': name,
        }
        c['builders'].append(mozilla2_nightly_builder)

        if branch['enable_l10n']:
            if platform in ('linux','win32','macosx'):
                mozilla2_l10n_nightly_factory = RepackFactory(
                    branch=name,
                    #TODO - remove 'project' when bug 462179 gets fixed
                    project='firefox',
                    enUSBinaryURL=branch['enUS_binaryURL'],
                    stageServer=STAGE_SERVER,
                    stageUsername=STAGE_USERNAME,
                    uploadPath=branch['l10nUploadPath'],
                    repoPath=branch['repo_path'],
                    l10nRepoPath=branch['l10n_repo_path'],
                    buildToolsRepo=BUILD_TOOLS_REPO_URL,
                    buildSpace=2,
                )
                mozilla2_l10n_nightly_builder = {
                    'name': '%s l10n nightly' % pf['base_name'],
                    'slavenames': pf['slaves'],
                    'builddir': '%s-%s-l10n-nightly' % (name, platform),
                    'factory': mozilla2_l10n_nightly_factory,
                    'category': name,
                }
                c['builders'].append(mozilla2_l10n_nightly_builder)

####### STATUS TARGETS

from buildbot.status import html

c['status'].append(html.WebStatus(
    http_port=8010, allowForce=True
))

####### Release Automation

import release_master
reload(release_master)

c['builders'].extend(release_master.builders)
c['schedulers'].extend(release_master.schedulers)
c['change_source'].extend(release_master.change_source)
c['status'].extend(release_master.status)

####### Unit Tests

import unittest_master
reload(unittest_master)

c['builders'].extend(unittest_master.builders)
c['schedulers'].extend(unittest_master.schedulers)
c['change_source'].extend(unittest_master.change_source)
c['status'].extend(unittest_master.status)

####### Mobile

import mobile_master
reload(mobile_master)

c['builders'].extend(mobile_master.builders)
c['schedulers'].extend(mobile_master.schedulers)
c['change_source'].extend(mobile_master.change_source)
c['status'].extend(mobile_master.status)

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Mozilla 2"
c['projectURL'] = "http://wiki.mozilla.org/Mozilla_2"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://staging-master.build.mozilla.org:8010/"
