# import/reload dance so that reconfigs work
# buildbotcustom.misc has to be imported/reloaded prior to master_localconfig
# so that the fastRegexes don't get reset
import buildbotcustom.misc
import master_common
import master_localconfig
import config
reload(buildbotcustom.misc)
reload(master_common)
reload(master_localconfig)
reload(config)

from master_common import BuildmasterConfig
c = BuildmasterConfig
c.update(master_localconfig.BuildmasterConfig)

from config import BRANCHES, PROJECTS
from master_localconfig import ACTIVE_BRANCHES, ACTIVE_PROJECTS, SLAVES

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords
from buildbot.buildslave import BuildSlave

for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1))

for branch in BRANCHES:
    BRANCHES[branch]['l10n_slaves'] = SLAVES

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, mergeBuildObjects

from buildbot.schedulers.triggerable import Triggerable

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch)
    # No change sources here please!
    c['builders'].extend(branchObjects['builders'])
    c['status'].extend(branchObjects['status'])
    # We need just the triggerable schedulers here
    for s in branchObjects['schedulers']:
        if isinstance(s, Triggerable):
            c['schedulers'].append(s)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    c = mergeBuildObjects(c, projectObjects)

import passwords
reload(passwords)
from passwords import BBDB_URL
c['db_url'] = BBDB_URL
c['db_poll_interval'] = 60
c['multiMaster'] = True

c['mergeRequests'] = buildbotcustom.misc.mergeRequests

# Give the release builders priority over other builders
def prioritizeBuilders(botmaster, builders):
    def sortkey(builder):
        builds = builder.getBuildable()
        if builds:
            # The builder that gets sorted first, gets run first, but the build
            # request priorities are in ascending order (higher priority gets
            # run next), so flip the sign of the priority so that higher
            # priorities sort to the front
            req_priority = -builds[0].priority
            submitted_at = builds[0].submittedAt
        else:
            req_priority = 0
            submitted_at = None

        if builder.builder_status.category == 'release':
            priority = 0
        else:
            priority = 1

        return priority, req_priority, submitted_at
    builders.sort(key=sortkey)
    return builders
c['prioritizeBuilders'] = prioritizeBuilders
