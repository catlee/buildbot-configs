# import/reload dance so that reconfigs work
# buildbotcustom.misc has to be imported/reloaded prior to master_localconfig
# so that the fastRegexes don't get reset
import buildbotcustom.misc
import master_common
import master_localconfig
import config
reload(buildbotcustom.misc)
reload(master_common)
reload(master_localconfig)
reload(config)

from master_common import BuildmasterConfig
c = BuildmasterConfig
c.update(master_localconfig.BuildmasterConfig)

from config import BRANCHES, PROJECTS
from master_localconfig import ACTIVE_BRANCHES, ACTIVE_PROJECTS, SLAVES, \
         ENABLE_RELEASES, STAGING, RESERVED_SLAVES, ACTIVE_RELEASE_BRANCHES

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords
from buildbot.buildslave import BuildSlave

for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1))

for branch in BRANCHES:
    BRANCHES[branch]['l10n_slaves'] = SLAVES

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, \
         mergeBuildObjects, setReservedFileName

from buildbot.schedulers.triggerable import Triggerable

buildObjects = {}

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch)
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

# We only want builders, status objects, and triggerable schedulers
c['builders'].extend(buildObjects['builders'])
c['status'].extend(buildObjects['status'])
for s in buildObjects['schedulers']:
    if isinstance(s, Triggerable):
        c['schedulers'].append(s)

if ENABLE_RELEASES:
    import buildbotcustom.process.release
    reload(buildbotcustom.process.release)
    from buildbotcustom.process.release import generateReleaseBranchObjects
    if RESERVED_SLAVES:
        setReservedFileName(RESERVED_SLAVES)
    for releaseBranch in ACTIVE_RELEASE_BRANCHES:
        releaseBranchConfig = {}
        if not STAGING:
            execfile("release-firefox-%s.py" % releaseBranch,
                releaseBranchConfig, releaseBranchConfig)
        else:
            execfile("staging_release-firefox-%s.py" % releaseBranch,
                releaseBranchConfig, releaseBranchConfig)
        branchConfig = BRANCHES[releaseBranchConfig['releaseConfig']['sourceRepoName']]
        releaseObjects = generateReleaseBranchObjects(releaseBranchConfig['releaseConfig'], branchConfig, staging=STAGING)
        for key in releaseObjects.keys():
            c[key].extend(releaseObjects[key])
        from buildbot.changes.pb import PBChangeSource
        if len([cs for cs in c['change_source'] if isinstance(cs, PBChangeSource)]) < 1:
            c['change_source'].append(PBChangeSource())

import passwords
reload(passwords)
from passwords import BBDB_URL
c['db_url'] = BBDB_URL
c['db_poll_interval'] = 60
c['multiMaster'] = True

c['mergeRequests'] = buildbotcustom.misc.mergeRequests

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig
