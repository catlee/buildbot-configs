# import/reload dance so that reconfigs work
import master_common
import master_localconfig
import config
import buildbotcustom.misc
reload(master_common)
reload(master_localconfig)
reload(config)
reload(buildbotcustom.misc)

from master_common import BuildmasterConfig
c = BuildmasterConfig
c.update(master_localconfig.BuildmasterConfig)

from config import BRANCHES
from master_localconfig import ACTIVE_BRANCHES, SLAVES

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords
from buildbot.buildslave import BuildSlave
for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1))

for branch in BRANCHES:
    BRANCHES[branch]['l10n_slaves'] = SLAVES

from buildbotcustom.misc import generateBranchObjects

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch)
    c['builders'].extend(branchObjects['builders'])
    c['status'].extend(branchObjects['status'])
    c['schedulers'].extend(branchObjects['schedulers'])
    c['change_source'].extend(branchObjects['change_source'])

c['db_url'] = "sqlite:///state.sqlite"

c['mergeRequests'] = buildbotcustom.misc.mergeRequests

# Give the release builders priority over other builders
def prioritizeBuilders(botmaster, builders):
    def sortkey(builder):
        builds = builder.getBuildable()
        if builds:
            # The builder that gets sorted first, gets run first, but the build
            # request priorities are in ascending order (higher priority gets
            # run next), so flip the sign of the priority so that higher
            # priorities sort to the front
            req_priority = -builds[0].priority
            submitted_at = builds[0].submittedAt
        else:
            req_priority = 0
            submitted_at = None

        if builder.builder_status.category == 'release':
            priority = 0
        else:
            priority = 1

        return priority, req_priority, submitted_at
    builders.sort(key=sortkey)
    return builders
c['prioritizeBuilders'] = prioritizeBuilders
