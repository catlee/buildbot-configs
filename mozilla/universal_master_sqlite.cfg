# import/reload dance so that reconfigs work
# buildbotcustom.misc has to be imported/reloaded prior to master_localconfig
# so that the fastRegexes don't get reset
# vim: ft=python
import buildbotcustom.misc
import master_common
import master_localconfig
import config
reload(buildbotcustom.misc)
reload(master_common)
reload(master_localconfig)
reload(config)

from master_common import BuildmasterConfig
c = BuildmasterConfig
for key, value in master_localconfig.BuildmasterConfig.items():
    if key in c:
        c[key].extend(value)
    else:
        c[key] = value

from config import BRANCHES, PROJECTS
from master_localconfig import ACTIVE_BRANCHES, ACTIVE_PROJECTS, SLAVES, \
         ENABLE_RELEASES, STAGING, RESERVED_SLAVES, ACTIVE_RELEASE_BRANCHES

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords
from buildbot.buildslave import BuildSlave
for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1))

for branch in BRANCHES:
    BRANCHES[branch]['l10n_slaves'] = SLAVES

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, \
    mergeBuildObjects, setReservedFileName

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

buildObjects = {'builders': [], 'status': [], 'change_source': [], 'schedulers': []}

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch)
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

# Remove duplicate change sources
for cs in buildObjects['change_source'][:]:
    while buildObjects['change_source'].count(cs) > 1:
        buildObjects['change_source'].remove(cs)

    assert buildObjects['change_source'].count(cs) == 1

c['builders'].extend(buildObjects['builders'])
c['status'].extend(buildObjects['status'])
c['change_source'].extend(buildObjects['change_source'])
c['schedulers'].extend(buildObjects['schedulers'])

if ENABLE_RELEASES:
    import buildbotcustom.process.release
    reload(buildbotcustom.process.release)
    from buildbotcustom.process.release import generateReleaseBranchObjects
    if RESERVED_SLAVES:
        setReservedFileName(RESERVED_SLAVES)
    for releaseBranch in ACTIVE_RELEASE_BRANCHES:
        releaseBranchConfig = {}
        releaseConfigFile = "release-firefox-%s.py" % releaseBranch
        if STAGING:
            releaseConfigFile = "staging_%s" % releaseConfigFile
        execfile(releaseConfigFile, releaseBranchConfig, releaseBranchConfig)
        branchConfig = BRANCHES[releaseBranchConfig['releaseConfig']['sourceRepositories']['mozilla']['name']]
        releaseObjects = generateReleaseBranchObjects(
            releaseBranchConfig['releaseConfig'], branchConfig,
            staging=STAGING,
            releaseConfigFile="mozilla/%s" % releaseConfigFile)
        for key in releaseObjects.keys():
            c[key].extend(releaseObjects[key])
        from buildbot.changes.pb import PBChangeSource
        if len([cs for cs in c['change_source'] if isinstance(cs, PBChangeSource)]) < 1:
            c['change_source'].append(PBChangeSource())

c['db_url'] = "sqlite:///state.sqlite"

c['mergeRequests'] = buildbotcustom.misc.mergeRequests

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig
