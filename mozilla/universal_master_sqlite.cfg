# import/reload dance so that reconfigs work
# buildbotcustom.misc has to be imported/reloaded prior to master_localconfig
# so that the fastRegexes don't get reset
import buildbotcustom.misc
import master_common
import master_localconfig
import config
reload(buildbotcustom.misc)
reload(master_common)
reload(master_localconfig)
reload(config)

from master_common import BuildmasterConfig
c = BuildmasterConfig
c.update(master_localconfig.BuildmasterConfig)

from config import BRANCHES, PROJECTS
from master_localconfig import ACTIVE_BRANCHES, ACTIVE_PROJECTS, SLAVES, \
         ENABLE_RELEASES, STAGING, RESERVED_SLAVES

import BuildSlaves
reload(BuildSlaves)
from BuildSlaves import SlavePasswords
from buildbot.buildslave import BuildSlave
for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, SlavePasswords[platform], max_builds=1))

for branch in BRANCHES:
    BRANCHES[branch]['l10n_slaves'] = SLAVES

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, \
    mergeBuildObjects, setReservedFileName

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

buildObjects = {}

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch)
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

c['builders'].extend(buildObjects['builders'])
c['status'].extend(buildObjects['status'])
c['change_source'].extend(buildObjects['change_source'])
c['schedulers'].extend(buildObjects['schedulers'])

if ENABLE_RELEASES:
    import buildbotcustom.process.release
    reload(buildbotcustom.process.release)
    import release_config
    reload(release_config)
    from buildbotcustom.process.release import generateReleaseBranchObjects
    from release_config import releaseConfig
    branchConfig = BRANCHES[releaseConfig['sourceRepoName']]
    if RESERVED_SLAVES:
        setReservedFileName(RESERVED_SLAVES)
    releaseObjects = generateReleaseBranchObjects(releaseConfig, branchConfig, staging=STAGING)
    for key in releaseObjects.keys():
        c[key].extend(releaseObjects[key])
    from buildbot.changes.pb import PBChangeSource
    c['change_source'].append(PBChangeSource())

c['db_url'] = "sqlite:///state.sqlite"

c['mergeRequests'] = buildbotcustom.misc.mergeRequests

# Give the release builders priority over other builders
def prioritizeBuilders(botmaster, builders):
    def sortkey(builder):
        builds = builder.getBuildable()
        if builds:
            # The builder that gets sorted first, gets run first, but the build
            # request priorities are in ascending order (higher priority gets
            # run next), so flip the sign of the priority so that higher
            # priorities sort to the front
            req_priority = -builds[0].priority
            submitted_at = builds[0].submittedAt
        else:
            req_priority = 0
            submitted_at = None

        if builder.builder_status.category == 'release':
            priority = 0
        else:
            priority = 1

        return priority, req_priority, submitted_at
    builders.sort(key=sortkey)
    return builders
c['prioritizeBuilders'] = prioritizeBuilders

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig
