# import/reload dance so that reconfigs work
# vim: ft=python
import buildbotcustom.misc
import master_common
import config
import master_localconfig
reload(buildbotcustom.misc)
reload(master_common)
reload(config)
reload(master_localconfig)

from master_common import BuildmasterConfig
c = BuildmasterConfig
for key, value in master_localconfig.BuildmasterConfig.items():
    if key in c:
        c[key].extend(value)
    else:
        c[key] = value

# Create our QueueDir objects
# This is reloaded in buildbotcustom.misc
from mozilla_buildtools.queuedir import QueueDir
commandsQueue = QueueDir('commands', '%s/commands' % master_localconfig.QUEUEDIR)

from config import BRANCHES, PROJECTS, SLAVES

ACTIVE_BRANCHES = [b for b in BRANCHES.keys() if b != 'mozilla-1.9.1']

ACTIVE_PROJECTS = PROJECTS.keys()

# generateBranchObjects breaks if there are no l10n_slaves, so we make it so
# there's an empty list for everything
from collections import defaultdict
for branch in BRANCHES:
    BRANCHES[branch]['l10n_slaves'] = defaultdict(list)

import buildbotcustom.status.mail
# Don't reload buildbotcustom.status.mail, it gets reloaded by misc

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, mergeBuildObjects
from buildbotcustom.status.mail import ChangeNotifier

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

buildObjects = {'status': [], 'change_source': [], 'schedulers': []}

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch)
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

# We only want the schedulers and change sources
c['schedulers'].extend(buildObjects['schedulers'])

# Remove duplicate change sources
for cs in buildObjects['change_source'][:]:
    while buildObjects['change_source'].count(cs) > 1:
        buildObjects['change_source'].remove(cs)

    assert buildObjects['change_source'].count(cs) == 1

c['change_source'].extend(buildObjects['change_source'])

# We also want ChangeNotifiers
for s in buildObjects['status']:
    if isinstance(s, ChangeNotifier):
        c['status'].append(s)

import passwords
reload(passwords)
from passwords import BBDB_URL
c['db_url'] = BBDB_URL
c['db_poll_interval'] = 10
c['multiMaster'] = True

if hasattr(passwords, 'PULSE_PASSWORD'):
    pulseQueue = QueueDir('pulse', '%s/pulse' % master_localconfig.QUEUEDIR)
    # Send pulse messages
    import re
    import buildbotcustom.status.pulse
    reload(buildbotcustom.status.pulse)
    from buildbotcustom.status.pulse import PulseStatus
    c['status'].append(PulseStatus(
        pulseQueue,
        ignoreBuilders=[re.compile('.*shadow-central.*'), re.compile('fuzzer-.*')],
        send_logs=False,
        ))

# c is shorthand for BuildmasterConfig, so make sure they still refer to the
# same thing
assert c is BuildmasterConfig
