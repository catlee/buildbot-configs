# import/reload dance so that reconfigs work
import master_common
import master_localconfig
import config
reload(master_common)
reload(master_localconfig)
reload(config)

from master_common import BuildmasterConfig
c = BuildmasterConfig
c.update(master_localconfig.BuildmasterConfig)

from config import BRANCHES, PROJECTS, SLAVES

# Taking out mozilla-2.0 until official branching happens
ACTIVE_BRANCHES = [b for b in BRANCHES.keys() if b not in ('mozilla-2.0',)]

ACTIVE_PROJECTS = PROJECTS.keys()

# generateBranchObjects breaks if there are no l10n_slaves, so we make it so
# there's an empty list for everything
from collections import defaultdict
for branch in BRANCHES:
    BRANCHES[branch]['l10n_slaves'] = defaultdict(list)

import buildbotcustom.misc
import buildbotcustom.status.mail
reload(buildbotcustom.misc)
# Don't reload buildbotcustom.status.mail, it gets reloaded by misc

from buildbotcustom.misc import generateBranchObjects, generateProjectObjects, mergeBuildObjects
from buildbotcustom.status.mail import ChangeNotifier

# Required for sendchange
from buildbot.changes.pb import PBChangeSource
c['change_source'].append(PBChangeSource())

buildObjects = {}

for branch in ACTIVE_BRANCHES:
    branchObjects = generateBranchObjects(BRANCHES[branch], branch)
    buildObjects = mergeBuildObjects(buildObjects, branchObjects)

for project in ACTIVE_PROJECTS:
    projectObjects = generateProjectObjects(project, PROJECTS[project], SLAVES)
    buildObjects = mergeBuildObjects(buildObjects, projectObjects)

# We only want the schedulers and change sources
c['schedulers'].extend(buildObjects['schedulers'])
c['change_source'].extend(buildObjects['change_source'])

# We also want ChangeNotifiers
for s in buildObjects['status']:
    if isinstance(s, ChangeNotifier):
        c['status'].append(s)

import passwords
reload(passwords)
from passwords import BBDB_URL
c['db_url'] = BBDB_URL
c['db_poll_interval'] = 10
c['multiMaster'] = True
