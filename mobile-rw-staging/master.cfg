###########################################################################
# mobile-staging master.cfg
###########################################################################

from buildbot.buildslave import BuildSlave
from buildbot.changes.pb import PBChangeSource
from buildbot.scheduler import Scheduler, Periodic
from buildbot.status import html, tinderbox
from buildbot.status.mail import MailNotifier

import buildbotcustom.process.mobiletestfactoryrw
reload(buildbotcustom.process.mobiletestfactoryrw)
from buildbotcustom.process.mobiletestfactoryrw import MobileUnittestFactory, \
 MobileTalosFactory

import buildbotcustom.changes.mobileftppoller
reload(buildbotcustom.changes.mobileftppoller)
from buildbotcustom.changes.mobileftppoller import MobileFtpPoller

import config
reload(config)
from config import BRANCHES, SLAVES

c = BuildmasterConfig = {}
adminEmails = []

c['debugPassword'] = "mozilla"
c['projectName'] = "staging-mobile-master"
c['projectURL'] = "http://staging-mobile-master.build.mozilla.org:8020/"
c['buildbotURL'] = "http://staging-mobile-master.build.mozilla.org:8020/"
c['slavePortnum'] = 9020

c['change_source'] = []
c['change_source'].append(PBChangeSource())

c['slaves'] = []
for platform, names in SLAVES.items():
    for name in names:
        c['slaves'].append(BuildSlave(name, 'm0b1l3', max_builds=1))

c['status'] = []
c['status'].append(html.WebStatus(http_port=8020, allowForce=True))

c['status'].append(MailNotifier(
    fromaddr="cltbld@staging-mobile-master.build.mozilla.org",
    sendToInterestedUsers=False,
    extraRecipients=adminEmails,
    mode="failing",
    builders=None,
    relayhost="smtp.mozilla.org"
))

c['schedulers'] = []
c['builders'] = []

for branch_name in sorted(BRANCHES.keys()):
    branch=BRANCHES[branch_name]
    branch_builders=[]

    for platform_name in sorted(branch['platforms'].keys()):
        unittest_builders = []
        talos_builders = []
        bb_branch= "%s-%s" % (branch_name, platform_name)
        platform = branch['platforms'][platform_name]

        c['change_source'].append(MobileFtpPoller(
            tree=branch_name,
            branch='%s-talos' % bb_branch,
            pollInterval=platform['poll_interval'],
            ftpURLs=platform['talos_build_dirs'],
            idleTimeout=2*60*60,
            searchString=platform['poller_string'],
        ))
        c['change_source'].append(MobileFtpPoller(
            tree=branch_name,
            branch='%s-unit' % bb_branch,
            pollInterval=platform['poll_interval'],
            ftpURLs=platform['unit_build_dirs'],
            searchString=platform['poller_string'],
        ))
        # Talos suites
        for suite_name in sorted(platform['talos_suites'].keys()):
            results_server = branch['graph_server']
            suite = platform['talos_suites'][suite_name]
            if 'nochrome' in suite_name:
                nochrome = True
                short_name = suite_name.replace('_nochrome','')
                #the replace is because we supply nochrome as a command
                #line argument to the tp4 test instead of having a seperate
                #tp4_nochrome test
            else:
                short_name = suite_name
                nochrome = False
            if 'graph_server' in suite:
                resultsServer = suite['graph_server']
            if platform.has_key('talos_tarball'):
                talos_tarball = platform['talos_tarball']
            else:
                talos_tarball = None
            if platform.has_key('pageloader_tarball'):
                pageloader_tarball = platform['pageloader_tarball']
            else:
                pageloader_tarball = None
            
            talos_factory = MobileTalosFactory(
                test=short_name,
                timeout=suite['timeout'],
                talos_config_file=suite['config_file'],
                results_server=results_server,
                branch=branch['talos_branch'],
                talos_tarball=talos_tarball,
                pageloader_tarball=pageloader_tarball,
                reboot=platform['reboot'],
                reboot_cmd=platform['reboot_cmd'],
                nochrome=nochrome
            )
            #for some reason this makes a string in a tuple
            #builder_name = "%s %s talos %s" % (platform_name, branch_name, 
            #                                   suite_name.replace('t', 'T', 1)),
            builder_name = "%s %s talos %s" % (platform_name, branch_name,
                                               suite_name)
            talos_builder = {
                'name': builder_name,
                'slavenames': platform['slaves'],
                'builddir': "%s-%s-%s" % (platform_name, branch_name, suite_name),
                'slavebuilddir': '/builds/slave_build_dir',
                'factory': talos_factory,
                'category': bb_branch,
            }
            c['builders'].append(talos_builder)
            talos_builders.append(builder_name)
            branch_builders.append(builder_name)
        # Unit test suites
        for test_name in sorted(platform['test_suites'].keys()):
            test = platform['test_suites'][test_name]
            if test.has_key('clients'):
                clients=test['clients']
            else:
                clients=None
            test_factory = MobileUnittestFactory(
                test=test_name,
                timeout=test['timeout'],
                test_type=test['test_type'],
                known_fail_count=test['known_fail_count'],
                clients=clients,
                reboot=platform['reboot'],
                reboot_cmd=platform['reboot_cmd'],
            )
            test_builder = {
                'name': "%s %s unit %s" % (platform_name, branch_name, test_name),
                'slavenames': platform['slaves'],
                'builddir': "%s-%s-%s" % (platform_name, branch_name, test_name),
                'factory': test_factory,
                'category': bb_branch,
            }
            c['builders'].append(test_builder)
            unittest_builders.append(test_builder['name'])
            branch_builders.append(test_builder['name'])
        c['schedulers'].append(Scheduler(
            name="%s %s talos scheduler" % (platform_name, branch_name),
            branch='%s-talos' % bb_branch,
            treeStableTimer=branch['tree_stable_timer'],
            builderNames=talos_builders,
        ))
        c['schedulers'].append(Scheduler(
            name="%s %s unit scheduler" % (platform_name, branch_name),
            branch='%s-unit' % bb_branch,
            treeStableTimer=branch['tree_stable_timer'],
            builderNames=unittest_builders,
        ))
        c['status'].append(tinderbox.TinderboxMailNotifier(
            fromaddr="mobile.buildbot@build.mozilla.org",
            tree=branch['tinderbox_tree'],
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="smtp.mozilla.org",
            builders=talos_builders,
            logCompression="bzip2"
        ))
        c['status'].append(tinderbox.TinderboxMailNotifier(
            fromaddr="mobile.buildbot@build.mozilla.org",
            tree=branch['tinderbox_tree'],
            extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
            relayhost="smtp.mozilla.org",
            builders=unittest_builders,
            logCompression="bzip2",
            errorparser="unittest"
        ))

    c['schedulers'].append(Scheduler(
        name="%s scheduler" % branch_name,
        branch='%s' % branch_name,
        treeStableTimer=branch['tree_stable_timer'],
        builderNames=branch_builders,
    ))
